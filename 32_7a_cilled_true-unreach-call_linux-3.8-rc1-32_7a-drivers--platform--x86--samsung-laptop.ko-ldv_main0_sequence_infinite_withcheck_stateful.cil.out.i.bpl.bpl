var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: [ref]i16;

var $M.3: [ref]i8;

var $M.4: [ref]i8;

var $M.5: i8;

var $M.6: i32;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]i32;

var $M.15: [ref]i8;

var $M.16: [ref]ref;

var $M.17: [ref]i32;

var $M.18: [ref]ref;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: i32;

var $M.25: i8;

var $M.26: ref;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i32;

var $M.34: [ref]ref;

var $M.35: [ref]i32;

var $M.36: [ref]ref;

var $M.37: [ref]i64;

var $M.38: [ref]i64;

var $M.39: [ref]i8;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.74: [ref]i8;

var $M.75: [ref]ref;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 294858);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __mod_dmi_device_table: ref;

axiom __mod_dmi_device_table == $sub.ref(0, 2396);

const samsung_platform_device: ref;

axiom samsung_platform_device == $sub.ref(0, 3428);

const samsung_laptop_call_io_ops: ref;

axiom samsung_laptop_call_io_ops == $sub.ref(0, 4668);

const swsmi_rfkill_ops: ref;

axiom swsmi_rfkill_ops == $sub.ref(0, 5716);

const seclinux_rfkill_ops: ref;

axiom seclinux_rfkill_ops == $sub.ref(0, 6764);

const backlight_ops: ref;

axiom backlight_ops == $sub.ref(0, 7820);

const dev_attr_usb_charge: ref;

axiom dev_attr_usb_charge == $sub.ref(0, 8892);

const dev_attr_battery_life_extender: ref;

axiom dev_attr_battery_life_extender == $sub.ref(0, 9964);

const dev_attr_performance_level: ref;

axiom dev_attr_performance_level == $sub.ref(0, 11036);

const {:count 4} platform_attributes: ref;

axiom platform_attributes == $sub.ref(0, 12092);

const platform_attribute_group: ref;

axiom platform_attribute_group == $sub.ref(0, 13140);

const {:count 3} sabi_configs: ref;

axiom sabi_configs == $sub.ref(0, 14572);

const debug: ref;

axiom debug == $sub.ref(0, 15597);

const samsung_broken_acpi_video: ref;

axiom samsung_broken_acpi_video == $sub.ref(0, 16622);

const samsung_dmi_table: ref;

axiom samsung_dmi_table == $sub.ref(0, 21430);

const force: ref;

axiom force == $sub.ref(0, 22455);

const quirks: ref;

axiom quirks == $sub.ref(0, 23487);

const samsung_unknown: ref;

axiom samsung_unknown == $sub.ref(0, 24512);

const ldv_mutex_update_lock: ref;

axiom ldv_mutex_update_lock == $sub.ref(0, 25540);

const ldv_mutex_sabi_mutex: ref;

axiom ldv_mutex_sabi_mutex == $sub.ref(0, 26568);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 27596);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 28624);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 29652);

const {:count 8} .str.3: ref;

axiom .str.3 == $sub.ref(0, 30684);

const {:count 6} .str.4: ref;

axiom .str.4 == $sub.ref(0, 31714);

const {:count 18} .str.5: ref;

axiom .str.5 == $sub.ref(0, 32756);

const {:count 15} .str.6: ref;

axiom .str.6 == $sub.ref(0, 33795);

const {:count 18} .str.7: ref;

axiom .str.7 == $sub.ref(0, 34837);

const {:count 5} .str.8: ref;

axiom .str.8 == $sub.ref(0, 35866);

const {:count 9} .str.18: ref;

axiom .str.18 == $sub.ref(0, 36899);

const {:count 7} .str.19: ref;

axiom .str.19 == $sub.ref(0, 37930);

const {:count 7} .str.20: ref;

axiom .str.20 == $sub.ref(0, 38961);

const {:count 7} .str.21: ref;

axiom .str.21 == $sub.ref(0, 39992);

const {:count 10} .str.22: ref;

axiom .str.22 == $sub.ref(0, 41026);

const {:count 75} .str.32: ref;

axiom .str.32 == $sub.ref(0, 42125);

const {:count 37} .str.33: ref;

axiom .str.33 == $sub.ref(0, 43186);

const {:count 98} .str.34: ref;

axiom .str.34 == $sub.ref(0, 44308);

const {:count 67} .str.35: ref;

axiom .str.35 == $sub.ref(0, 45399);

const {:count 18} .str.37: ref;

axiom .str.37 == $sub.ref(0, 46441);

const {:count 4} .str.38: ref;

axiom .str.38 == $sub.ref(0, 47469);

const {:count 8} .str.39: ref;

axiom .str.39 == $sub.ref(0, 48501);

const {:count 22} .str.40: ref;

axiom .str.40 == $sub.ref(0, 49547);

const {:count 3} .str.42: ref;

axiom .str.42 == $sub.ref(0, 50574);

const {:count 4} .str.41: ref;

axiom .str.41 == $sub.ref(0, 51602);

const {:count 11} .str.43: ref;

axiom .str.43 == $sub.ref(0, 52637);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 46} .str.61: ref;

axiom .str.61 == $sub.ref(0, 53707);

const {:count 28} .str.62: ref;

axiom .str.62 == $sub.ref(0, 54759);

const {:count 39} .str.63: ref;

axiom .str.63 == $sub.ref(0, 55822);

const .str: ref;

axiom .str == $sub.ref(0, 56867);

const {:count 46} .str.1: ref;

axiom .str.1 == $sub.ref(0, 57937);

const {:count 60} .str.2: ref;

axiom .str.2 == $sub.ref(0, 59021);

const {:count 15} .str.49: ref;

axiom .str.49 == $sub.ref(0, 60060);

const {:count 52} .str.50: ref;

axiom .str.50 == $sub.ref(0, 61136);

const {:count 8} .str.51: ref;

axiom .str.51 == $sub.ref(0, 62168);

const {:count 3} .str.52: ref;

axiom .str.52 == $sub.ref(0, 63195);

const {:count 3} .str.53: ref;

axiom .str.53 == $sub.ref(0, 64222);

const {:count 3} .str.54: ref;

axiom .str.54 == $sub.ref(0, 65249);

const {:count 3} .str.55: ref;

axiom .str.55 == $sub.ref(0, 66276);

const {:count 5} .str.56: ref;

axiom .str.56 == $sub.ref(0, 67305);

const {:count 14} .str.57: ref;

axiom .str.57 == $sub.ref(0, 68343);

const {:count 5} .str.58: ref;

axiom .str.58 == $sub.ref(0, 69372);

const {:count 6} .str.59: ref;

axiom .str.59 == $sub.ref(0, 70402);

const {:count 14} .str.46: ref;

axiom .str.46 == $sub.ref(0, 71440);

const {:count 25} .str.47: ref;

axiom .str.47 == $sub.ref(0, 72489);

const {:count 23} .str.48: ref;

axiom .str.48 == $sub.ref(0, 73536);

const {:count 13} .str.44: ref;

axiom .str.44 == $sub.ref(0, 74573);

const {:count 18} .str.45: ref;

axiom .str.45 == $sub.ref(0, 75615);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 76647);

const {:count 51} .str.11: ref;

axiom .str.11 == $sub.ref(0, 77722);

const {:count 54} .str.12: ref;

axiom .str.12 == $sub.ref(0, 78800);

const {:count 33} .str.13: ref;

axiom .str.13 == $sub.ref(0, 79857);

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 80923);

const {:count 46} .str.15: ref;

axiom .str.15 == $sub.ref(0, 81993);

const {:count 67} .str.36: ref;

axiom .str.36 == $sub.ref(0, 83084);

const {:count 34} .str.23: ref;

axiom .str.23 == $sub.ref(0, 84142);

const {:count 15} .str.24: ref;

axiom .str.24 == $sub.ref(0, 85181);

const {:count 28} .str.25: ref;

axiom .str.25 == $sub.ref(0, 86233);

const {:count 35} .str.26: ref;

axiom .str.26 == $sub.ref(0, 87292);

const {:count 37} .str.27: ref;

axiom .str.27 == $sub.ref(0, 88353);

const {:count 38} .str.28: ref;

axiom .str.28 == $sub.ref(0, 89415);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 90468);

const {:count 30} .str.30: ref;

axiom .str.30 == $sub.ref(0, 91522);

const {:count 25} .str.31: ref;

axiom .str.31 == $sub.ref(0, 92571);

const {:count 7} .str.16: ref;

axiom .str.16 == $sub.ref(0, 93602);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 27} .str.17: ref;

axiom .str.17 == $sub.ref(0, 94653);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 95685);

const {:count 3} .str.1.79: ref;

axiom .str.1.79 == $sub.ref(0, 96712);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 97750);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 98778);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 99810);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 100842);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const samsung_dmi_matched: ref;

axiom samsung_dmi_matched == $sub.ref(0, 101874);

procedure samsung_dmi_matched($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation samsung_dmi_matched($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(336, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $M.1 := $p2;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const samsung_sysfs_is_visible: ref;

axiom samsung_sysfs_is_visible == $sub.ref(0, 102906);

procedure samsung_sysfs_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_sysfs_is_visible($p0: ref, $p1: ref, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i8;
  var $i20: i8;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i26: i8;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "samsung_sysfs_is_visible:arg:idx"} boogie_si_record_i32($i2);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1144));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 16), 1192));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p7 := platform_get_drvdata($p6);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, $p2i.ref.i64(dev_attr_performance_level));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, $p2i.ref.i64(dev_attr_battery_life_extender));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, $p2i.ref.i64(dev_attr_usb_charge));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i26;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.2, $p34);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i29 := read_usb_charge($p8);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 7} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i29, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 8} {:cexpr "ok"} boogie_si_record_i8($i31);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb9;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i23 := read_battery_life_extender($p8);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 4} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i24 := $sge.i32($i23, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 5} {:cexpr "ok"} boogie_si_record_i8($i25);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 2} {:cexpr "ok"} boogie_si_record_i8($i19);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 103938);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1192)), $mul.ref(16, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const read_battery_life_extender: ref;

axiom read_battery_life_extender == $sub.ref(0, 104970);

procedure read_battery_life_extender($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation read_battery_life_extender($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i9: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(20, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 65535);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.3;
    call {:si_unique_call 11} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p10, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.3 := cmdloc_dummy_var_1;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p13, $sub.i8(0, 128));
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(20, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i18 := sabi_command($p0, $i17, $p1, $p1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 13} {:cexpr "retval"} boogie_si_record_i32($i18);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.3, $p22);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.3, $p34);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i9 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.3, $p28);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 1);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb10;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const read_usb_charge: ref;

axiom read_usb_charge == $sub.ref(0, 106002);

procedure read_usb_charge($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation read_usb_charge($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i9: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 65535);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.4;
    call {:si_unique_call 15} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p10, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.4 := cmdloc_dummy_var_3;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p13, $sub.i8(0, 128));
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i18 := sabi_command($p0, $i17, $p1, $p1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 17} {:cexpr "retval"} boogie_si_record_i32($i18);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.4, $p22);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.4, $p34);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i9 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.4, $p28);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb10;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 107034);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const sabi_command: ref;

axiom sabi_command == $sub.ref(0, 108066);

procedure sabi_command($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, assertsPassed, $CurrAddr;



implementation sabi_command($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i64;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i16;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i64;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i8;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i8;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i16;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i8;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i1;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i16;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i144: i32;
  var $p198: ref;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} {:cexpr "sabi_command:arg:command"} boogie_si_record_i16($i1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i64($i10);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p7, $mul.ref($i11, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i13 := readw($p12);
    call {:si_unique_call 20} {:cexpr "tmp"} boogie_si_record_i16($i13);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(32, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} ldv_mutex_lock_11($p14);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i15 := $M.5;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(3, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p42, $mul.ref($i46, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i48 := readb($p47);
    call {:si_unique_call 25} {:cexpr "tmp___0"} boogie_si_record_i8($i48);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i13);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} outb($i50, $i51);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} writew($i55, $p57);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i1);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(2, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} writew($i59, $p62);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(4, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} writeb(0, $p65);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p2);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(2, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i64($i104);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p101, $mul.ref($i105, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i107 := readb($p106);
    call {:si_unique_call 35} {:cexpr "tmp___1"} boogie_si_record_i8($i107);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i13);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} outb($i109, $i110);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i64($i115);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p112, $mul.ref($i116, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i118 := readb($p117);
    call {:si_unique_call 38} {:cexpr "tmp___2"} boogie_si_record_i8($i118);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i13);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} outb($i120, $i121);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(4, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i125 := readb($p124);
    call {:si_unique_call 41} {:cexpr "complete___0"} boogie_si_record_i8($i125);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(5, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i129 := readb($p128);
    call {:si_unique_call 43} {:cexpr "iface_data"} boogie_si_record_i8($i129);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i125);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 170);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i131 == 1);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i129);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 255);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i125);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 170);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i141 == 1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i129);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 255);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p3);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i175 := $M.5;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i8.i1($i175);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i144 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(32, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ldv_mutex_unlock_12($p198);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $r := $i144;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i176 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p3);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb31;

  $bb32:
    assume $i178 == 1;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i190 := $load.i16($M.0, $p189);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i190);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_16 := printk.ref.i32.i32.i32.i32(.str.35, $i182, $i186, $i191, $i196);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i146 == 1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(5, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i150 := readl($p149);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i150);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p155, $mul.ref(9, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i157 := readl($p156);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p159, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i157);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(7, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i164 := readw($p163);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, $i164);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p169, $mul.ref(6, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i171 := readb($p170);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p174, $i171);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i144 := $sub.i32(0, 22);
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb20;

  $bb13:
    assume $i133 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i134 := $M.5;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i8.i1($i134);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i1);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i125);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i129);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_15 := printk.ref.i32.i32.i32(.str.34, $i136, $i137, $i138);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb11;

  $bb7:
    assume $i67 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(5, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} writel($i71, $p74);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(9, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} writel($i78, $p81);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(13, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} writew($i87, $p90);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(15, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} writeb($i96, $p99);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_14 := printk.ref.i32(.str.33, $i39);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_13 := printk.ref.i32.i32.i32.i32.i32(.str.32, $i19, $i23, $i27, $i32, $i37);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const readw: ref;

axiom readw == $sub.ref(0, 109098);

procedure readw($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation readw($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 51} $i2 := devirtbounce(0, $p1);
    call {:si_unique_call 52} {:cexpr "ret"} boogie_si_record_i16($i2);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_11: ref;

axiom ldv_mutex_lock_11 == $sub.ref(0, 110130);

procedure ldv_mutex_lock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} ldv_mutex_lock_sabi_mutex($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} mutex_lock($p0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 111162);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 64} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const readb: ref;

axiom readb == $sub.ref(0, 112194);

procedure readb($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation readb($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i1 := devirtbounce.1(0, $p0);
    call {:si_unique_call 68} {:cexpr "ret"} boogie_si_record_i8($i1);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 113226);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 70} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 71} devirtbounce.2(0, $i0, $i1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    return;
}



const writew: ref;

axiom writew == $sub.ref(0, 114258);

procedure writew($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation writew($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} {:cexpr "writew:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 73} devirtbounce.3(0, $i0, $p2);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    return;
}



const writeb: ref;

axiom writeb == $sub.ref(0, 115290);

procedure writeb($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation writeb($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "writeb:arg:val"} boogie_si_record_i8($i0);
    call {:si_unique_call 75} devirtbounce.4(0, $i0, $p1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 116322);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 77} devirtbounce.5(0, $i0, $p2);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 117354);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.6, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 78} $i2 := devirtbounce.6(0, $p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 79} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_12: ref;

axiom ldv_mutex_unlock_12 == $sub.ref(0, 118386);

procedure ldv_mutex_unlock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_mutex_unlock_sabi_mutex($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} mutex_unlock($p0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_sabi_mutex: ref;

axiom ldv_mutex_unlock_sabi_mutex == $sub.ref(0, 119418);

procedure ldv_mutex_unlock_sabi_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_sabi_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 83} {:cexpr "ldv_mutex_sabi_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 120450);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 121482);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} __VERIFIER_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_sabi_mutex: ref;

axiom ldv_mutex_lock_sabi_mutex == $sub.ref(0, 122514);

procedure ldv_mutex_lock_sabi_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_sabi_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 86} {:cexpr "ldv_mutex_sabi_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 123546);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 124578);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p1 := external_alloc();
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 125610);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const get_performance_level: ref;

axiom get_performance_level == $sub.ref(0, 126642);

procedure get_performance_level($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const set_performance_level: ref;

axiom set_performance_level == $sub.ref(0, 127674);

procedure set_performance_level($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const strlen: ref;

axiom strlen == $sub.ref(0, 128706);

procedure strlen($p0: ref) returns ($r: i64);



const strncasecmp: ref;

axiom strncasecmp == $sub.ref(0, 129738);

procedure strncasecmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const sabi_set_commandb: ref;

axiom sabi_set_commandb == $sub.ref(0, 130770);

procedure sabi_set_commandb($p0: ref, $i1: i16, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation sabi_set_commandb($p0: ref, $i1: i16, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 91} {:cexpr "sabi_set_commandb:arg:command"} boogie_si_record_i16($i1);
    call {:si_unique_call 92} {:cexpr "sabi_set_commandb:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i2);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i21 := sabi_command($p0, $i20, $p3, $0.ref);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 94} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 131802);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const get_battery_life_extender: ref;

axiom get_battery_life_extender == $sub.ref(0, 132834);

procedure get_battery_life_extender($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const set_battery_life_extender: ref;

axiom set_battery_life_extender == $sub.ref(0, 133866);

procedure set_battery_life_extender($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const sscanf: ref;

axiom sscanf == $sub.ref(0, 134898);

procedure sscanf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const write_battery_life_extender: ref;

axiom write_battery_life_extender == $sub.ref(0, 135930);

procedure write_battery_life_extender($p0: ref, $i1: i32) returns ($r: i32);



const get_usb_charge: ref;

axiom get_usb_charge == $sub.ref(0, 136962);

procedure get_usb_charge($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const set_usb_charge: ref;

axiom set_usb_charge == $sub.ref(0, 137994);

procedure set_usb_charge($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const write_usb_charge: ref;

axiom write_usb_charge == $sub.ref(0, 139026);

procedure write_usb_charge($p0: ref, $i1: i32) returns ($r: i32);



const update_status: ref;

axiom update_status == $sub.ref(0, 140058);

procedure update_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation update_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p1 := bl_get_data($p0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} set_brightness($p2, $i11);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(10, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} vslice_dummy_var_18 := sabi_set_commandb($p2, $i24, 0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(10, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_17 := sabi_set_commandb($p2, $i19, 1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const get_brightness: ref;

axiom get_brightness == $sub.ref(0, 141090);

procedure get_brightness($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation get_brightness($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p1 := bl_get_data($p0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i3 := read_brightness($p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 101} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const bl_get_data: ref;

axiom bl_get_data == $sub.ref(0, 142122);

procedure bl_get_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bl_get_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(392, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const read_brightness: ref;

axiom read_brightness == $sub.ref(0, 143154);

procedure read_brightness($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation read_brightness($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i11 := sabi_command($p0, $i10, $0.ref, $p1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 105} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 106} {:cexpr "user_brightness"} boogie_si_record_i32($i18);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, $i18);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i13 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i18, $i25);
    call {:si_unique_call 107} {:cexpr "user_brightness"} boogie_si_record_i32($i26);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const set_brightness: ref;

axiom set_brightness == $sub.ref(0, 144186);

procedure set_brightness($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation set_brightness($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i8;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "set_brightness:arg:user_brightness"} boogie_si_record_i8($i1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i9, $i10);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 109} {:cexpr "user_level"} boogie_si_record_i8($i12);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(945, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i12);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_20 := sabi_set_commandb($p0, $i29, $i31);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i12);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i18 := read_brightness($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 111} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, $i18);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_19 := sabi_set_commandb($p0, $i24, 0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const seclinux_rfkill_set: ref;

axiom seclinux_rfkill_set == $sub.ref(0, 145218);

procedure seclinux_rfkill_set($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation seclinux_rfkill_set($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 114} {:cexpr "seclinux_rfkill_set:arg:blocked"} boogie_si_record_i1($i1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.12, $p4);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(6, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i2);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i14 := $xor.i1($i13, 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i17 := sabi_set_commandb($p5, $i12, $i16);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 116} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const swsmi_rfkill_query: ref;

axiom swsmi_rfkill_query == $sub.ref(0, 146250);

procedure swsmi_rfkill_query($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation swsmi_rfkill_query($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i16: i32;
  var $i25: i1;
  var vslice_dummy_var_21: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.13, $p4);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i6 := swsmi_wireless_status($p5, $p2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 119} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.14, $p8);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.14, $p17);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.15, $p22);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    call {:si_unique_call 122} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i16, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_21 := rfkill_set_sw_state($p0, $i25);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.15, $p13);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    call {:si_unique_call 120} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const swsmi_rfkill_set: ref;

axiom swsmi_rfkill_set == $sub.ref(0, 147282);

procedure swsmi_rfkill_set($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation swsmi_rfkill_set($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i12: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 124} {:cexpr "swsmi_rfkill_set:arg:blocked"} boogie_si_record_i1($i1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.16, $p5);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i10 := swsmi_wireless_status($p6, $p2);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 126} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 11)), $mul.ref(1, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.15, $p49);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.15, $p58);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 11)), $mul.ref(3, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.15, $p67);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.17, $p22);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.17, $p32);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p42 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(30, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i46 := sabi_command($p6, $i45, $p2, $p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 128} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i3);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i36 := $xor.i1($i35, 1);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p41, $i38);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i3);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i26 := $xor.i1($i25, 1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p31, $i28);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb26:
    assume $i70 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 11)), $mul.ref(1, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p73, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i61 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 11)), $mul.ref(1, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p64, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 11)), $mul.ref(1, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p55, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 11)), $mul.ref(1, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p21, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const swsmi_wireless_status: ref;

axiom swsmi_wireless_status == $sub.ref(0, 148314);

procedure swsmi_wireless_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.1, assertsPassed, $CurrAddr;



implementation swsmi_wireless_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(28, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i9 := sabi_command($p0, $i8, $0.ref, $p1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 130} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const rfkill_set_sw_state: ref;

axiom rfkill_set_sw_state == $sub.ref(0, 149346);

procedure rfkill_set_sw_state($p0: ref, $i1: i1) returns ($r: i1);
  free requires assertsPassed;



implementation rfkill_set_sw_state($p0: ref, $i1: i1) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} {:cexpr "rfkill_set_sw_state:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 133} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 150378);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const seq_read: ref;

axiom seq_read == $sub.ref(0, 151410);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);



const samsung_debugfs_open: ref;

axiom samsung_debugfs_open == $sub.ref(0, 152442);

procedure samsung_debugfs_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation samsung_debugfs_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(1024, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.18, $p2);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i4 := single_open($p1, show_call, $p3);
    call {:si_unique_call 135} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 153474);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);



const show_call: ref;

axiom show_call == $sub.ref(0, 154506);

procedure show_call($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 155538);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 156570);

procedure seq_printf.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 157602);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p3 := malloc($i0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i4 := ldv_is_err($p3);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} __VERIFIER_assume($i7);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 158634);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 144} $r := $malloc($i0);
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 159666);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 146} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p2 := ldv_malloc($i0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 160698);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.39, $M.26, $M.67, $M.68, $M.69, $M.74, $M.75, $M.5, $M.79, $M.80, $M.25, $M.1, $M.24, $M.6, $M.23, $M.22, $M.21, $M.81, $M.82, $M.83, $M.84, $CurrAddr, $M.3, $M.4, $M.27, assertsPassed, $M.28, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i15: i1;
  var $i17: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i13: i32;
  var $i2: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var vslice_dummy_var_22: i16;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    call {:si_unique_call 148} $initialize();
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} ldv_initialize();
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} ldv_handler_precall();
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i0 := samsung_init();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 154} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb5;

  $bb5:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i15, $i17, $i20, $i21, $i22, $i23, $i13, $i2, $i24, $i25, $i26, vslice_dummy_var_22, vslice_dummy_var_23, vslice_dummy_var_24, vslice_dummy_var_25, vslice_dummy_var_26 := main_loop_$bb5($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i15, $i17, $i20, $i21, $i22, $i23, $i13, $i2, $i24, $i25, $i26, vslice_dummy_var_22, vslice_dummy_var_23, vslice_dummy_var_24, vslice_dummy_var_25, vslice_dummy_var_26);
    goto $bb5_last;

  corral_source_split_820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 157} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 158} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i25 == 1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i2, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} ldv_handler_precall();
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} samsung_exit();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ldv_check_final_state();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 161} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i2 := $i13;
    goto corral_source_split_853_dummy;

  $bb14:
    assume $i7 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i2;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i13 := $i23;
    goto $bb25;

  $bb26:
    assume $i20 == 1;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_handler_precall();
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i21 := samsung_debugfs_open($u7, $u8);
    call {:si_unique_call 176} {:cexpr "res_samsung_debugfs_open_41"} boogie_si_record_i32($i21);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} ldv_check_return_value($i21);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb32;

  $bb28:
    assume $i22 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_handler_precall();
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_22 := samsung_sysfs_is_visible($u4, $u5, $u6);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_handler_precall();
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} swsmi_rfkill_query($u3, $u2);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_handler_precall();
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($u1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_23 := swsmi_rfkill_set($u2, $i17);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} ldv_handler_precall();
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($u1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_25 := seclinux_rfkill_set($u2, $i15);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_handler_precall();
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_24 := update_status($u0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_handler_precall();
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_26 := get_brightness($u0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb25;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb35;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  corral_source_split_853_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 161730);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.21, $M.22, $M.23, $M.6, $M.24;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 180} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 181} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 182} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 183} {:cexpr "ldv_mutex_sabi_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 184} {:cexpr "ldv_mutex_update_lock"} boogie_si_record_i32(1);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 162762);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    return;
}



const samsung_init: ref;

axiom samsung_init == $sub.ref(0, 163794);

procedure samsung_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.26, $M.27, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.6, assertsPassed, $M.24;



implementation samsung_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i48: i32;
  var $i45: i32;
  var $i42: i32;
  var $i39: i32;
  var $i33: i32;
  var $i30: i32;
  var $p53: ref;
  var $i5: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $M.1 := samsung_unknown;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i3 := dmi_check_system(samsung_dmi_table);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p6 := kzalloc(1016, 208);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(32, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} __mutex_init($p10, .str, $p0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(944, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p12 := $M.1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(936, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(936, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i19 := acpi_video_backlight_support();
    call {:si_unique_call 192} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(936, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i28 := samsung_platform_init($p7);
    call {:si_unique_call 194} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i31 := samsung_sabi_init($p7);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 199} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i34 := acpi_video_backlight_support();
    call {:si_unique_call 202} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i37 := samsung_sysfs_init($p7);
    call {:si_unique_call 205} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i40 := samsung_backlight_init($p7);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 208} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i43 := samsung_rfkill_init($p7);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 211} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i46 := samsung_leds_init($p7);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 214} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i49 := samsung_debugfs_init($p7);
    call {:si_unique_call 217} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.26 := $p52;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i5 := $i49;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb47:
    assume $i50 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} samsung_leds_exit($p7);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i48 := $i49;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} samsung_rfkill_exit($p7);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i45 := $i48;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} samsung_backlight_exit($p7);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i42 := $i45;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} samsung_sysfs_exit($p7);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i39 := $i42;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} samsung_sabi_exit($p7);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} samsung_platform_exit($p7);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i30 := $i33;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p7);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} kfree($p53);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i5 := $i30;
    goto $bb5;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i47 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i48 := $i46;
    goto $bb45;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i44 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb41;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i41 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb37;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i38 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb33;

  $bb28:
    assume $i35 == 1;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_28 := printk.ref(.str.2);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb26;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb22;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_27 := printk.ref(.str.1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} acpi_video_unregister();
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 1016)), $mul.ref(944, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} acpi_video_dmi_promote_vendor();
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb5;

  $bb1:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 164826);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    return;
}



const samsung_exit: ref;

axiom samsung_exit == $sub.ref(0, 165858);

procedure samsung_exit();
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p0 := $M.26;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} samsung_debugfs_exit($p2);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} samsung_leds_exit($p2);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} samsung_rfkill_exit($p2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} samsung_backlight_exit($p2);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} samsung_sysfs_exit($p2);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} samsung_sabi_exit($p2);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} samsung_platform_exit($p2);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} kfree($p3);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.26 := $0.ref;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 166890);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i0 := $M.21;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} ldv_error();
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} ldv_error();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.23;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} ldv_error();
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.6;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} ldv_error();
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.24;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_error();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const samsung_debugfs_exit: ref;

axiom samsung_debugfs_exit == $sub.ref(0, 167922);

procedure samsung_debugfs_exit($p0: ref);
  free requires assertsPassed;



implementation samsung_debugfs_exit($p0: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} debugfs_remove_recursive($p3);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    return;
}



const samsung_leds_exit: ref;

axiom samsung_leds_exit == $sub.ref(0, 168954);

procedure samsung_leds_exit($p0: ref);
  free requires assertsPassed;



implementation samsung_leds_exit($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1)), $mul.ref(48, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i5 := IS_ERR_OR_NULL($p4);
    call {:si_unique_call 236} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(776, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(776, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} destroy_workqueue($p13);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} led_classdev_unregister($p7);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const samsung_rfkill_exit: ref;

axiom samsung_rfkill_exit == $sub.ref(0, 169986);

procedure samsung_rfkill_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_rfkill_exit($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} rfkill_unregister($p21);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} rfkill_destroy($p24);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} rfkill_unregister($p8);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} rfkill_destroy($p11);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const samsung_backlight_exit: ref;

axiom samsung_backlight_exit == $sub.ref(0, 171018);

procedure samsung_backlight_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_backlight_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} backlight_device_unregister($p6);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const samsung_sysfs_exit: ref;

axiom samsung_sysfs_exit == $sub.ref(0, 172050);

procedure samsung_sysfs_exit($p0: ref);
  free requires assertsPassed;



implementation samsung_sysfs_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1192)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} sysfs_remove_group($p4, platform_attribute_group);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    return;
}



const samsung_sabi_exit: ref;

axiom samsung_sabi_exit == $sub.ref(0, 173082);

procedure samsung_sabi_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_sabi_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} iounmap($p28);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} iounmap($p21);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(34, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 255);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(34, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_29 := sabi_set_commandb($p0, $i14, $sub.i8(0, 128));
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const samsung_platform_exit: ref;

axiom samsung_platform_exit == $sub.ref(0, 174114);

procedure samsung_platform_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_platform_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} platform_device_unregister($p6);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 175146);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} free_($p0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 176178);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 250} $free($p0);
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 177210);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 178242);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_group: ref;

axiom sysfs_remove_group == $sub.ref(0, 179274);

procedure sysfs_remove_group($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_group($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    return;
}



const backlight_device_unregister: ref;

axiom backlight_device_unregister == $sub.ref(0, 180306);

procedure backlight_device_unregister($p0: ref);
  free requires assertsPassed;



implementation backlight_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    return;
}



const rfkill_unregister: ref;

axiom rfkill_unregister == $sub.ref(0, 181338);

procedure rfkill_unregister($p0: ref);
  free requires assertsPassed;



implementation rfkill_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    return;
}



const rfkill_destroy: ref;

axiom rfkill_destroy == $sub.ref(0, 182370);

procedure rfkill_destroy($p0: ref);
  free requires assertsPassed;



implementation rfkill_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    return;
}



const IS_ERR_OR_NULL: ref;

axiom IS_ERR_OR_NULL == $sub.ref(0, 183402);

procedure IS_ERR_OR_NULL($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR_OR_NULL($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i3: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i64($i4, 18446744073709547520);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i3);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const led_classdev_unregister: ref;

axiom led_classdev_unregister == $sub.ref(0, 184434);

procedure led_classdev_unregister($p0: ref);
  free requires assertsPassed;



implementation led_classdev_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 185466);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 186498);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 254} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debugfs_remove_recursive: ref;

axiom debugfs_remove_recursive == $sub.ref(0, 187530);

procedure debugfs_remove_recursive($p0: ref);
  free requires assertsPassed;



implementation debugfs_remove_recursive($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    return;
}



const dmi_check_system: ref;

axiom dmi_check_system == $sub.ref(0, 188562);

procedure dmi_check_system($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmi_check_system($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 256} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 189594);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 258} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 190626);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    return;
}



const acpi_video_dmi_promote_vendor: ref;

axiom acpi_video_dmi_promote_vendor == $sub.ref(0, 191658);

procedure acpi_video_dmi_promote_vendor();
  free requires assertsPassed;



implementation acpi_video_dmi_promote_vendor()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    return;
}



const acpi_video_backlight_support: ref;

axiom acpi_video_backlight_support == $sub.ref(0, 192690);

procedure acpi_video_backlight_support() returns ($r: i32);
  free requires assertsPassed;



implementation acpi_video_backlight_support() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const acpi_video_unregister: ref;

axiom acpi_video_unregister == $sub.ref(0, 193722);

procedure acpi_video_unregister();
  free requires assertsPassed;



implementation acpi_video_unregister()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    return;
}



const samsung_platform_init: ref;

axiom samsung_platform_init == $sub.ref(0, 194754);

procedure samsung_platform_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $CurrAddr;



implementation samsung_platform_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p1 := platform_device_register_simple(.str.10, $sub.i32(0, 1), $0.ref, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i3 := IS_ERR($p2);
    call {:si_unique_call 264} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} platform_set_drvdata($p11, $p12);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i6 := PTR_ERR($p5);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const samsung_sabi_init: ref;

axiom samsung_sabi_init == $sub.ref(0, 195786);

procedure samsung_sabi_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_sabi_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i1;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i12: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i24: i32;
  var $i97: i1;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p1 := ioremap_nocache(983040, 65535);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} samsung_sabi_diag($p0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, sabi_configs);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i20 := find_signature($p15, $p19);
    call {:si_unique_call 272} {:cexpr "loca"} boogie_si_record_i32($i20);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 65535);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume {:branchcond $i21} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i24 := find_signature($p92, $p96);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i24, 65535);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    assume {:branchcond $i97} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, 65535);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i23, 1);
    call {:si_unique_call 275} {:cexpr "loca"} boogie_si_record_i32($i34);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i34);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(5, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p41, $mul.ref($i45, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i47 := readw($p46);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i16($i47);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i48, 4);
    call {:si_unique_call 278} {:cexpr "ifaceP"} boogie_si_record_i32($i49);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(4, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p51, $mul.ref($i55, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i57 := readw($p56);
    call {:si_unique_call 280} {:cexpr "tmp___0"} boogie_si_record_i16($i57);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, $i49);
    call {:si_unique_call 281} {:cexpr "ifaceP"} boogie_si_record_i32($i59);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i60 := $M.5;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i59);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p63 := ioremap_nocache($i62, 16);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p63);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(16, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $p70 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(34, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 255);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(944, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_34 := printk.ref.ref(.str.15, $p87);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i12, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb44:
    assume $i89 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} samsung_sabi_exit($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i83 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} check_for_stepping_quirk($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i73 == 1;
    $p74 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(34, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i78 := sabi_set_commandb($p0, $i77, $sub.i8(0, 127));
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 286} {:cexpr "tmp___1"} boogie_si_record_i32($i78);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i79 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_33 := printk.ref(.str.14);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb9;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i68 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_32 := printk.ref.i32(.str.13, $i59);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb9;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} samsung_sabi_infos($p0, $i34, $i59);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i26 := $M.5;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i27 == 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i28 := $M.25;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_31 := printk.ref(.str.12);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i9 := $M.25;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_30 := printk.ref(.str.11);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const samsung_sysfs_init: ref;

axiom samsung_sysfs_init == $sub.ref(0, 196818);

procedure samsung_sysfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation samsung_sysfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1192)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i5 := sysfs_create_group($p4, platform_attribute_group);
    call {:si_unique_call 292} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const samsung_backlight_init: ref;

axiom samsung_backlight_init == $sub.ref(0, 197850);

procedure samsung_backlight_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.24;



implementation samsung_backlight_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i5: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(944, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.27;
    call {:si_unique_call 294} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p6, 0, 24, $zext.i32.i64(4), 0 == 1);
    $M.27 := cmdloc_dummy_var_5;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p7, 2);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 136)), $mul.ref(129, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i12, $i17);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p19, $i18);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1192)), $mul.ref(16, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p24 := backlight_device_register(.str.10, $p22, $p23, backlight_ops, $p1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i26 := IS_ERR($p25);
    call {:si_unique_call 297} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p24);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i32 := read_brightness($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 1536)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i32);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 1536)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(208, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} backlight_update_status($p42);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p24);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i29 := PTR_ERR($p28);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i5 := $i30;
    goto $bb3;
}



const samsung_rfkill_init: ref;

axiom samsung_rfkill_init == $sub.ref(0, 198882);

procedure samsung_rfkill_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_rfkill_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i13 := samsung_rfkill_init_swsmi($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 305} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i6 := samsung_rfkill_init_seclinux($p0);
    call {:si_unique_call 303} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const samsung_leds_init: ref;

axiom samsung_leds_init == $sub.ref(0, 199914);

procedure samsung_leds_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_leds_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i10: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p4 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.46, 10, 1, $p1, .str.46);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(776, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(776, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i11 := kbd_backlight_enable($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 311} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i12 := $sge.i32($i11, 0);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} samsung_leds_exit($p0);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(784, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} __init_work($p13, 0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 4195328);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(784, 1)), $mul.ref(0, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 313} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p17, $p18, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(784, 1)), $mul.ref(32, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} lockdep_init_map($p20, .str.47, $p2, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(784, 1)), $mul.ref(8, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} INIT_LIST_HEAD($p22);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(784, 1)), $mul.ref(24, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, kbd_led_update);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, .str.48);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, kbd_led_set);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1)), $mul.ref(32, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, kbd_led_get);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1)), $mul.ref(12, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 8);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1192)), $mul.ref(16, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(264, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i37 := led_classdev_register($p35, $p36);
    call {:si_unique_call 317} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb7;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const samsung_debugfs_init: ref;

axiom samsung_debugfs_init == $sub.ref(0, 200946);

procedure samsung_debugfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_debugfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p17: ref;
  var $p19: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $i121: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p1 := debugfs_create_dir(.str.49, $0.ref);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p11);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, 65535);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(8, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p19);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 12);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(946, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p27);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(946, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i34 := strlen($p33);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i34);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(20, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p43 := debugfs_create_u16(.str.51, 420, $p40, $p42);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p54 := debugfs_create_u32(.str.52, 420, $p48, $p53);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p65 := debugfs_create_u32(.str.53, 420, $p59, $p64);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p76 := debugfs_create_u16(.str.54, 420, $p70, $p75);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p87 := debugfs_create_u8(.str.55, 420, $p81, $p86);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(40, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p95 := debugfs_create_blob(.str.56, 420, $p92, $p94);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(24, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p103 := debugfs_create_blob(.str.57, 384, $p100, $p102);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p110 := debugfs_create_file(.str.58, $sub.i16(0, 32476), $p108, $p109, samsung_laptop_call_io_ops);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(0, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(864, 1)), $mul.ref(56, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p118 := debugfs_create_blob(.str.59, 420, $p115, $p117);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i121 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $r := $i121;
    return;

  $bb29:
    assume $i120 == 1;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} samsung_debugfs_exit($p0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i121 := $sub.i32(0, 12);
    goto $bb32;

  $bb26:
    assume $i112 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i105 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i97 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i89 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i78 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i67 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i56 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i45 == 1;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_35 := printk.ref(.str.50);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const debugfs_create_dir: ref;

axiom debugfs_create_dir == $sub.ref(0, 201978);

procedure debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p2 := external_alloc();
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const debugfs_create_u16: ref;

axiom debugfs_create_u16 == $sub.ref(0, 203010);

procedure debugfs_create_u16($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_u16($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "debugfs_create_u16:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p4 := external_alloc();
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const debugfs_create_u32: ref;

axiom debugfs_create_u32 == $sub.ref(0, 204042);

procedure debugfs_create_u32($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_u32($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "debugfs_create_u32:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p4 := external_alloc();
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const debugfs_create_u8: ref;

axiom debugfs_create_u8 == $sub.ref(0, 205074);

procedure debugfs_create_u8($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_u8($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} {:cexpr "debugfs_create_u8:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p4 := external_alloc();
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const debugfs_create_blob: ref;

axiom debugfs_create_blob == $sub.ref(0, 206106);

procedure debugfs_create_blob($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_blob($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "debugfs_create_blob:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p4 := external_alloc();
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const debugfs_create_file: ref;

axiom debugfs_create_file == $sub.ref(0, 207138);

procedure debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} {:cexpr "debugfs_create_file:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p5 := external_alloc();
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 208170);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 344} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p5 := external_alloc();
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kbd_backlight_enable: ref;

axiom kbd_backlight_enable == $sub.ref(0, 209202);

procedure kbd_backlight_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation kbd_backlight_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i9: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 65535);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.28;
    call {:si_unique_call 347} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p10, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.28 := cmdloc_dummy_var_10;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p13, 43707);
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i18 := sabi_command($p0, $i17, $p1, $p1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 349} {:cexpr "retval"} boogie_si_record_i32($i18);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.28, $p22);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 52445);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 210234);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 211266);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 212298);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 213330);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    return;
}



const kbd_led_update: ref;

axiom kbd_led_update == $sub.ref(0, 214362);

procedure kbd_led_update($p0: ref);



const kbd_led_set: ref;

axiom kbd_led_set == $sub.ref(0, 215394);

procedure kbd_led_set($p0: ref, $i1: i32);



const kbd_led_get: ref;

axiom kbd_led_get == $sub.ref(0, 216426);

procedure kbd_led_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation kbd_led_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 264), 1016));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i3 := kbd_backlight_read($p2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 353} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const led_classdev_register: ref;

axiom led_classdev_register == $sub.ref(0, 217458);

procedure led_classdev_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation led_classdev_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 354} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kbd_backlight_read: ref;

axiom kbd_backlight_read == $sub.ref(0, 218490);

procedure kbd_backlight_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation kbd_backlight_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i15: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 357} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p5, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $sub.i8(0, 127));
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i13 := sabi_command($p0, $i12, $p1, $p1);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 359} {:cexpr "retval"} boogie_si_record_i32($i13);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 219522);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const kbd_backlight_write: ref;

axiom kbd_backlight_write == $sub.ref(0, 220554);

procedure kbd_backlight_write($p0: ref, $i1: i32) returns ($r: i32);



const samsung_rfkill_init_seclinux: ref;

axiom samsung_rfkill_init_seclinux == $sub.ref(0, 221586);

procedure samsung_rfkill_init_seclinux($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_rfkill_init_seclinux($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(216, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i2 := samsung_new_rfkill($p0, $p1, .str.44, 1, seclinux_rfkill_ops, $sub.i32(0, 1));
    call {:si_unique_call 361} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const samsung_rfkill_init_swsmi: ref;

axiom samsung_rfkill_init_swsmi == $sub.ref(0, 222618);

procedure samsung_rfkill_init_swsmi($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation samsung_rfkill_init_swsmi($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i25: i32;
  var $i43: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i2 := swsmi_wireless_status($p0, $p1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 364} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.15, $p10);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 2);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i2;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.15, $p28);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 2);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i23;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i25 := $i41;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i25, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i7 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} samsung_rfkill_exit($p0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(240, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.15, $p35);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i40 := samsung_new_rfkill($p0, $p32, .str.45, 2, swsmi_rfkill_ops, $i39);
    call {:si_unique_call 370} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb17;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(216, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.15, $p17);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i22 := samsung_new_rfkill($p0, $p14, .str.44, 1, swsmi_rfkill_ops, $i21);
    call {:si_unique_call 368} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, $sub.i32(0, 22));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i5 := samsung_rfkill_init_seclinux($p0);
    call {:si_unique_call 366} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb5;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const samsung_new_rfkill: ref;

axiom samsung_new_rfkill == $sub.ref(0, 223650);

procedure samsung_new_rfkill($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_new_rfkill($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "samsung_new_rfkill:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 373} {:cexpr "samsung_new_rfkill:arg:blocked"} boogie_si_record_i32($i5);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(200, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1192)), $mul.ref(16, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p13 := rfkill_alloc($p2, $p11, $i3, $p4, $p12);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p13);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p6);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p6);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i22 := rfkill_register($p21);
    call {:si_unique_call 377} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p6);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} rfkill_destroy($p24);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i17 := $i22;
    goto $bb3;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p6);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i5, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} rfkill_init_sw_state($p19, $i20);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;
}



const rfkill_alloc: ref;

axiom rfkill_alloc == $sub.ref(0, 224682);

procedure rfkill_alloc($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rfkill_alloc($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "rfkill_alloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p5 := external_alloc();
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const rfkill_init_sw_state: ref;

axiom rfkill_init_sw_state == $sub.ref(0, 225714);

procedure rfkill_init_sw_state($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation rfkill_init_sw_state($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "rfkill_init_sw_state:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    return;
}



const rfkill_register: ref;

axiom rfkill_register == $sub.ref(0, 226746);

procedure rfkill_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rfkill_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const backlight_device_register: ref;

axiom backlight_device_register == $sub.ref(0, 227778);

procedure backlight_device_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation backlight_device_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p5 := external_alloc();
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 228810);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 229842);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const backlight_update_status: ref;

axiom backlight_update_status == $sub.ref(0, 230874);

procedure backlight_update_status($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.24, assertsPassed, $CurrAddr, $M.6;



implementation backlight_update_status($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(24, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} ldv_mutex_lock_6($p1);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(360, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(24, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} ldv_mutex_unlock_7($p17);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(360, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(360, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 388} vslice_dummy_var_36 := devirtbounce.7($p15, $p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_6: ref;

axiom ldv_mutex_lock_6 == $sub.ref(0, 231906);

procedure ldv_mutex_lock_6($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_mutex_lock_update_lock($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} mutex_lock($p0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_7: ref;

axiom ldv_mutex_unlock_7 == $sub.ref(0, 232938);

procedure ldv_mutex_unlock_7($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_mutex_unlock_update_lock($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} mutex_unlock($p0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_update_lock: ref;

axiom ldv_mutex_unlock_update_lock == $sub.ref(0, 233970);

procedure ldv_mutex_unlock_update_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_update_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_error();
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 395} {:cexpr "ldv_mutex_update_lock"} boogie_si_record_i32(1);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_update_lock: ref;

axiom ldv_mutex_lock_update_lock == $sub.ref(0, 235002);

procedure ldv_mutex_lock_update_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_update_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} ldv_error();
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 397} {:cexpr "ldv_mutex_update_lock"} boogie_si_record_i32(2);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sysfs_create_group: ref;

axiom sysfs_create_group == $sub.ref(0, 236034);

procedure sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 237066);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 401} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p2 := external_alloc();
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const samsung_sabi_diag: ref;

axiom samsung_sabi_diag == $sub.ref(0, 238098);

procedure samsung_sabi_diag($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation samsung_sabi_diag($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i7: i32;
  var $i8: i32;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i3 := find_signature($p2, .str.16);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 65535);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i3, 1);
    call {:si_unique_call 405} {:cexpr "loca"} boogie_si_record_i32($i5);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 65534);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $M.5;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i33 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(946, 1)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb26;

  $bb27:
    assume $i38 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(946, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_37 := printk.ref.ref(.str.17, $p40);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, $i5;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $p28, $i29, $i30, $i7, $i8, $i31 := samsung_sabi_diag_loop_$bb8($p0, $p9, $p10, $i11, $p12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $p28, $i29, $i30, $i7, $i8, $i31);
    goto $bb8_last;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i31 := $ule.i32($i7, 62);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i13 := readb($p12);
    call {:si_unique_call 407} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i15, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 7);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i13);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 47);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i13);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 45);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i7, 1);
    call {:si_unique_call 408} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i7);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(946, 1)), $mul.ref($i26, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i13);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i8, 1);
    call {:si_unique_call 409} {:cexpr "loca"} boogie_si_record_i32($i29);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i29, 65534);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb19:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8 := $i25, $i29;
    goto $bb19_dummy;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;
}



const find_signature: ref;

axiom find_signature == $sub.ref(0, 239130);

procedure find_signature($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation find_signature($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i2: i32;
  var $i3: i32;
  var $i23: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i2, $i3 := 0, 0;
    goto $bb1;

  $bb1:
    call $i4, $p5, $i6, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i2, $i3, $i23 := find_signature_loop_$bb1($p0, $p1, $i4, $p5, $i6, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i2, $i3, $i23);
    goto $bb1_last;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i6 := readb($p5);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i3);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref($i7, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i6);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, $i11);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i2, 1);
    call {:si_unique_call 416} {:cexpr "loca"} boogie_si_record_i32($i21);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 65534);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i2, $i3 := $i21, $i20;
    goto $bb10_dummy;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i13 := strlen($p1);
    call {:si_unique_call 414} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i3);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64($i13, 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i3, 1);
    call {:si_unique_call 415} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb9;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb7;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;
}



const samsung_sabi_infos: ref;

axiom samsung_sabi_infos == $sub.ref(0, 240162);

procedure samsung_sabi_infos($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation samsung_sabi_infos($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "samsung_sabi_infos:arg:loca"} boogie_si_record_i32($i1);
    call {:si_unique_call 418} {:cexpr "samsung_sabi_infos:arg:ifaceP"} boogie_si_record_i32($i2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, 983034);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_38 := printk.ref.i32(.str.23, $i5);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_39 := printk.ref(.str.24);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p9, $mul.ref($i13, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i15 := readw($p14);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i16($i15);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_40 := printk.ref.i32(.str.25, $i16);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(2, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p19, $mul.ref($i23, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i25 := readb($p24);
    call {:si_unique_call 425} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_41 := printk.ref.i32(.str.26, $i26);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(3, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p29, $mul.ref($i33, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i35 := readb($p34);
    call {:si_unique_call 428} {:cexpr "tmp___1"} boogie_si_record_i8($i35);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_42 := printk.ref.i32(.str.27, $i36);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p39, $mul.ref($i43, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i45 := readb($p44);
    call {:si_unique_call 431} {:cexpr "tmp___2"} boogie_si_record_i8($i45);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_43 := printk.ref.i32(.str.28, $i46);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(4, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p49, $mul.ref($i53, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i55 := readw($p54);
    call {:si_unique_call 434} {:cexpr "tmp___3"} boogie_si_record_i16($i55);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_44 := printk.ref.i32(.str.29, $i56);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(8, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(5, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p59, $mul.ref($i63, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i65 := readw($p64);
    call {:si_unique_call 437} {:cexpr "tmp___4"} boogie_si_record_i16($i65);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_45 := printk.ref.i32(.str.30, $i66);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_46 := printk.ref.i32(.str.31, $i2);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    return;
}



const check_for_stepping_quirk: ref;

axiom check_for_stepping_quirk == $sub.ref(0, 241194);

procedure check_for_stepping_quirk($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed;



implementation check_for_stepping_quirk($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i6: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i1 := read_brightness($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 441} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i3 := read_brightness($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 444} {:cexpr "initial_level"} boogie_si_record_i32($i3);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 2);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i3, $sub.i32(0, 2));
    call {:si_unique_call 446} {:cexpr "check_level"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(945, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i6);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} set_brightness($p0, $i11);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i12 := read_brightness($p0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 449} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, $i6);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} set_brightness($p0, $i18);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1016)), $mul.ref(945, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} vslice_dummy_var_47 := printk.ref(.str.36);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i3, 2);
    call {:si_unique_call 445} {:cexpr "check_level"} boogie_si_record_i32($i5);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} set_brightness($p0, 1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const platform_device_register_simple: ref;

axiom platform_device_register_simple == $sub.ref(0, 242226);

procedure platform_device_register_simple($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $CurrAddr;



implementation platform_device_register_simple($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "platform_device_register_simple:arg:id"} boogie_si_record_i32($i1);
    call {:si_unique_call 453} {:cexpr "platform_device_register_simple:arg:num"} boogie_si_record_i32($i3);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p4 := platform_device_register_resndata($0.ref, $p0, $i1, $p2, $i3, $0.ref, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 243258);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1192)), $mul.ref(16, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_48 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 244290);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const platform_device_register_resndata: ref;

axiom platform_device_register_resndata == $sub.ref(0, 245322);

procedure platform_device_register_resndata($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $i6: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $CurrAddr;



implementation platform_device_register_resndata($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $i6: i64) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p7 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 459} {:cexpr "platform_device_register_resndata:arg:id"} boogie_si_record_i32($i2);
    call {:si_unique_call 460} {:cexpr "platform_device_register_resndata:arg:num"} boogie_si_record_i32($i4);
    call {:si_unique_call 461} {:cexpr "platform_device_register_resndata:arg:size"} boogie_si_record_i64($i6);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p8, $p0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p10, $0.ref);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p11, $p1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p12, $i2);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p13, $p3);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p14, $i4);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p15, $p5);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p16, $i6);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p17, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p18 := platform_device_register_full($p7);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;
}



const platform_device_register_full: ref;

axiom platform_device_register_full == $sub.ref(0, 246354);

procedure platform_device_register_full($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_register_full($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p1 := external_alloc();
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 247386);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 465} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 248418);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 1} true;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 249450);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 250482);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 251514);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 252546);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 253578);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 254610);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 255642);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 256674);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 257706);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 258738);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 259770);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 260802);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 261834);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 468} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 469} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 470} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 471} __VERIFIER_assume($i4);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 262866);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 263898);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 264930);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 265962);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 266994);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 268026);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 269058);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 270090);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 271122);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 272154);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 273186);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 274218);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 275250);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 276282);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 277314);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 278346);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 279378);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 474} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 475} __VERIFIER_assume($i10);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 280410);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 476} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 477} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 281442);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 282474);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 478} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 479} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 283506);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 284538);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 285570);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 286602);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.39, $M.26, $M.67, $M.68, $M.69, $M.74, $M.75, $M.0, $M.5, $M.79, $M.80, $M.25, $M.1, $M.24, $M.6, $M.23, $M.22, $M.21, $M.81, $M.82, $M.83, $M.84;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 480} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.39 := $store.ref($M.39, __mod_dmi_device_table, $0.ref);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(8, 1)), $0.ref);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.39 := $store.i8($M.39, $add.ref($add.ref($add.ref($add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.39 := $store.ref($M.39, $add.ref($add.ref(__mod_dmi_device_table, $mul.ref(0, 344)), $mul.ref(336, 1)), $0.ref);
    $M.26 := $0.ref;
    $M.67 := $store.ref($M.67, swsmi_rfkill_ops, $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(swsmi_rfkill_ops, $mul.ref(0, 24)), $mul.ref(8, 1)), swsmi_rfkill_query);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(swsmi_rfkill_ops, $mul.ref(0, 24)), $mul.ref(16, 1)), swsmi_rfkill_set);
    $M.67 := $store.ref($M.67, seclinux_rfkill_ops, $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(seclinux_rfkill_ops, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(seclinux_rfkill_ops, $mul.ref(0, 24)), $mul.ref(16, 1)), seclinux_rfkill_set);
    $M.74 := $store.ref($M.74, dev_attr_usb_charge, .str.43);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(32, 1)), get_usb_charge);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_attr_usb_charge, $mul.ref(0, 48)), $mul.ref(40, 1)), set_usb_charge);
    $M.74 := $store.ref($M.74, dev_attr_battery_life_extender, .str.40);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(32, 1)), get_battery_life_extender);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_attr_battery_life_extender, $mul.ref(0, 48)), $mul.ref(40, 1)), set_battery_life_extender);
    $M.74 := $store.ref($M.74, dev_attr_performance_level, .str.37);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.i8($M.74, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(32, 1)), get_performance_level);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_attr_performance_level, $mul.ref(0, 48)), $mul.ref(40, 1)), set_performance_level);
    $M.75 := $store.ref($M.75, platform_attributes, dev_attr_performance_level);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(platform_attributes, $mul.ref(0, 32)), $mul.ref(1, 8)), dev_attr_battery_life_extender);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(platform_attributes, $mul.ref(0, 32)), $mul.ref(2, 8)), dev_attr_usb_charge);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(platform_attributes, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.0 := $store.i32($M.0, sabi_configs, 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(8, 1)), .str.18);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(16, 1)), 19529);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(3, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(4, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(18, 1)), $mul.ref(5, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(4, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(8, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(10, 1)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(12, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(14, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(16, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(18, 1)), 9);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(20, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(22, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(24, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(26, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(28, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(30, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(32, 1)), $sub.i16(0, 1));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(24, 1)), $mul.ref(34, 1)), 10);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(0, 1)), .str.19);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(1, 16)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(2, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(2, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(3, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(64, 1)), $mul.ref(3, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(128, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(0, 136)), $mul.ref(129, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(0, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(8, 1)), .str.21);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(16, 1)), 22595);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(18, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(18, 1)), $mul.ref(1, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(18, 1)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(18, 1)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(18, 1)), $mul.ref(4, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(18, 1)), $mul.ref(5, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(2, 1)), 17);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(4, 1)), 18);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(6, 1)), 19);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(8, 1)), 45);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(12, 1)), 255);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(14, 1)), 255);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(16, 1)), 49);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(18, 1)), 50);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(22, 1)), 102);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(24, 1)), 103);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(26, 1)), 104);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(30, 1)), 106);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(32, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(24, 1)), $mul.ref(34, 1)), 255);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(0, 1)), .str.20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.19);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(1, 16)), $mul.ref(8, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.22);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(2, 16)), $mul.ref(8, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(3, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(64, 1)), $mul.ref(3, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(128, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(1, 136)), $mul.ref(129, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(18, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(18, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(18, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(18, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(18, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(18, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(24, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(1, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(1, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(2, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(2, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(3, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(64, 1)), $mul.ref(3, 16)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(128, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sabi_configs, $mul.ref(0, 408)), $mul.ref(2, 136)), $mul.ref(129, 1)), 0);
    $M.5 := 0;
    call {:si_unique_call 481} {:cexpr "debug"} boogie_si_record_i8(0);
    $M.79 := $store.i8($M.79, samsung_broken_acpi_video, 1);
    $M.80 := $store.ref($M.80, samsung_dmi_table, $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 15);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 56);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(0, 1)), $mul.ref(336, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(0, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(8, 1)), $0.ref);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 15);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 57);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(344, 1)), $mul.ref(336, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(0, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(8, 1)), $0.ref);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 15);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(688, 1)), $mul.ref(336, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(0, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(8, 1)), $0.ref);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 15);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1032, 1)), $mul.ref(336, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(0, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(8, 1)), .str.3);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 10);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1376, 1)), $mul.ref(336, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(0, 1)), samsung_dmi_matched);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(8, 1)), .str.4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 10);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(1720, 1)), $mul.ref(336, 1)), samsung_broken_acpi_video);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(0, 1)), samsung_dmi_matched);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(8, 1)), .str.5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 54);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 10);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 54);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 80);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2064, 1)), $mul.ref(336, 1)), samsung_broken_acpi_video);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(0, 1)), samsung_dmi_matched);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(8, 1)), .str.6);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 10);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 53);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2408, 1)), $mul.ref(336, 1)), samsung_broken_acpi_video);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(0, 1)), samsung_dmi_matched);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(8, 1)), .str.7);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 70);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 70);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 70);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 51);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 10);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 70);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 70);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 50);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 47);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 70);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 51);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 49);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(2752, 1)), $mul.ref(336, 1)), samsung_broken_acpi_video);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(0, 1)), samsung_dmi_matched);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(8, 1)), .str.8);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 65);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 85);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 71);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 69);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 82);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 78);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 83);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 67);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 79);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 44);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 76);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 84);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 46);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 88);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 51);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 54);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 10);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 88);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 51);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 54);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3096, 1)), $mul.ref(336, 1)), samsung_broken_acpi_video);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(0, 1)), $0.ref);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(8, 1)), $0.ref);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.80 := $store.ref($M.80, $add.ref($add.ref($add.ref(samsung_dmi_table, $mul.ref(0, 3784)), $mul.ref(3440, 1)), $mul.ref(336, 1)), $0.ref);
    $M.25 := 0;
    call {:si_unique_call 482} {:cexpr "force"} boogie_si_record_i8(0);
    $M.1 := $0.ref;
    $M.0 := $store.i8($M.0, samsung_unknown, 0);
    $M.24 := 0;
    call {:si_unique_call 483} {:cexpr "ldv_mutex_update_lock"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 484} {:cexpr "ldv_mutex_sabi_mutex"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 485} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 486} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 487} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.18, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(3, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(6, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(7, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 7)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 7)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 7)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 7)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 7)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 7)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(5, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.81 := $store.i8($M.81, .str.38, 37);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.38, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.82 := $store.i8($M.82, .str.39, 117);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.39, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.83 := $store.i8($M.83, .str.42, 37);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.42, $mul.ref(0, 3)), $mul.ref(1, 1)), 105);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.42, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.84 := $store.i8($M.84, .str.41, 37);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.41, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(8, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 7)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 7)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 7)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 7)), $mul.ref(4, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 7)), $mul.ref(5, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 488} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 287634);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 288666);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 289698);

procedure devirtbounce.2(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 290730);

procedure devirtbounce.3(funcPtr: ref, arg: i16, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i16, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 291762);

procedure devirtbounce.4(funcPtr: ref, arg: i8, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i8, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 292794);

procedure devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 293826);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.6, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(kbd_led_get, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(get_brightness, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(update_status, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(samsung_dmi_matched, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 489} $i2 := samsung_dmi_matched($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 490} $i4 := update_status($p3);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    $r := $i4;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 491} $i6 := get_brightness($p5);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    $r := $i6;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 492} $i8 := kbd_led_get($p7);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    $r := $i8;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 294858);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.6, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(kbd_led_get, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i10 == 1);
    $i9 := $eq.ref(get_brightness, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i9 == 1);
    $i8 := $eq.ref(update_status, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(samsung_dmi_matched, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 493} $i2 := samsung_dmi_matched($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 494} $i3 := update_status(arg);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    $r := $i3;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 495} $i4 := get_brightness(arg);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    $r := $i4;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 496} $i6 := kbd_led_get($p5);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    $r := $i6;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i8;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: i32;

const $u7: ref;

const $u8: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.39, $M.26, $M.67, $M.68, $M.69, $M.74, $M.75, $M.0, $M.5, $M.79, $M.80, $M.25, $M.1, $M.24, $M.6, $M.23, $M.22, $M.21, $M.81, $M.82, $M.83, $M.84, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 497} __SMACK_static_init();
    call {:si_unique_call 498} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.15, $M.0, $M.39, $M.26, $M.67, $M.68, $M.69, $M.74, $M.75, $M.5, $M.79, $M.80, $M.25, $M.1, $M.24, $M.6, $M.23, $M.22, $M.21, $M.81, $M.82, $M.83, $M.84, $CurrAddr, $M.3, $M.4, $M.27, $M.28, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i15: i1, in_$i17: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i13: i32, in_$i2: i32, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_vslice_dummy_var_22: i16, in_vslice_dummy_var_23: i32, in_vslice_dummy_var_24: i32, in_vslice_dummy_var_25: i32, in_vslice_dummy_var_26: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i15: i1, out_$i17: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i13: i32, out_$i2: i32, out_$i24: i32, out_$i25: i1, out_$i26: i1, out_vslice_dummy_var_22: i16, out_vslice_dummy_var_23: i32, out_vslice_dummy_var_24: i32, out_vslice_dummy_var_25: i32, out_vslice_dummy_var_26: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i15, out_$i17, out_$i20, out_$i21, out_$i22, out_$i23, out_$i13, out_$i2, out_$i24, out_$i25, out_$i26, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i15, in_$i17, in_$i20, in_$i21, in_$i22, in_$i23, in_$i13, in_$i2, in_$i24, in_$i25, in_$i26, in_vslice_dummy_var_22, in_vslice_dummy_var_23, in_vslice_dummy_var_24, in_vslice_dummy_var_25, in_vslice_dummy_var_26;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i13;
    goto corral_source_split_853_dummy;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_853;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i23;
    goto $bb25;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb25;

  SeqInstr_108:
    goto corral_source_split_851;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} out_vslice_dummy_var_26 := get_brightness($u0);
    goto SeqInstr_107;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_handler_precall();
    goto corral_source_split_850;

  $bb23:
    assume out_$i11 == 1;
    goto corral_source_split_849;

  $bb19:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb8:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 161} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb37:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i25 == 1;
    goto $bb35;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} out_$i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 157} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i24);
    call {:si_unique_call 158} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_821;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i2, 0);
    goto corral_source_split_869;

  $bb36:
    assume !(out_$i25 == 1);
    goto corral_source_split_868;

  SeqInstr_102:
    goto corral_source_split_842;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} out_vslice_dummy_var_24 := update_status($u0);
    goto SeqInstr_101;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_handler_precall();
    goto corral_source_split_841;

  $bb21:
    assume out_$i10 == 1;
    goto corral_source_split_840;

  $bb20:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  SeqInstr_105:
    goto corral_source_split_847;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} out_vslice_dummy_var_25 := seclinux_rfkill_set($u2, out_$i15);
    goto SeqInstr_104;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1($u1);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} ldv_handler_precall();
    goto corral_source_split_845;

  $bb22:
    assume !(out_$i10 == 1);
    goto corral_source_split_844;

  SeqInstr_96:
    goto corral_source_split_834;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} out_vslice_dummy_var_23 := swsmi_rfkill_set($u2, out_$i17);
    goto SeqInstr_95;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1($u1);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_handler_precall();
    goto corral_source_split_832;

  $bb17:
    assume out_$i8 == 1;
    goto corral_source_split_831;

  $bb10:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb9:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  SeqInstr_99:
    goto corral_source_split_838;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} swsmi_rfkill_query($u3, $u2);
    goto SeqInstr_98;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_handler_precall();
    goto corral_source_split_837;

  $bb18:
    assume !(out_$i8 == 1);
    goto corral_source_split_836;

  SeqInstr_93:
    goto corral_source_split_826;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} out_vslice_dummy_var_22 := samsung_sysfs_is_visible($u4, $u5, $u6);
    goto SeqInstr_92;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_handler_precall();
    goto corral_source_split_825;

  $bb12:
    assume out_$i6 == 1;
    goto corral_source_split_824;

  $bb11:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  $bb27:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i2;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i23 := 0;
    goto $bb32;

  $bb29:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} ldv_check_return_value(out_$i21);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} out_$i21 := samsung_debugfs_open($u7, $u8);
    call {:si_unique_call 176} {:cexpr "res_samsung_debugfs_open_41"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_handler_precall();
    goto corral_source_split_856;

  $bb26:
    assume out_$i20 == 1;
    goto corral_source_split_855;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i2, 0);
    goto corral_source_split_829;

  $bb14:
    assume out_$i7 == 1;
    goto corral_source_split_828;

  $bb13:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i7 == 1);
    goto $bb16;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb16;

  corral_source_split_853_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i15, out_$i17, out_$i20, out_$i21, out_$i22, out_$i23, out_$i13, out_$i2, out_$i24, out_$i25, out_$i26, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26 := main_loop_$bb5(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i15, out_$i17, out_$i20, out_$i21, out_$i22, out_$i23, out_$i13, out_$i2, out_$i24, out_$i25, out_$i26, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i15: i1, in_$i17: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i13: i32, in_$i2: i32, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_vslice_dummy_var_22: i16, in_vslice_dummy_var_23: i32, in_vslice_dummy_var_24: i32, in_vslice_dummy_var_25: i32, in_vslice_dummy_var_26: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i15: i1, out_$i17: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i13: i32, out_$i2: i32, out_$i24: i32, out_$i25: i1, out_$i26: i1, out_vslice_dummy_var_22: i16, out_vslice_dummy_var_23: i32, out_vslice_dummy_var_24: i32, out_vslice_dummy_var_25: i32, out_vslice_dummy_var_26: i32);
  modifies $M.0, $CurrAddr, $M.6, $M.1, assertsPassed, $M.15, $M.3, $M.4;



implementation samsung_sabi_diag_loop_$bb8(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i7: i32, in_$i8: i32, in_$i31: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i7: i32, out_$i8: i32, out_$i31: i1)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i7, out_$i8, out_$i31 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i7, in_$i8, in_$i31;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  $bb19:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i25, out_$i29;
    goto $bb19_dummy;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i30 := $sle.i32(out_$i29, 65534);
    goto corral_source_split_2002;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i8, 1);
    call {:si_unique_call 409} {:cexpr "loca"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_2001;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p28, out_$i13);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1016)), $mul.ref(946, 1)), $mul.ref(out_$i26, 1));
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1987;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i7, 1);
    call {:si_unique_call 408} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1986;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb11;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 7);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i32(out_$i17);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i15, 1));
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} out_$i13 := readb(out_$p12);
    call {:si_unique_call 407} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i13);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1974;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1016)), $mul.ref(24, 1));
    goto corral_source_split_1973;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21:
    assume out_$i31 == 1;
    goto corral_source_split_2009;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i31 := $ule.i32(out_$i7, 62);
    goto corral_source_split_1971;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 47);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i8.i32(out_$i13);
    goto corral_source_split_1992;

  $bb12:
    assume !(out_$i20 == 1);
    goto corral_source_split_1991;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 45);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i8.i32(out_$i13);
    goto corral_source_split_1996;

  $bb14:
    assume !(out_$i22 == 1);
    goto corral_source_split_1995;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i7, out_$i8, out_$i31 := samsung_sabi_diag_loop_$bb8(in_$p0, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i7, out_$i8, out_$i31);
    return;

  exit:
    return;
}



procedure samsung_sabi_diag_loop_$bb8(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i7: i32, in_$i8: i32, in_$i31: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i7: i32, out_$i8: i32, out_$i31: i1);
  modifies $M.0;



implementation find_signature_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p5: ref, in_$i6: i8, in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i2: i32, in_$i3: i32, in_$i23: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i8, out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i2: i32, out_$i3: i32, out_$i23: i32)
{

  entry:
    out_$i4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i2, out_$i3, out_$i23 := in_$i4, in_$p5, in_$i6, in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i19, in_$i20, in_$i21, in_$i22, in_$i2, in_$i3, in_$i23;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i21, out_$i20;
    goto $bb10_dummy;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i21;
    assume true;
    goto $bb10;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i22 := $sle.i32(out_$i21, 65534);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i2, 1);
    call {:si_unique_call 416} {:cexpr "loca"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2051;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  $bb4:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := 0;
    goto $bb9;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i19;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i3, 1);
    call {:si_unique_call 415} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_2048;

  $bb6:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    assume true;
    goto $bb6;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i14, out_$i15);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i64(out_$i13, 1);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$i13 := strlen(in_$p1);
    call {:si_unique_call 414} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_2039;

  $bb3:
    assume out_$i12 == 1;
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i10, out_$i11);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i8.i32(out_$i6);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i8.i32(out_$i9);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(in_$p1, $mul.ref(out_$i7, 1));
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} out_$i6 := readb(out_$p5);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i8(out_$i6);
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(in_$p0, $mul.ref(out_$i4, 1));
    goto corral_source_split_2029;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i2, out_$i3, out_$i23 := find_signature_loop_$bb1(in_$p0, in_$p1, out_$i4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i2, out_$i3, out_$i23);
    return;

  exit:
    return;
}



procedure find_signature_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p5: ref, in_$i6: i8, in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i2: i32, in_$i3: i32, in_$i23: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i8, out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i2: i32, out_$i3: i32, out_$i23: i32);


