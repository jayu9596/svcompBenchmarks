var $M.0: [ref]i8;

var $M.1: [ref]i64;

var $M.2: i32;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.15: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: i32;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: ref;

var $M.24: [ref]i8;

var $M.25: i32;

var $M.26: ref;

var $M.27: ref;

var $M.28: i32;

var $M.29: [ref]i16;

var $M.30: i32;

var $M.31: [ref]i64;

var $M.32: i32;

var $M.33: ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]i8;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: [ref]i8;

var $M.42: i32;

var $M.43: ref;

var $M.44: i32;

var $M.45: ref;

var $M.46: i32;

var $M.47: ref;

var $M.48: i32;

var $M.49: ref;

var $M.51: [ref]i64;

var $M.52: ref;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.64: [ref]i32;

var $M.65: [ref]i32;

var $M.66: [ref]i32;

var $M.67: [ref]i32;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: [ref]i64;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 421391);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const ldv_timer_3_0: ref;

axiom ldv_timer_3_0 == $sub.ref(0, 6168);

const ldv_timer_list_3_0: ref;

axiom ldv_timer_list_3_0 == $sub.ref(0, 7200);

const ldv_timer_3_1: ref;

axiom ldv_timer_3_1 == $sub.ref(0, 8228);

const ldv_timer_list_3_1: ref;

axiom ldv_timer_list_3_1 == $sub.ref(0, 9260);

const ldv_timer_3_2: ref;

axiom ldv_timer_3_2 == $sub.ref(0, 10288);

const ldv_timer_list_3_2: ref;

axiom ldv_timer_list_3_2 == $sub.ref(0, 11320);

const ldv_timer_3_3: ref;

axiom ldv_timer_3_3 == $sub.ref(0, 12348);

const ldv_timer_list_3_3: ref;

axiom ldv_timer_list_3_3 == $sub.ref(0, 13380);

const slic_netdev_ops_group1: ref;

axiom slic_netdev_ops_group1 == $sub.ref(0, 14412);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 15440);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 16472);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 17500);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 18532);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 19560);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 20592);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 21620);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 22652);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 23680);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 24708);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 25736);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 26764);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 27796);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 28828);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 29860);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 30892);

const slic_driver_group1: ref;

axiom slic_driver_group1 == $sub.ref(0, 31924);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 32952);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 33980);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 35008);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 36036);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 37064);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 38092);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 39120);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 40148);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 41176);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 42204);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 43232);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 44260);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 45288);

const {:count 3} __mod_pci__slic_pci_tbl_device_table: ref;

axiom __mod_pci__slic_pci_tbl_device_table == $sub.ref(0, 46408);

const {:count 3} slic_pci_tbl: ref;

axiom slic_pci_tbl == $sub.ref(0, 47528);

const slic_driver: ref;

axiom slic_driver == $sub.ref(0, 48864);

const slic_netdev_ops: ref;

axiom slic_netdev_ops == $sub.ref(0, 50416);

const intagg_delay: ref;

axiom intagg_delay == $sub.ref(0, 51444);

const GBRcvUCodeLen: ref;

axiom GBRcvUCodeLen == $sub.ref(0, 52472);

const OasisRcvUCodeLen: ref;

axiom OasisRcvUCodeLen == $sub.ref(0, 53500);

const slic_first_init: ref;

axiom slic_first_init == $sub.ref(0, 54528);

const slic_proc_version: ref;

axiom slic_proc_version == $sub.ref(0, 55560);

const slic_banner: ref;

axiom slic_banner == $sub.ref(0, 56592);

const dynamic_intagg: ref;

axiom dynamic_intagg == $sub.ref(0, 57620);

const rcv_count: ref;

axiom rcv_count == $sub.ref(0, 58648);

const slic_global: ref;

axiom slic_global == $sub.ref(0, 59904);

const {:count 80} .str.28: ref;

axiom .str.28 == $sub.ref(0, 61008);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 62061);

const {:count 33} .str.47: ref;

axiom .str.47 == $sub.ref(0, 63118);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0, 64175);

const byte_rev_table: ref;

axiom byte_rev_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 5} .str.58: ref;

axiom .str.58 == $sub.ref(0, 65204);

const {:count 5} .str.59: ref;

axiom .str.59 == $sub.ref(0, 66233);

const {:count 3} .str.60: ref;

axiom .str.60 == $sub.ref(0, 67260);

const {:count 66} .str.57: ref;

axiom .str.57 == $sub.ref(0, 68350);

const {:count 43} .str.61: ref;

axiom .str.61 == $sub.ref(0, 69417);

const {:count 56} .str.62: ref;

axiom .str.62 == $sub.ref(0, 70497);

const {:count 41} .str.15: ref;

axiom .str.15 == $sub.ref(0, 71562);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 31} .str.46: ref;

axiom .str.46 == $sub.ref(0, 72617);

const {:count 34} .str.49: ref;

axiom .str.49 == $sub.ref(0, 73675);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 74712);

const {:count 39} .str.51: ref;

axiom .str.51 == $sub.ref(0, 75775);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 38} .str.2: ref;

axiom .str.2 == $sub.ref(0, 76837);

const {:count 19} .str.3: ref;

axiom .str.3 == $sub.ref(0, 77880);

const {:count 17} .str.4: ref;

axiom .str.4 == $sub.ref(0, 78921);

const {:count 22} .str.5: ref;

axiom .str.5 == $sub.ref(0, 79967);

const {:count 21} .str.6: ref;

axiom .str.6 == $sub.ref(0, 81012);

const {:count 20} .str.7: ref;

axiom .str.7 == $sub.ref(0, 82056);

const {:count 21} .str.8: ref;

axiom .str.8 == $sub.ref(0, 83101);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 84146);

const {:count 25} .str.10: ref;

axiom .str.10 == $sub.ref(0, 85195);

const {:count 25} .str.11: ref;

axiom .str.11 == $sub.ref(0, 86244);

const {:count 26} .str.12: ref;

axiom .str.12 == $sub.ref(0, 87294);

const {:count 23} .str.13: ref;

axiom .str.13 == $sub.ref(0, 88341);

const {:count 48} .str.14: ref;

axiom .str.14 == $sub.ref(0, 89413);

const {:count 34} .str.54: ref;

axiom .str.54 == $sub.ref(0, 90471);

const {:count 35} .str.55: ref;

axiom .str.55 == $sub.ref(0, 91530);

const {:count 35} .str.56: ref;

axiom .str.56 == $sub.ref(0, 92589);

const {:count 29} .str.53: ref;

axiom .str.53 == $sub.ref(0, 93642);

const {:count 30} .str.52: ref;

axiom .str.52 == $sub.ref(0, 94696);

const {:count 39} .str.18: ref;

axiom .str.18 == $sub.ref(0, 95759);

const .str: ref;

axiom .str == $sub.ref(0, 96813);

const {:count 20} .str.1: ref;

axiom .str.1 == $sub.ref(0, 97857);

const {:count 33} .str.17: ref;

axiom .str.17 == $sub.ref(0, 98914);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 99961);

const {:count 8} .str.22: ref;

axiom .str.22 == $sub.ref(0, 100993);

const {:count 4} .str.19: ref;

axiom .str.19 == $sub.ref(0, 102021);

const {:count 56} .str.20: ref;

axiom .str.20 == $sub.ref(0, 103101);

const {:count 29} .str.21: ref;

axiom .str.21 == $sub.ref(0, 104154);

const {:count 28} .str.23: ref;

axiom .str.23 == $sub.ref(0, 105206);

const {:count 36} .str.24: ref;

axiom .str.24 == $sub.ref(0, 106266);

const {:count 20} .str.25: ref;

axiom .str.25 == $sub.ref(0, 107310);

const {:count 6} .str.26: ref;

axiom .str.26 == $sub.ref(0, 108340);

const {:count 39} .str.27: ref;

axiom .str.27 == $sub.ref(0, 109403);

const {:count 43} .str.36: ref;

axiom .str.36 == $sub.ref(0, 110470);

const {:count 42} .str.37: ref;

axiom .str.37 == $sub.ref(0, 111536);

const {:count 33} .str.38: ref;

axiom .str.38 == $sub.ref(0, 112593);

const {:count 17} .str.39: ref;

axiom .str.39 == $sub.ref(0, 113634);

const .str.40: ref;

axiom .str.40 == $sub.ref(0, 114659);

const {:count 26} .str.44: ref;

axiom .str.44 == $sub.ref(0, 115709);

const {:count 23} .str.45: ref;

axiom .str.45 == $sub.ref(0, 116756);

const {:count 28} .str.43: ref;

axiom .str.43 == $sub.ref(0, 117808);

const {:count 26} .str.41: ref;

axiom .str.41 == $sub.ref(0, 118858);

const {:count 23} .str.42: ref;

axiom .str.42 == $sub.ref(0, 119905);

const {:count 29} .str.31: ref;

axiom .str.31 == $sub.ref(0, 120958);

const {:count 33} .str.32: ref;

axiom .str.32 == $sub.ref(0, 122015);

const {:count 33} .str.33: ref;

axiom .str.33 == $sub.ref(0, 123072);

const {:count 31} .str.34: ref;

axiom .str.34 == $sub.ref(0, 124127);

const {:count 32} .str.35: ref;

axiom .str.35 == $sub.ref(0, 125183);

const {:count 35} .str.30: ref;

axiom .str.30 == $sub.ref(0, 126242);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 127274);

const {:count 3} .str.1.140: ref;

axiom .str.1.140 == $sub.ref(0, 128301);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 129339);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 130367);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 131399);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 132431);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const slic_entry_open: ref;

axiom slic_entry_open == $sub.ref(0, 133463);

procedure slic_entry_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.19, $M.11, $M.14, $M.20, $M.13, $M.16, $M.21, $M.15, $M.18, $M.22, $M.17, assertsPassed;



implementation slic_entry_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := netdev_priv($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} netif_stop_queue($p7);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} ldv_spin_lock();
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(248, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i18 := slic_if_init($p3, $p1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 6} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} spin_unlock_irqrestore(slic_global, $i35);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p2);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(248, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(20, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(20, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)), $i28);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(248, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(20, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(20, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)), $i16);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(248, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_entry_halt: ref;

axiom slic_entry_halt == $sub.ref(0, 134495);

procedure slic_entry_halt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation slic_entry_halt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p1 := netdev_priv($p0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} ldv_spin_lock();
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} netif_stop_queue($p8);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(352, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(320, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} slic_reg32_write($p15, 0, 1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12168, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12168, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12172, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12172, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} slic_config_clear($p2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(248, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} slic_cmdq_reset($p2);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} spin_unlock_irqrestore(slic_global, $u0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 768)), $mul.ref(20, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 768)), $mul.ref(20, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)), $i32);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(248, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_xmit_start: ref;

axiom slic_xmit_start == $sub.ref(0, 135527);

procedure slic_xmit_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation slic_xmit_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p2 := netdev_priv($p1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 2);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 1);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p21 := slic_cmdq_getfree($p3);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(292, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 3);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} slic_xmit_build_request($p3, $p21, $p0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i31);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i36, $i39);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i40);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(316, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i60, $i62);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} slic_reg64_write($p3, $p58, $i63, $p67, $i69, 0);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 376)), $mul.ref(48, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p21, $mul.ref(0, 352)), $mul.ref(316, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i51, $i53);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} slic_reg32_write($p49, $i54, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(12164, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i17 := 3;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} slic_xmit_fail($p3, $p0, $0.ref, 0, $i17);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i17 := 2;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const slic_mcast_set_list: ref;

axiom slic_mcast_set_list == $sub.ref(0, 136559);

procedure slic_mcast_set_list($p0: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation slic_mcast_set_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p15: ref;
  var $i29: i32;
  var $i14: i32;
  var $i21: i32;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i16;
  var $p75: ref;
  var $i76: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p1 := netdev_priv($p0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i9, $i12);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $i14;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(320, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i32, $i34);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i21, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i76 == 1;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} slic_mcast_set_mask($p2);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(320, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p75, $i74);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} slic_config_set($p2, 1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 2);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 256);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 512);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 4096);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i67 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 4);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 32);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 8);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 2);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p15 := $p6;
    goto $bb4;

  $bb4:
    call $p16, $p17, $i18, $i19, $i20, $p23, $p24, $p25, $p26, $i27, $i28, $p15, $i29 := slic_mcast_set_list_loop_$bb4($p2, $i12, $p16, $p17, $i18, $i19, $i20, $p23, $p24, $p25, $p26, $i27, $i28, $p15, $i29);
    goto $bb4_last;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i18 := slic_mcast_add_list($p2, $p17);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 23} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} slic_mcast_set_bit($p2, $p17);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i12);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i29 := $i18;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i14 := $i29;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p24;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb8;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_218;
}



const slic_mac_set_address: ref;

axiom slic_mac_set_address == $sub.ref(0, 137591);

procedure slic_mac_set_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_mac_set_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i8: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p2 := netdev_priv($p0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i5 := netif_running($p0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 29} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i13 := is_valid_ether_addr($p12);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 31} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 32} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p19, $p21, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(310, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 33} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p26, $p28, $i31, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} slic_config_set($p3, 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 138623);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slic_ioctl: ref;

axiom slic_ioctl == $sub.ref(0, 139655);

procedure slic_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, assertsPassed;



implementation slic_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i8;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i17: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p4 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p5 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 40} {:cexpr "slic_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p6 := netdev_priv($p0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 35322);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 35322);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 95);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i15 := copy_from_user($p11, $p14, 28);
    call {:si_unique_call 43} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 28)), $mul.ref(0, 4));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 46} {:cexpr "intagg"} boogie_si_record_i32($i19);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} dev_err.ref.ref.i32($p20, .str.47, $i19);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} slic_intagg_set($p7, $i19);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb11;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb11;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 35142);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i25 := copy_from_user($p21, $p24, 44);
    call {:si_unique_call 45} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb11;

  $bb31:
    assume $i63 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i64 := capable(12);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i64);
    call {:si_unique_call 53} {:cexpr "tmp___3"} boogie_si_record_i8($i65);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i72 == 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i77 == 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, 0);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref(0, 12592)), $mul.ref(299, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i83 == 1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i91, $i94);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i95 == 1);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i98, $i101);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 10);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := 8192;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} slic_link_config($p7, $i107, $i112);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} slic_link_event_handler($p7);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i111 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i112 := 256;
    goto $bb58;

  $bb53:
    assume $i106 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i107 := 0;
    goto $bb55;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb49;

  $bb45:
    assume $i83 == 1;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i77 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, 10);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i72 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, 100);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb11;

  $bb33:
    assume $i66 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb35;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 49} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p30, 0, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 591);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 2);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 12592)), $mul.ref(299, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p3);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i59 := copy_to_user($p57, $p58, 44);
    call {:si_unique_call 51} {:cexpr "tmp___2"} boogie_si_record_i64($i59);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb11;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, 10);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 100);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb11;
}



const eth_change_mtu: ref;

axiom eth_change_mtu == $sub.ref(0, 140687);

procedure eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 56} {:cexpr "eth_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const slic_get_stats: ref;

axiom slic_get_stats == $sub.ref(0, 141719);

procedure slic_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p1 := netdev_priv($p0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(48, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i6);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(96, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i12);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i18);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(104, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(120, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i24);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(152, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(160, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, 0);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $r := $p39;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 142751);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 143783);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 63} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} __might_fault(.str.48, 697);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 66} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 68} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 144815);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: ref, p.8: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: ref, p.8: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    return;
}



const slic_intagg_set: ref;

axiom slic_intagg_set == $sub.ref(0, 145847);

procedure slic_intagg_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_intagg_set($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "slic_intagg_set:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(112, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} slic_reg32_write($p5, $i1, 1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(40, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 146879);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 147911);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 74} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 75} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __might_fault(.str.48, 732);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 78} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 80} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const capable: ref;

axiom capable == $sub.ref(0, 148943);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slic_link_config: ref;

axiom slic_link_config == $sub.ref(0, 149975);

procedure slic_link_config($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation slic_link_config($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "slic_link_config:arg:linkspeed"} boogie_si_record_i32($i1);
    call {:si_unique_call 86} {:cexpr "slic_link_config:arg:linkduplex"} boogie_si_record_i32($i2);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i1, 3);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i2, 2);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 376)), $mul.ref(88, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 2);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, 3);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i15 == 1);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i8, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 8192;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i10, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := 256;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(224, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 8);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i40, $i42);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 2048);
    call {:si_unique_call 102} {:cexpr "phy_config"} boogie_si_record_i32($i49);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p13);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} slic_reg32_write($p50, $i49, 1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} __const_udelay(4295000);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} __const_udelay(4295000);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} __const_udelay(4295000);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} __const_udelay(4295000);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} __const_udelay(4295000);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} __const_udelay(4295000);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} __const_udelay(4295000);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} __const_udelay(4295000);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} __const_udelay(4295000);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(224, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 8);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i54 == 1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i40, $i42);
    call {:si_unique_call 108} {:cexpr "phy_config"} boogie_si_record_i32($i58);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p13);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} slic_reg32_write($p59, $i58, 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i54 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i40, $i42);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 32768);
    call {:si_unique_call 106} {:cexpr "phy_config"} boogie_si_record_i32($i56);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p13);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} slic_reg32_write($p57, $i56, 1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb39:
    assume $i46 == 1;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p13);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} slic_reg32_write($p47, 1048584, 1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i41 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb38;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb35;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(300, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i19 == 1);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i8, 2);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 262144;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 3072);
    call {:si_unique_call 94} {:cexpr "phy_advreg"} boogie_si_record_i32($i28);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 1);
    call {:si_unique_call 95} {:cexpr "phy_advreg"} boogie_si_record_i32($i29);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p13);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} slic_reg32_write($p30, $i29, 1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p13);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} slic_reg32_write($p31, 590336, 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(224, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 8);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p13);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} slic_reg32_write($p38, 4608, 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p13);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} slic_reg32_write($p36, 1048680, 1);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p13);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} slic_reg32_write($p37, 37376, 1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i26 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i27 := 262624;
    goto $bb28;

  $bb16:
    assume $i19 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i20 := $or.i32(262176, 384);
    call {:si_unique_call 87} {:cexpr "phy_advreg"} boogie_si_record_i32($i20);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p13);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} slic_reg32_write($p21, $i20, 1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i8, 2);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p13);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} slic_reg32_write($p24, 2048, 1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} __const_udelay(4295000);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __const_udelay(4295000);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} __const_udelay(4295000);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __const_udelay(4295000);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} __const_udelay(4295000);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} __const_udelay(4295000);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} __const_udelay(4295000);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __const_udelay(4295000);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} __const_udelay(4295000);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p13);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} slic_reg32_write($p25, 33088, 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p13);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} slic_reg32_write($p23, 37376, 1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb12;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i10 := 2;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i8 := 2;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_link_event_handler: ref;

axiom slic_link_event_handler == $sub.ref(0, 151007);

procedure slic_link_event_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, assertsPassed;



implementation slic_link_event_handler($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i12, 32);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i15 := slic_upr_request($p0, 1, $i10, $i14, 0, 0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 127} {:cexpr "status"} boogie_si_record_i32($i15);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_upr_request: ref;

axiom slic_upr_request == $sub.ref(0, 152039);

procedure slic_upr_request($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, assertsPassed;



implementation slic_upr_request($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "slic_upr_request:arg:upr_request"} boogie_si_record_i32($i1);
    call {:si_unique_call 129} {:cexpr "slic_upr_request:arg:upr_data"} boogie_si_record_i32($i2);
    call {:si_unique_call 130} {:cexpr "slic_upr_request:arg:upr_data_h"} boogie_si_record_i32($i3);
    call {:si_unique_call 131} {:cexpr "slic_upr_request:arg:upr_buffer"} boogie_si_record_i32($i4);
    call {:si_unique_call 132} {:cexpr "slic_upr_request:arg:upr_buffer_h"} boogie_si_record_i32($i5);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ldv_spin_lock();
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i6 := slic_upr_queue_request($p0, $i1, $i2, $i3, $i4, $i5);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 135} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} slic_upr_start($p0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(632, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 153071);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 138} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    return;
}



const slic_upr_queue_request: ref;

axiom slic_upr_queue_request == $sub.ref(0, 154103);

procedure slic_upr_queue_request($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation slic_upr_queue_request($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p31: ref;
  var $p38: ref;
  var $p30: ref;
  var $p39: ref;
  var $p40: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} {:cexpr "slic_upr_queue_request:arg:upr_request"} boogie_si_record_i32($i1);
    call {:si_unique_call 140} {:cexpr "slic_upr_queue_request:arg:upr_data"} boogie_si_record_i32($i2);
    call {:si_unique_call 141} {:cexpr "slic_upr_queue_request:arg:upr_data_h"} boogie_si_record_i32($i3);
    call {:si_unique_call 142} {:cexpr "slic_upr_queue_request:arg:upr_buffer"} boogie_si_record_i32($i4);
    call {:si_unique_call 143} {:cexpr "slic_upr_queue_request:arg:upr_buffer_h"} boogie_si_record_i32($i5);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p6 := kmalloc(32, 32);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(16, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i2);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i4);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i3);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i5);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p6);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p6);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p31 := $p25;
    goto $bb10;

  $bb10:
    call $p32, $p33, $p34, $p35, $i36, $i37, $p31, $p38 := slic_upr_queue_request_loop_$bb10($p32, $p33, $p34, $p35, $i36, $i37, $p31, $p38);
    goto $bb10_last;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p38 := $p33;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p30 := $p38;
    goto $bb9;

  $bb12:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p31 := $p33;
    goto $bb12_dummy;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;
}



const slic_upr_start: ref;

axiom slic_upr_start == $sub.ref(0, 155135);

procedure slic_upr_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation slic_upr_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(352, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(352, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(184, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} slic_reg32_write($p52, 1, 1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(104, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} slic_reg64_write($p0, $p44, $i46, $p48, $i50, 1);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb15;

  $bb20:
    assume $i18 == 1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(72, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} slic_reg64_write($p0, $p36, $i38, $p40, $i42, 1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb18:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb15;

  $bb22:
    assume $i19 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i22 == 1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(296, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} slic_reg64_write($p0, $p28, $i30, $p32, $i34, 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i22 == 1;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(64, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} slic_reg32_write($p24, $i26, 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 156167);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} ldv_spin_unlock();
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 157199);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 153} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 158231);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 159263);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    return;
}



const slic_reg32_write: ref;

axiom slic_reg32_write == $sub.ref(0, 160295);

procedure slic_reg32_write($p0: ref, $i1: i32, $i2: i1);
  free requires assertsPassed;



implementation slic_reg32_write($p0: ref, $i1: i32, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "slic_reg32_write:arg:value"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 158} {:cexpr "slic_reg32_write:arg:flush"} boogie_si_record_i1($i2);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} writel($i1, $p0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    call {:si_unique_call 160} devirtbounce(0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_reg64_write: ref;

axiom slic_reg64_write == $sub.ref(0, 161327);

procedure slic_reg64_write($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i1);
  free requires assertsPassed;
  modifies $M.2;



implementation slic_reg64_write($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $i5: i1)
{
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "slic_reg64_write:arg:value"} boogie_si_record_i32($i2);
    call {:si_unique_call 162} {:cexpr "slic_reg64_write:arg:paddrh"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 163} {:cexpr "slic_reg64_write:arg:flush"} boogie_si_record_i1($i5);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_spin_lock();
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} writel($i4, $p3);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} writel($i2, $p1);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(704, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 167} devirtbounce(0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const writel: ref;

axiom writel == $sub.ref(0, 162359);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 170} devirtbounce.1(0, $i0, $p2);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 163391);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 172} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_check_alloc_flags($i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p2 := ldv_undef_ptr();
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 164423);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 165455);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 166487);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 167519);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 168551);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 169583);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 170615);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 183} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 171647);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 186} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 172679);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 173711);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 187} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 188} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 189} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 174743);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 175775);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 191} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 176807);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 193} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 195} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 177839);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const slic_config_set: ref;

axiom slic_config_set == $sub.ref(0, 178871);

procedure slic_config_set($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation slic_config_set($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i14: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 196} {:cexpr "slic_config_set:arg:linkchange"} boogie_si_record_i1($i1);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i2);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} slic_mac_address_config($p0);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(299, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(120, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} slic_reg32_write($p16, $sub.i32(0, 1073741824), 1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i6, 303824896);
    call {:si_unique_call 202} {:cexpr "value"} boogie_si_record_i32($i17);
    assume {:verifier.code 0} true;
    $i14 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 8);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i23;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(128, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} slic_reg32_write($p31, $i29, 1);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i23, 536870912);
    call {:si_unique_call 204} {:cexpr "value"} boogie_si_record_i32($i28);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i14, 1073741824);
    call {:si_unique_call 203} {:cexpr "value"} boogie_si_record_i32($i22);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(120, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} slic_reg32_write($p12, $sub.i32(0, 536870912), 1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i6, 438042624);
    call {:si_unique_call 200} {:cexpr "value"} boogie_si_record_i32($i13);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} slic_mac_config($p0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2147483648);
    goto $bb3;
}



const slic_mac_config: ref;

axiom slic_mac_config == $sub.ref(0, 179903);

procedure slic_mac_config($p0: ref);
  free requires assertsPassed;



implementation slic_mac_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 3);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1840704;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 3);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(299, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(80, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} slic_reg32_write($p25, $i23, 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} slic_mac_address_config($p0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i13, 268435456);
    call {:si_unique_call 207} {:cexpr "value"} boogie_si_record_i32($i22);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb8;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i7, 536870912);
    call {:si_unique_call 206} {:cexpr "value"} boogie_si_record_i32($i12);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i7 := 1578560;
    goto $bb3;
}



const slic_mac_address_config: ref;

axiom slic_mac_address_config == $sub.ref(0, 180935);

procedure slic_mac_address_config($p0: ref);
  free requires assertsPassed;



implementation slic_mac_address_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(310, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(2, 4));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i7 := __fswab32($i6);
    call {:si_unique_call 211} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(136, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} slic_reg32_write($p9, $i7, 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(152, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} slic_reg32_write($p11, $i7, 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(310, 1)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(310, 1)), $mul.ref(1, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, $i20);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 65535);
    call {:si_unique_call 214} {:cexpr "value2"} boogie_si_record_i32($i22);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(144, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} slic_reg32_write($p24, $i22, 1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(160, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} slic_reg32_write($p26, $i22, 1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} slic_mcast_set_mask($p0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 181967);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i1 := __arch_swab32($i0);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slic_mcast_set_mask: ref;

axiom slic_mcast_set_mask == $sub.ref(0, 182999);

procedure slic_mcast_set_mask($p0: ref);
  free requires assertsPassed;



implementation slic_mcast_set_mask($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 40);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(168, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(328, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} slic_reg32_write($p12, $i15, 1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(176, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(328, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i64($i19, 32);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} slic_reg32_write($p17, $i21, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(168, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} slic_reg32_write($p8, $sub.i32(0, 1), 1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(176, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} slic_reg32_write($p10, $sub.i32(0, 1), 1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 184031);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 226} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 227} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 185063);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 228} {:cexpr "a"} boogie_si_record_i32($i2);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 186095);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 187127);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const slic_mcast_add_list: ref;

axiom slic_mcast_add_list == $sub.ref(0, 188159);

procedure slic_mcast_add_list($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation slic_mcast_add_list($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p6: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(336, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p17 := kmalloc(16, 32);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ether_addr_copy($p22, $p1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(336, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(336, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p17);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb8;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $i10, $i11, $p13, $p14, $i15, $i16, $p6 := slic_mcast_add_list_loop_$bb4($p1, $p7, $p8, $i9, $i10, $i11, $p13, $p14, $i15, $i16, $p6);
    goto $bb4_last;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i9 := ether_addr_equal($p8, $p1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p14;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1276;
}



const slic_mcast_set_bit: ref;

axiom slic_mcast_set_bit == $sub.ref(0, 189191);

procedure slic_mcast_set_bit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_mcast_set_bit($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i2 := crc32_le($sub.i32(0, 1), $p1, 6);
    call {:si_unique_call 235} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i3 := __bitrev32($i2);
    call {:si_unique_call 237} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 23);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 238} {:cexpr "crcpoly"} boogie_si_record_i8($i5);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 63);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 239} {:cexpr "crcpoly"} boogie_si_record_i8($i8);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(328, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i8);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64(1, $i12);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i10, $i13);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(328, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 190223);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 241} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __bitrev32: ref;

axiom __bitrev32 == $sub.ref(0, 191255);

procedure __bitrev32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitrev32($i0: i32) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "__bitrev32:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i32.i16($i0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i4 := __bitrev16($i3);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i0, 16);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i9 := __bitrev16($i8);
    call {:si_unique_call 248} {:cexpr "tmp___0"} boogie_si_record_i16($i9);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i4);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i9);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i11, $i12);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const __bitrev16: ref;

axiom __bitrev16 == $sub.ref(0, 192287);

procedure __bitrev16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __bitrev16($i0: i16) returns ($r: i16)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "__bitrev16:arg:x"} boogie_si_record_i16($i0);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i16.i8($i0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i4 := __bitrev8($i3);
    call {:si_unique_call 251} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i10 := __bitrev8($i9);
    call {:si_unique_call 253} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i4);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 8);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i13);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i10);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i32($i15);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, $i16);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const __bitrev8: ref;

axiom __bitrev8 == $sub.ref(0, 193319);

procedure __bitrev8($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation __bitrev8($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "__bitrev8:arg:byte"} boogie_si_record_i8($i0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(byte_rev_table, $mul.ref(0, 256)), $mul.ref($i2, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 194351);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 255} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 195383);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i7);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    return;
}



const slic_cmdq_getfree: ref;

axiom slic_cmdq_getfree == $sub.ref(0, 196415);

procedure slic_cmdq_getfree($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0;



implementation slic_cmdq_getfree($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p6: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p31: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ldv_spin_lock();
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $p11, $p10, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $p31 := slic_cmdq_getfree_loop_$bb4($p0, $p2, $p7, $i8, $i9, $p11, $p10, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $p31);
    goto $bb4_last;

  $bb5:
    call $p7, $i8, $i9, $p10, $p22, $p23, $i24, $i25, $p26 := slic_cmdq_getfree_loop_$bb5($p0, $p2, $p7, $i8, $i9, $p10, $p22, $p23, $i24, $i25, $p26);
    goto $bb5_last;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p28 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p31 := $p26;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p21 := $p31;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} slic_cmdq_addcmdpage($p0, $p28);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} ldv_spin_lock();
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p2);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p11 := $p32;
    assume true;
    goto $bb9, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb15_dummy;

  $bb9:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p6 := $p11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} spin_unlock_irqrestore($p20, $u0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p21 := $p12;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p2);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p10 := $p7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8_dummy;

  $bb7:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb8_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} slic_cmdq_getdone($p0);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1414;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const slic_xmit_build_request: ref;

axiom slic_xmit_build_request == $sub.ref(0, 197447);

procedure slic_xmit_build_request($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_xmit_build_request($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i32;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(16, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 280)), $mul.ref(0, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i13);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i24 := pci_map_single($p18, $p20, $i23, 1);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p27, $mul.ref(0, 280)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i25);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i64($i24, 32);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 280)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i32);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p41, $mul.ref(0, 280)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i39);
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 280)), $mul.ref(4, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(1, 12));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i50, $i51);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 31);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i54 := $lshr.i64($i53, 5);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(316, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    return;
}



const slic_xmit_fail: ref;

axiom slic_xmit_fail == $sub.ref(0, 198479);

procedure slic_xmit_fail($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_xmit_fail($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} {:cexpr "slic_xmit_fail:arg:skbtype"} boogie_si_record_i32($i3);
    call {:si_unique_call 266} {:cexpr "slic_xmit_fail:arg:status"} boogie_si_record_i32($i4);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12164, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} consume_skb($p1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, $i69);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i12 := $ule.i32($i4, 3);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i15 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 7);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} dev_err.ref.ref.ref.i32($p58, .str.62, $p1, $i63);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 7);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} dev_err.ref.ref.ref.i32($p50, .str.61, $p1, $i55);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 7);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p29 := (if $i28 == 1 then .str.58 else .str.59);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p34 := (if $i33 == 1 then .str.60 else .str.58);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p43 := (if $i42 == 1 then .str.60 else .str.58);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} dev_err.ref.ref.ref.i32.ref.ref.i32.ref.i32($p19, .str.57, $p1, $i24, $p29, $p34, $i37, $p43, $i47);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} netif_stop_queue($p9);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 199511);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} netif_tx_stop_queue($p1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 200543);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 201575);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 202607);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} set_bit(0, $p1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 203639);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 277} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    return;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 204671);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 279} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 205703);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 283} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p5 := get_dma_ops($p0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 287} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 289} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i14 := __phys_addr($i13);
    call {:si_unique_call 292} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 293} $i21 := devirtbounce.5($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 294} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i23 := __phys_addr($i22);
    call {:si_unique_call 296} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 290} devirtbounce.4(0, .str.15, 19, 12);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 206735);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 207767);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 208799);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 209831);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 302} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 303} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 304} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 210863);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 306} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 307} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 308} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 309} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    return;
}



const slic_cmdq_getdone: ref;

axiom slic_cmdq_getdone == $sub.ref(0, 211895);

procedure slic_cmdq_getdone($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0;



implementation slic_cmdq_getdone($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} ldv_spin_lock();
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(16, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(8, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(16, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} spin_unlock_irqrestore($p12, $u0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    return;
}



const slic_cmdqmem_addpage: ref;

axiom slic_cmdqmem_addpage == $sub.ref(0, 212927);

procedure slic_cmdqmem_addpage($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_cmdqmem_addpage($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 31);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p9, $mul.ref($i12, 8));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p14 := pci_alloc_consistent($p7, 4096, $p13);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref($i20, 8));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p14);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p5 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const slic_cmdq_addcmdpage: ref;

axiom slic_cmdq_addcmdpage == $sub.ref(0, 213959);

procedure slic_cmdq_addcmdpage($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0;



implementation slic_cmdq_addcmdpage($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $i48: i32;
  var $p49: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i16;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i16;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i16;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i16;
  var $p161: ref;
  var $i162: i16;
  var $i163: i32;
  var $i164: i32;
  var $i165: i16;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $p184: ref;
  var $p185: ref;
  var $i186: i16;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i16;
  var $p200: ref;
  var $i201: i16;
  var $i202: i32;
  var $i203: i32;
  var $i204: i16;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i64;
  var $p223: ref;
  var $p224: ref;
  var $i225: i16;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i16;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i32;
  var $i243: i16;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i32;
  var $i261: i64;
  var $p262: ref;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i16;
  var $p278: ref;
  var $i279: i16;
  var $i280: i32;
  var $i281: i32;
  var $i282: i16;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i32;
  var $i300: i64;
  var $p301: ref;
  var $p302: ref;
  var $i303: i16;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i16;
  var $p317: ref;
  var $i318: i16;
  var $i319: i32;
  var $i320: i32;
  var $i321: i16;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i32;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i5 := virt_to_phys($p4);
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 315} {:cexpr "phys_addrl"} boogie_si_record_i32($i6);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i5, 32);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 316} {:cexpr "phys_addrh"} boogie_si_record_i32($i8);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p9);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i52 := $ule.i32($i51, 255);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i48, $p49 := 0, $0.ref;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(16, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $i48);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(16, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p59);
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p49);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_spin_lock();
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, $i48);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p49);
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} spin_unlock_irqrestore($p71, $u0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i52 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} ldv_spin_lock();
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} spin_unlock_irqrestore($p15, $u0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 2);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p1);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    call {:si_unique_call 319} {:cexpr "tmp___0"} boogie_si_record_i16($i20);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i20);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p11);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i6);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i8);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $0.ref);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i6, 512);
    call {:si_unique_call 320} {:cexpr "phys_addrl"} boogie_si_record_i32($i42);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p2, $mul.ref(512, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p9);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i47 := $ule.i32($i46, 255);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i48, $p49 := 1, $p1;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb5;

  $bb3:
    assume $i47 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} ldv_spin_lock();
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p75);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} spin_unlock_irqrestore($p77, $u0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, 2);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p43);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p88, $i87);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i82);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $0.ref);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, $0.ref);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $p73);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i96);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i42);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i8);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $p1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i42, 512);
    $i105 := $add.i64(512, 512);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p2, $mul.ref($i105, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p9);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i110 := $ule.i32($i109, 255);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i48, $p49 := 2, $p43;
    assume {:branchcond $i110} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb5;

  $bb10:
    assume $i110 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} ldv_spin_lock();
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p115, $p114);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_unlock_irqrestore($p116, $u0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, 2);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, $p106);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.0, $p120);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.0, $p122);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i124, 1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p127, $i126);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, $i121);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $0.ref);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $0.ref);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $p112);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i135);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, $i104);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, $i8);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p141, $p43);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p107, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, $p43);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i104, 512);
    $i144 := $add.i64($i105, 512);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p2, $mul.ref($i144, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.0, $p9);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i147);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i149 := $ule.i32($i148, 255);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i48, $p49 := 3, $p106;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb5;

  $bb13:
    assume $i149 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv_spin_lock();
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p154, $p153);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} spin_unlock_irqrestore($p155, $u0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, 2);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p158, $p145);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $p159);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i162 := $load.i16($M.0, $p161);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i163 := $zext.i16.i32($i162);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, 1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i16($i164);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, $i165);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p167, $i160);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p168, $0.ref);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p169, $0.ref);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, $p151);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p151, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i174);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i143);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, $i8);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $p106);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p146, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, $p106);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i182 := $add.i32($i143, 512);
    $i183 := $add.i64($i144, 512);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p2, $mul.ref($i183, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i186 := $load.i16($M.0, $p9);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i186);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i188 := $ule.i32($i187, 255);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i48, $p49 := 4, $p145;
    assume {:branchcond $i188} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb5;

  $bb16:
    assume $i188 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} ldv_spin_lock();
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, $p192);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} spin_unlock_irqrestore($p194, $u0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, 2);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p197, $p184);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i199 := $load.i16($M.0, $p198);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i201 := $load.i16($M.0, $p200);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i202 := $zext.i16.i32($i201);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i203 := $add.i32($i202, 1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i16($i203);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p205, $i204);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p206, $i199);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p207, $0.ref);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, $0.ref);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p190);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p190, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, $i213);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, 0);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i182);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, $i8);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p219, $p145);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p185, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p220, $p145);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i182, 512);
    $i222 := $add.i64($i183, 512);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p2, $mul.ref($i222, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i225 := $load.i16($M.0, $p9);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i226 := $zext.i16.i32($i225);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i227 := $ule.i32($i226, 255);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i48, $p49 := 5, $p184;
    assume {:branchcond $i227} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb5;

  $bb19:
    assume $i227 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} ldv_spin_lock();
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p232, $p231);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} spin_unlock_irqrestore($p233, $u0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p234, 2);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p236, $p223);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.0, $p237);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.0, $p239);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i241, 1);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i16($i242);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p244, $i243);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p245, $i238);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p246, $0.ref);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p247, $0.ref);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p248, $p229);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p229, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, $i252);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p256, $i221);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p257, $i8);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p258, $p184);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p224, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p259, $p184);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i260 := $add.i32($i221, 512);
    $i261 := $add.i64($i222, 512);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p2, $mul.ref($i261, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.0, $p9);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i265 := $zext.i16.i32($i264);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i266 := $ule.i32($i265, 255);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i48, $p49 := 6, $p223;
    assume {:branchcond $i266} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb5;

  $bb22:
    assume $i266 == 1;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} ldv_spin_lock();
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p271, $p270);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} spin_unlock_irqrestore($p272, $u0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p273, 2);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p275, $p262);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i277 := $load.i16($M.0, $p276);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i279 := $load.i16($M.0, $p278);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i279);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, 1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i282 := $trunc.i32.i16($i281);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p283, $i282);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p284, $i277);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $0.ref);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p286, $0.ref);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p287, $p268);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p268, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p293, $i291);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p294, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p295, $i260);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, $i8);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p297, $p223);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p263, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p298, $p223);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i299 := $add.i32($i260, 512);
    $i300 := $add.i64($i261, 512);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p2, $mul.ref($i300, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p302 := $bitcast.ref.ref($p301);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i303 := $load.i16($M.0, $p9);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i304 := $zext.i16.i32($i303);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i305 := $ule.i32($i304, 255);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i48, $p49 := 7, $p262;
    assume {:branchcond $i305} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb5;

  $bb25:
    assume $i305 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} ldv_spin_lock();
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.0, $p308);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p310, $p309);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} spin_unlock_irqrestore($p311, $u0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p312, 2);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p314, $p301);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i316 := $load.i16($M.0, $p315);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i318 := $load.i16($M.0, $p317);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i318);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i320 := $add.i32($i319, 1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i16($i320);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p322, $i321);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p323, $i316);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p324, $0.ref);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p325, $0.ref);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(328, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p326, $p307);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p307, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.0, $p329);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p332, $i330);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p333, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(304, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p334, $i299);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(308, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p335, $i8);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p336, $p262);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p302, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p337, $p262);
    assume {:verifier.code 0} true;
    $i48, $p49 := 8, $p301;
    goto $bb5;
}



const virt_to_phys: ref;

axiom virt_to_phys == $sub.ref(0, 214991);

procedure virt_to_phys($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation virt_to_phys($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i2 := __phys_addr($i1);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 216023);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 217055);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} {:cexpr "dma_alloc_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 342} {:cexpr "dma_alloc_attrs:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p5 := external_alloc();
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 218087);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 344} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 345} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const slic_config_clear: ref;

axiom slic_config_clear == $sub.ref(0, 219119);

procedure slic_config_clear($p0: ref);
  free requires assertsPassed;



implementation slic_config_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(120, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} slic_reg32_write($p4, $sub.i32(0, 1610612736), 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(128, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} slic_reg32_write($p6, $sub.i32(0, 1977876480), 1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 376)), $mul.ref(88, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} slic_reg32_write($p8, 2048, 1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    return;
}



const slic_cmdq_reset: ref;

axiom slic_cmdq_reset == $sub.ref(0, 220151);

procedure slic_cmdq_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0;



implementation slic_cmdq_reset($p0: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p8: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p42: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $p70: ref;
  var $i71: i32;
  var $p73: ref;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_spin_lock();
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} spin_lock($p2);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(8, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(16, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(8, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p34);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(16, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i58, $i61);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} spin_unlock($p73);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} spin_unlock_irqrestore($p75, $u0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i62 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(16, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} dev_err.ref.ref.i32.i32($p65, .str.46, $i68, $i71);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p42 := $p39;
    goto $bb15;

  $bb15:
    call $p44, $i45, $i46, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p42 := slic_cmdq_reset_loop_$bb15($p0, $p44, $i45, $i46, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p42);
    goto $bb15_last;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i46);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p42, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p42, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p50);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p42, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p42 := $p53;
    goto $bb17_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p8 := slic_cmdq_reset_loop_$bb4($p9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p8);
    goto $bb4_last;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p17;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} dev_kfree_skb_irq($p13);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2285;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 221183);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} ldv_spin_lock();
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} ldv_spin_lock_5($p0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    return;
}



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 222215);

procedure dev_kfree_skb_irq($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __dev_kfree_skb_irq($p0, 1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 223247);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} ldv_spin_unlock();
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} ldv_spin_unlock_9($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 224279);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} _raw_spin_unlock($p2);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 225311);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 226343);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_irq($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "__dev_kfree_skb_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 227375);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} _raw_spin_lock($p2);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 228407);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    return;
}



const slic_if_init: ref;

axiom slic_if_init == $sub.ref(0, 229439);

procedure slic_if_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.19, $M.11, $M.14, $M.20, $M.13, $M.16, $M.21, $M.15, $M.18, $M.22, $M.17, $CurrAddr, assertsPassed;



implementation slic_if_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i64;
  var $i96: i64;
  var $i97: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i64;
  var $i108: i64;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i13: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(320, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p17, $i16);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i54 := slic_adapter_allocresources($p0, $p1);
    call {:si_unique_call 365} {:cexpr "rc"} boogie_si_record_i32($i54);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(240, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i67 := $i54;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} slic_reg32_write($p69, 0, 1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb35, $bb36;

  $bb36:
    assume !(1 == 1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(256, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 1);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(192, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(488, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(280, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} slic_reg32_write($p122, 0, 1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} slic_reg32_write($p124, 1, 1);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} slic_link_config($p0, 2, 2);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} slic_link_event_handler($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i13 := $i67;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i104 == 1;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(360, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p5);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_53 := reg_timer_3($p105, slic_timer_ping, $i106);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, jiffies);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 250);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p111, $i109);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(360, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} add_timer($p112);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(488, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 768)), $mul.ref(52, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 7340032);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i92 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(64, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p3);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_52 := reg_timer_3($p93, slic_timer_load_check, $i94);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, jiffies);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i96, 250);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, $i97);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(64, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} add_timer($p100);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(192, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 1);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i72 == 1;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p75 := $i2p.i64.ref($i74);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} ldv_spin_lock();
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p75, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i64($i79, 32);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} slic_reg32_write($p77, $i81, 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(16, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p75, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i32($i85);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} slic_reg32_write($p83, $i86, 1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(704, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} spin_unlock_irqrestore($p87, $u0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(256, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume 1 == 1;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __const_udelay(4295000);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i60 := slic_rspqueue_init($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 369} {:cexpr "rc"} boogie_si_record_i32($i60);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i62 := slic_cmdq_init($p0);
    call {:si_unique_call 371} {:cexpr "rc"} boogie_si_record_i32($i62);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i64 := slic_rcvqueue_init($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 373} {:cexpr "rc"} boogie_si_record_i32($i64);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(240, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i67 := $i64;
    goto $bb34;

  $bb31:
    assume $i65 == 1;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i13 := $i64;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i13 := $i62;
    goto $bb3;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i13 := $i60;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} dev_err.ref.ref.i32($p56, .str.51, $i54);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} slic_adapter_freeresources($p0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i13 := $i54;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 256);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 512);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 4096);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 4);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 32);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 8);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 2);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} dev_err.ref.ref.ref($p12, .str.49, .str.50);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb3;
}



const slic_adapter_allocresources: ref;

axiom slic_adapter_allocresources == $sub.ref(0, 230471);

procedure slic_adapter_allocresources($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.12, $M.19, $M.11, $M.14, $M.20, $M.13, $M.16, $M.21, $M.15, $M.18, $M.22, $M.17;



implementation slic_adapter_allocresources($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(252, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p1);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} spin_unlock_irqrestore(slic_global, $i5);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i17 := ldv_request_irq_39($i9, slic_interrupt, 128, $p13, $p16);
    call {:si_unique_call 391} {:cexpr "retval"} boogie_si_record_i32($i17);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ldv_spin_lock();
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(252, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} dev_err.ref.ref.ref.i32($p21, .str.52, $p25, $i17);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i26 := $i17;
    goto $bb5;
}



const slic_adapter_freeresources: ref;

axiom slic_adapter_freeresources == $sub.ref(0, 231503);

procedure slic_adapter_freeresources($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.15, $M.17, $M.3, $M.5, $M.7, $M.9;



implementation slic_adapter_freeresources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} slic_init_cleanup($p0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12180, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12196, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12200, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12204, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12208, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12212, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12224, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12232, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12236, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12240, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    return;
}



const slic_rspqueue_init: ref;

axiom slic_rspqueue_init == $sub.ref(0, 232535);

procedure slic_rspqueue_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rspqueue_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i9: i32;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i30: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 395} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p4, 0, 184, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(8, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 10);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(8, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(4, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref(0, 8));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p57);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $p13, $i14, $p15, $p16, $i18, $p20, $i21, $p23, $p24, $i25, $i26, $i31, $p32, $p33, $i34, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i9 := slic_rspqueue_init_loop_$bb4($p0, $p3, $p6, $p10, $p11, $p12, $p13, $i14, $p15, $p16, $i18, $p20, $i21, $p23, $p24, $i25, $i26, $i31, $p32, $p33, $i34, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i9);
    goto $bb4_last;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i9);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 8));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p16 := pci_zalloc_consistent($p11, 4096, $p15);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref($i18, 8));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p16);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i9);
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref($i21, 8));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32(0, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i9);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref($i42, 8));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 128);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} slic_reg64_write($p0, $p41, $i47, $p49, 0, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i9, 1);
    call {:si_unique_call 401} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p6);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i52 := $ult.i32($i50, $i51);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i50;
    goto $bb13_dummy;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(56, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i9);
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref($i34, 8));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 128);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} slic_reg32_write($p33, $i39, 0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} dev_err.ref.ref($p29, .str.53);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} slic_rspqueue_free($p0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2625;
}



const slic_cmdq_init: ref;

axiom slic_cmdq_init == $sub.ref(0, 233567);

procedure slic_cmdq_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr;



implementation slic_cmdq_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $i37: i32;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 405} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p5, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 406} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p7, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 407} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p9, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(24, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_54 := spinlock_check($p11);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} __raw_spin_lock_init($p16, .str.54, $p1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_55 := spinlock_check($p18);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __raw_spin_lock_init($p23, .str.55, $p2);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_56 := spinlock_check($p25);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __raw_spin_lock_init($p30, .str.56, $p3);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 414} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p32, 0, 520, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p34 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} slic_cmdq_addcmdpage($p0, $p34);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p39 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} slic_cmdq_addcmdpage($p0, $p39);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p42 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} slic_cmdq_addcmdpage($p0, $p42);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p45 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} slic_cmdq_addcmdpage($p0, $p45);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p48 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} slic_cmdq_addcmdpage($p0, $p48);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p51 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} slic_cmdq_addcmdpage($p0, $p51);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p54 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} slic_cmdq_addcmdpage($p0, $p54);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p57 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} slic_cmdq_addcmdpage($p0, $p57);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p60 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} slic_cmdq_addcmdpage($p0, $p60);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p63 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} slic_cmdq_addcmdpage($p0, $p63);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p66 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} slic_cmdq_addcmdpage($p0, $p66);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p69 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} slic_cmdq_addcmdpage($p0, $p69);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p72 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} slic_cmdq_addcmdpage($p0, $p72);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p75 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} slic_cmdq_addcmdpage($p0, $p75);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p78 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} slic_cmdq_addcmdpage($p0, $p78);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p81 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} slic_cmdq_addcmdpage($p0, $p81);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p84 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} slic_cmdq_addcmdpage($p0, $p84);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p87 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} slic_cmdq_addcmdpage($p0, $p87);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p90 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} slic_cmdq_addcmdpage($p0, $p90);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p93 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} slic_cmdq_addcmdpage($p0, $p93);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p96 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} slic_cmdq_addcmdpage($p0, $p96);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p99 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} slic_cmdq_addcmdpage($p0, $p99);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p102 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i104 := $eq.i64($i103, 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} slic_cmdq_addcmdpage($p0, $p102);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p105 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} slic_cmdq_addcmdpage($p0, $p105);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p108 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} slic_cmdq_addcmdpage($p0, $p108);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p111 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} slic_cmdq_addcmdpage($p0, $p111);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p114 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i116 := $eq.i64($i115, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} slic_cmdq_addcmdpage($p0, $p114);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p117 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} slic_cmdq_addcmdpage($p0, $p117);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p120 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} slic_cmdq_addcmdpage($p0, $p120);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p123 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i124, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} slic_cmdq_addcmdpage($p0, $p123);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p126 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i128 := $eq.i64($i127, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} slic_cmdq_addcmdpage($p0, $p126);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p129 := slic_cmdqmem_addpage($p0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i131 := $eq.i64($i130, 0);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} slic_cmdq_addcmdpage($p0, $p129);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12160, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} slic_cmdq_free($p0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 12);
    goto $bb6;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb4;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb4;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb4;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb4;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb4;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb4;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb4;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb4;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb4;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb4;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb4;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb4;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb4;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb4;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb4;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb4;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb4;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb4;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb4;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;
}



const slic_rcvqueue_init: ref;

axiom slic_rcvqueue_init == $sub.ref(0, 234599);

procedure slic_rcvqueue_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rcvqueue_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(20, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 256);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(24, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i7 := slic_rcvqueue_fill($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 481} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_57 := slic_rcvqueue_fill($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_58 := slic_rcvqueue_fill($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_59 := slic_rcvqueue_fill($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_60 := slic_rcvqueue_fill($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_61 := slic_rcvqueue_fill($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_62 := slic_rcvqueue_fill($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_63 := slic_rcvqueue_fill($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_64 := slic_rcvqueue_fill($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_65 := slic_rcvqueue_fill($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_66 := slic_rcvqueue_fill($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_67 := slic_rcvqueue_fill($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_68 := slic_rcvqueue_fill($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_69 := slic_rcvqueue_fill($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_70 := slic_rcvqueue_fill($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_71 := slic_rcvqueue_fill($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i9, 127);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} slic_rcvqueue_free($p0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb7;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const slic_timer_load_check: ref;

axiom slic_timer_load_check == $sub.ref(0, 235631);

procedure slic_timer_load_check($i0: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_timer_load_check($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i29: i1;
  var $i31: i1;
  var $i33: i1;
  var $i35: i1;
  var $i37: i1;
  var $i38: i32;
  var $i36: i32;
  var $i34: i32;
  var $i32: i32;
  var $i30: i32;
  var $i28: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i46: i1;
  var $i48: i1;
  var $i50: i1;
  var $i52: i1;
  var $i53: i32;
  var $i51: i32;
  var $i49: i32;
  var $i47: i32;
  var $i45: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "slic_timer_load_check:arg:cardaddr"} boogie_si_record_i64($i0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 499} {:cexpr "load"} boogie_si_record_i32($i5);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, jiffies);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 250);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i61);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(64, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} add_timer($p64);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(84, 1)));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 376)), $mul.ref(112, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 5);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i5, 16000);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i44 == 1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i5, 14000);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i46 == 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i32($i5, 12000);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i48 == 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i5, 10000);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i50 == 1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i52 := $ugt.i32($i5, 8000);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i51 := $i53;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i47 := $i49;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i45 := $i47;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(40, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, $i45);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i56 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(40, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i45);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p19);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} slic_reg32_write($p58, $i45, 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i52 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i53 := 50;
    goto $bb48;

  $bb43:
    assume $i50 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i51 := 100;
    goto $bb45;

  $bb40:
    assume $i48 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i49 := 150;
    goto $bb42;

  $bb37:
    assume $i46 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i47 := 200;
    goto $bb39;

  $bb34:
    assume $i44 == 1;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i45 := 250;
    goto $bb36;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i32($i5, 16000);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i5, 14000);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i32($i5, 12000);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i5, 10000);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i5, 8000);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i36 := $i38;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34 := $i36;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30 := $i32;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(40, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, $i28);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i41 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(40, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i28);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p19);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} slic_reg32_write($p43, $i28, 1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i38 := 50;
    goto $bb29;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i36 := 100;
    goto $bb26;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i34 := 150;
    goto $bb23;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i32 := 200;
    goto $bb20;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i30 := 250;
    goto $bb17;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i28 := 100;
    goto $bb14;
}



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 236663);

procedure reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} {:cexpr "reg_timer_3:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(slic_timer_ping));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} activate_suitable_timer_3($p0, $i2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 237695);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    return;
}



const slic_timer_ping: ref;

axiom slic_timer_ping == $sub.ref(0, 238727);

procedure slic_timer_ping($i0: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_timer_ping($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} {:cexpr "slic_timer_ping:arg:dev"} boogie_si_record_i64($i0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p2 := netdev_priv($p1);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 250);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i5);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 12592)), $mul.ref(360, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} add_timer($p8);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    return;
}



const activate_suitable_timer_3: ref;

axiom activate_suitable_timer_3 == $sub.ref(0, 239759);

procedure activate_suitable_timer_3($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9;



implementation activate_suitable_timer_3($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "activate_suitable_timer_3:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i4 := $M.3;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.9;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i22 := $M.9;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p24 := $M.10;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 512} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p18 := $M.8;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 511} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p12 := $M.6;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 510} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p6 := $M.4;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 509} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const slic_rcvqueue_fill: ref;

axiom slic_rcvqueue_fill == $sub.ref(0, 240791);

procedure slic_rcvqueue_fill($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rcvqueue_fill($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i8: i32;
  var $i46: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $i158: i64;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $i162: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $p213: ref;
  var $i214: i64;
  var $i215: i1;
  var $p216: ref;
  var $i217: i64;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i64;
  var $p225: ref;
  var $i226: i64;
  var $i227: i32;
  var $i228: i64;
  var $i229: i64;
  var $i230: i32;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $i269: i32;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $p281: ref;
  var $i282: i64;
  var $i283: i1;
  var $p284: ref;
  var $i285: i64;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $p293: ref;
  var $i294: i64;
  var $i295: i32;
  var $i296: i64;
  var $i297: i64;
  var $i298: i32;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i1;
  var $p308: ref;
  var $i309: i32;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $i337: i32;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i32;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i32;
  var $p349: ref;
  var $i350: i64;
  var $i351: i1;
  var $p352: ref;
  var $i353: i64;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i64;
  var $p361: ref;
  var $i362: i64;
  var $i363: i32;
  var $i364: i64;
  var $i365: i64;
  var $i366: i32;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i1;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $i394: i64;
  var $i395: i1;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i32;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $i410: i32;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i32;
  var $p417: ref;
  var $i418: i64;
  var $i419: i1;
  var $p420: ref;
  var $i421: i64;
  var $i422: i1;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $p429: ref;
  var $i430: i64;
  var $i431: i32;
  var $i432: i64;
  var $i433: i64;
  var $i434: i32;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $i443: i1;
  var $p444: ref;
  var $i445: i32;
  var $i446: i32;
  var $i447: i1;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $i462: i64;
  var $i463: i1;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i32;
  var $i473: i32;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $i478: i32;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $i484: i32;
  var $p485: ref;
  var $i486: i64;
  var $i487: i1;
  var $p488: ref;
  var $i489: i64;
  var $i490: i1;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $i496: i64;
  var $p497: ref;
  var $i498: i64;
  var $i499: i32;
  var $i500: i64;
  var $i501: i64;
  var $i502: i32;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $i511: i1;
  var $p512: ref;
  var $i513: i32;
  var $i514: i32;
  var $i515: i1;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $i530: i64;
  var $i531: i1;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $i540: i32;
  var $i541: i32;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $i546: i32;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $i552: i32;
  var $p553: ref;
  var $i554: i64;
  var $i555: i1;
  var $p556: ref;
  var $i557: i64;
  var $i558: i1;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $i564: i64;
  var $p565: ref;
  var $i566: i64;
  var $i567: i32;
  var $i568: i64;
  var $i569: i64;
  var $i570: i32;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $i579: i1;
  var $p580: ref;
  var $i581: i32;
  var $i582: i32;
  var $i583: i1;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $i598: i64;
  var $i599: i1;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $i608: i32;
  var $i609: i32;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $i614: i32;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $i620: i32;
  var $p621: ref;
  var $i622: i64;
  var $i623: i1;
  var $p624: ref;
  var $i625: i64;
  var $i626: i1;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $i632: i64;
  var $p633: ref;
  var $i634: i64;
  var $i635: i32;
  var $i636: i64;
  var $i637: i64;
  var $i638: i32;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $i647: i1;
  var $p648: ref;
  var $i649: i32;
  var $i650: i32;
  var $i651: i1;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $p664: ref;
  var $p665: ref;
  var $i666: i64;
  var $i667: i1;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $i676: i32;
  var $i677: i32;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i32;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $i688: i32;
  var $p689: ref;
  var $i690: i64;
  var $i691: i1;
  var $p692: ref;
  var $i693: i64;
  var $i694: i1;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $i700: i64;
  var $p701: ref;
  var $i702: i64;
  var $i703: i32;
  var $i704: i64;
  var $i705: i64;
  var $i706: i32;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $p714: ref;
  var $i715: i1;
  var $p716: ref;
  var $i717: i32;
  var $i718: i32;
  var $i719: i1;
  var $p720: ref;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i64;
  var $i735: i1;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $i744: i32;
  var $i745: i32;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $i750: i32;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $i756: i32;
  var $p757: ref;
  var $i758: i64;
  var $i759: i1;
  var $p760: ref;
  var $i761: i64;
  var $i762: i1;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $i768: i64;
  var $p769: ref;
  var $i770: i64;
  var $i771: i32;
  var $i772: i64;
  var $i773: i64;
  var $i774: i32;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $i783: i1;
  var $p784: ref;
  var $i785: i32;
  var $i786: i32;
  var $i787: i1;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $p800: ref;
  var $p801: ref;
  var $i802: i64;
  var $i803: i1;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $p811: ref;
  var $i812: i32;
  var $i813: i32;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $i818: i32;
  var $p819: ref;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $i824: i32;
  var $p825: ref;
  var $i826: i64;
  var $i827: i1;
  var $p828: ref;
  var $i829: i64;
  var $i830: i1;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $i836: i64;
  var $p837: ref;
  var $i838: i64;
  var $i839: i32;
  var $i840: i64;
  var $i841: i64;
  var $i842: i32;
  var $p843: ref;
  var $p844: ref;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $i851: i1;
  var $p852: ref;
  var $i853: i32;
  var $i854: i32;
  var $i855: i1;
  var $p856: ref;
  var $p857: ref;
  var $p858: ref;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $p865: ref;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $i870: i64;
  var $i871: i1;
  var $p872: ref;
  var $p873: ref;
  var $p874: ref;
  var $p875: ref;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $p879: ref;
  var $i880: i32;
  var $i881: i32;
  var $p882: ref;
  var $p883: ref;
  var $p884: ref;
  var $p885: ref;
  var $i886: i32;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p891: ref;
  var $i892: i32;
  var $p893: ref;
  var $i894: i64;
  var $i895: i1;
  var $p896: ref;
  var $i897: i64;
  var $i898: i1;
  var $p899: ref;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $p903: ref;
  var $i904: i64;
  var $p905: ref;
  var $i906: i64;
  var $i907: i32;
  var $i908: i64;
  var $i909: i64;
  var $i910: i32;
  var $p911: ref;
  var $p912: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p918: ref;
  var $i919: i1;
  var $p920: ref;
  var $i921: i32;
  var $i922: i32;
  var $i923: i1;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p928: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $p932: ref;
  var $p933: ref;
  var $p934: ref;
  var $p935: ref;
  var $p936: ref;
  var $p937: ref;
  var $i938: i64;
  var $i939: i1;
  var $p940: ref;
  var $p941: ref;
  var $p942: ref;
  var $p943: ref;
  var $p944: ref;
  var $p945: ref;
  var $p946: ref;
  var $p947: ref;
  var $i948: i32;
  var $i949: i32;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $i954: i32;
  var $p955: ref;
  var $p956: ref;
  var $p957: ref;
  var $p958: ref;
  var $p959: ref;
  var $i960: i32;
  var $p961: ref;
  var $i962: i64;
  var $i963: i1;
  var $p964: ref;
  var $i965: i64;
  var $i966: i1;
  var $p967: ref;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $p971: ref;
  var $i972: i64;
  var $p973: ref;
  var $i974: i64;
  var $i975: i32;
  var $i976: i64;
  var $i977: i64;
  var $i978: i32;
  var $p979: ref;
  var $p980: ref;
  var $p981: ref;
  var $p982: ref;
  var $p983: ref;
  var $p984: ref;
  var $p985: ref;
  var $p986: ref;
  var $i987: i1;
  var $p988: ref;
  var $i989: i32;
  var $i990: i32;
  var $i991: i1;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $p996: ref;
  var $p997: ref;
  var $p998: ref;
  var $p999: ref;
  var $p1000: ref;
  var $p1001: ref;
  var $p1002: ref;
  var $p1003: ref;
  var $p1004: ref;
  var $p1005: ref;
  var $i1006: i64;
  var $i1007: i1;
  var $p1008: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $i1016: i32;
  var $i1017: i32;
  var $p1018: ref;
  var $p1019: ref;
  var $p1020: ref;
  var $p1021: ref;
  var $i1022: i32;
  var $p1023: ref;
  var $p1024: ref;
  var $p1025: ref;
  var $p1026: ref;
  var $p1027: ref;
  var $i1028: i32;
  var $p1029: ref;
  var $i1030: i64;
  var $i1031: i1;
  var $p1032: ref;
  var $i1033: i64;
  var $i1034: i1;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $i1040: i64;
  var $p1041: ref;
  var $i1042: i64;
  var $i1043: i32;
  var $i1044: i64;
  var $i1045: i64;
  var $i1046: i32;
  var $p1047: ref;
  var $p1048: ref;
  var $p1049: ref;
  var $p1050: ref;
  var $p1051: ref;
  var $p1052: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $i1055: i1;
  var $p1056: ref;
  var $i1057: i32;
  var $i1058: i32;
  var $i1059: i1;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $p1063: ref;
  var $p1064: ref;
  var $p1065: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $p1068: ref;
  var $p1069: ref;
  var $p1070: ref;
  var $p1071: ref;
  var $p1072: ref;
  var $p1073: ref;
  var $i1074: i64;
  var $i1075: i1;
  var $p1076: ref;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $p1081: ref;
  var $p1082: ref;
  var $p1083: ref;
  var $i1084: i32;
  var $i1085: i32;
  var $p1086: ref;
  var $p1087: ref;
  var $p1088: ref;
  var $p1089: ref;
  var $i1090: i32;
  var $p1091: ref;
  var $p1092: ref;
  var $p1093: ref;
  var $p1094: ref;
  var $p1095: ref;
  var $i1096: i32;
  var $p1097: ref;
  var $i1098: i64;
  var $i1099: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p5 := alloc_skb(2048, 32);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i75 := $i8;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} dev_err.ref.ref.i32($p78, .str.14, $i75);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i79 := $i75;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb6;

  $bb6:
    call $p9, $p10, $p11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $p43, $i44, $i45, $p30, $i31, $i32, $i46 := slic_rcvqueue_fill_loop_$bb6($p0, $p4, $p9, $p10, $p11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $p43, $i44, $i45, $p30, $i31, $i32, $i46);
    goto $bb6_last;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i14 := pci_map_single($p11, $p13, 2048, 2);
    call {:si_unique_call 515} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    call {:si_unique_call 516} {:cexpr "paddrl"} boogie_si_record_i32($i17);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p15);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i18, 32);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 517} {:cexpr "paddrh"} boogie_si_record_i32($i20);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 34);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i17, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p30, $i31, $i32 := $p9, $i17, $i20;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i32, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} slic_reg64_write($p0, $p55, $i31, $p59, $i32, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p30);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p30);
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 1);
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p80 := alloc_skb(2048, 32);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume {:branchcond $i82} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb5;

  $bb24:
    assume $i82 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p83 := $p80;
    goto $bb26;

  $bb26:
    call $i46, $p83, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $p102, $i103, $p104, $i105, $i106, $p135, $p136, $p137, $i138, $p139, $p140, $p141, $p142, $p143, $i144, $p145, $i146, $i147 := slic_rcvqueue_fill_loop_$bb26($p0, $p4, $i46, $p83, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $p102, $i103, $p104, $i105, $i106, $p135, $p136, $p137, $i138, $p139, $p140, $p141, $p142, $p143, $i144, $p145, $i146, $i147);
    goto $bb26_last;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i88 := pci_map_single($p85, $p87, 2048, 2);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p89 := $i2p.i64.ref($i88);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p89);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i64($i92, 32);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i32($i93);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 34);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $0.ref);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i91, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p104, $i105, $i106 := $p83, $i91, $i94;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i107 == 1);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} slic_reg64_write($p0, $p111, $i105, $p115, $i106, 0);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i123 == 1);
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, $p104);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $p104);
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i132, 1);
    $p134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i133);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p148 := alloc_skb(2048, 32);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i8 := 2;
    assume {:branchcond $i150} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb5;

  $bb40:
    assume $i150 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p151 := $p148;
    goto $bb42;

  $bb42:
    call $i46, $p151, $p152, $p153, $p154, $p155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $p163, $p164, $p165, $p166, $p167, $p168, $p169, $p170, $i171, $p172, $i173, $i174, $p203, $p204, $p205, $i206, $p207, $p208, $p209, $p210, $p211, $i212, $p213, $i214, $i215 := slic_rcvqueue_fill_loop_$bb42($p0, $p4, $i46, $p151, $p152, $p153, $p154, $p155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $p163, $p164, $p165, $p166, $p167, $p168, $p169, $p170, $i171, $p172, $i173, $i174, $p203, $p204, $p205, $i206, $p207, $p208, $p209, $p210, $p211, $i212, $p213, $i214, $i215);
    goto $bb42_last;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p151, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i156 := pci_map_single($p153, $p155, 2048, 2);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p157 := $i2p.i64.ref($i156);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p157);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i64.i32($i158);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p157);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i161 := $lshr.i64($i160, 32);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i64.i32($i161);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p151, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, 34);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p151, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p151, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, $0.ref);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i159, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p172, $i173, $i174 := $p151, $i159, $i162;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i175 == 1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} slic_reg64_write($p0, $p179, $i173, $p183, $i174, 0);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    $p188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p189);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i190, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i191 == 1);
    $p192 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, $p172);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $p198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p198, $p172);
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i200, 1);
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p202, $i201);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p216 := alloc_skb(2048, 32);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p216);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i218 := $ne.i64($i217, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i8 := 3;
    assume {:branchcond $i218} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb5;

  $bb56:
    assume $i218 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p219 := $p216;
    goto $bb58;

  $bb58:
    call $i46, $p219, $p220, $p221, $p222, $p223, $i224, $p225, $i226, $i227, $i228, $i229, $i230, $p231, $p232, $p233, $p234, $p235, $p236, $p237, $p238, $i239, $p240, $i241, $i242, $p271, $p272, $p273, $i274, $p275, $p276, $p277, $p278, $p279, $i280, $p281, $i282, $i283 := slic_rcvqueue_fill_loop_$bb58($p0, $p4, $i46, $p219, $p220, $p221, $p222, $p223, $i224, $p225, $i226, $i227, $i228, $i229, $i230, $p231, $p232, $p233, $p234, $p235, $p236, $p237, $p238, $i239, $p240, $i241, $i242, $p271, $p272, $p273, $i274, $p275, $p276, $p277, $p278, $p279, $i280, $p281, $i282, $i283);
    goto $bb58_last;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p219, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i224 := pci_map_single($p221, $p223, 2048, 2);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p225 := $i2p.i64.ref($i224);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i64.i32($i226);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p225);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i229 := $lshr.i64($i228, 32);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i64.i32($i229);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p219, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p231, 34);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p219, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p233);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p219, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p237, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p238, $0.ref);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i227, 0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p240, $i241, $i242 := $p219, $i227, $i230;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i243 == 1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p245, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p247 := $bitcast.ref.ref($p246);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} slic_reg64_write($p0, $p247, $i241, $p251, $i242, 0);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $p256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i259 == 1);
    $p260 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p260, $p240);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    $p266 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p266, $p240);
    $p267 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i269 := $add.i32($i268, 1);
    $p270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, $i269);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p284 := alloc_skb(2048, 32);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p284);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i286 := $ne.i64($i285, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i8 := 4;
    assume {:branchcond $i286} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb5;

  $bb72:
    assume $i286 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p287 := $p284;
    goto $bb74;

  $bb74:
    call $i46, $p287, $p288, $p289, $p290, $p291, $i292, $p293, $i294, $i295, $i296, $i297, $i298, $p299, $p300, $p301, $p302, $p303, $p304, $p305, $p306, $i307, $p308, $i309, $i310, $p339, $p340, $p341, $i342, $p343, $p344, $p345, $p346, $p347, $i348, $p349, $i350, $i351 := slic_rcvqueue_fill_loop_$bb74($p0, $p4, $i46, $p287, $p288, $p289, $p290, $p291, $i292, $p293, $i294, $i295, $i296, $i297, $i298, $p299, $p300, $p301, $p302, $p303, $p304, $p305, $p306, $i307, $p308, $i309, $i310, $p339, $p340, $p341, $i342, $p343, $p344, $p345, $p346, $p347, $i348, $p349, $i350, $i351);
    goto $bb74_last;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p287, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i292 := pci_map_single($p289, $p291, 2048, 2);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p293 := $i2p.i64.ref($i292);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p293);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i64.i32($i294);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p293);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i297 := $lshr.i64($i296, 32);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i64.i32($i297);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p287, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, 34);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p287, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.0, $p300);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p302 := $bitcast.ref.ref($p301);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p302, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p303, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p287, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p305, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p306, $0.ref);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i295, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p308, $i309, $i310 := $p287, $i295, $i298;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i311 == 1);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p313, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p315 := $bitcast.ref.ref($p314);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} slic_reg64_write($p0, $p315, $i309, $p319, $i310, 0);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    $p324 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p325);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i327 := $ne.i64($i326, 0);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i327 == 1);
    $p328 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p328, $p308);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    $p334 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p334, $p308);
    $p335 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p335);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i337 := $add.i32($i336, 1);
    $p338 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p338, $i337);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p352 := alloc_skb(2048, 32);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p352);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i354 := $ne.i64($i353, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i8 := 5;
    assume {:branchcond $i354} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb5;

  $bb88:
    assume $i354 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p355 := $p352;
    goto $bb90;

  $bb90:
    call $i46, $p355, $p356, $p357, $p358, $p359, $i360, $p361, $i362, $i363, $i364, $i365, $i366, $p367, $p368, $p369, $p370, $p371, $p372, $p373, $p374, $i375, $p376, $i377, $i378, $p407, $p408, $p409, $i410, $p411, $p412, $p413, $p414, $p415, $i416, $p417, $i418, $i419 := slic_rcvqueue_fill_loop_$bb90($p0, $p4, $i46, $p355, $p356, $p357, $p358, $p359, $i360, $p361, $i362, $i363, $i364, $i365, $i366, $p367, $p368, $p369, $p370, $p371, $p372, $p373, $p374, $i375, $p376, $i377, $i378, $p407, $p408, $p409, $i410, $p411, $p412, $p413, $p414, $p415, $i416, $p417, $i418, $i419);
    goto $bb90_last;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p355, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i360 := pci_map_single($p357, $p359, 2048, 2);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p361 := $i2p.i64.ref($i360);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i362 := $p2i.ref.i64($p361);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i64.i32($i362);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i364 := $p2i.ref.i64($p361);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i365 := $lshr.i64($i364, 32);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i366 := $trunc.i64.i32($i365);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p355, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p367, 34);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p355, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.0, $p368);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p371, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p355, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p372);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p373, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p374, $0.ref);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i363, 0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p376, $i377, $i378 := $p355, $i363, $i366;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i379 == 1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p381, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p383 := $bitcast.ref.ref($p382);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p385, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} slic_reg64_write($p0, $p383, $i377, $p387, $i378, 0);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    $p392 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p393);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i395 := $ne.i64($i394, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i395 == 1);
    $p396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p396, $p376);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    $p402 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p402, $p376);
    $p403 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.0, $p403);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i405 := $add.i32($i404, 1);
    $p406 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p406, $i405);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p420 := alloc_skb(2048, 32);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i421 := $p2i.ref.i64($p420);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i422 := $ne.i64($i421, 0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i8 := 6;
    assume {:branchcond $i422} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i422 == 1);
    goto $bb5;

  $bb104:
    assume $i422 == 1;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p423 := $p420;
    goto $bb106;

  $bb106:
    call $i46, $p423, $p424, $p425, $p426, $p427, $i428, $p429, $i430, $i431, $i432, $i433, $i434, $p435, $p436, $p437, $p438, $p439, $p440, $p441, $p442, $i443, $p444, $i445, $i446, $p475, $p476, $p477, $i478, $p479, $p480, $p481, $p482, $p483, $i484, $p485, $i486, $i487 := slic_rcvqueue_fill_loop_$bb106($p0, $p4, $i46, $p423, $p424, $p425, $p426, $p427, $i428, $p429, $i430, $i431, $i432, $i433, $i434, $p435, $p436, $p437, $p438, $p439, $p440, $p441, $p442, $i443, $p444, $i445, $i446, $p475, $p476, $p477, $i478, $p479, $p480, $p481, $p482, $p483, $i484, $p485, $i486, $i487);
    goto $bb106_last;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p425 := $load.ref($M.0, $p424);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p423, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i428 := pci_map_single($p425, $p427, 2048, 2);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p429 := $i2p.i64.ref($i428);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i430 := $p2i.ref.i64($p429);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i431 := $trunc.i64.i32($i430);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i432 := $p2i.ref.i64($p429);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i433 := $lshr.i64($i432, 32);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i434 := $trunc.i64.i32($i433);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p423, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p435, 34);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p423, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p438 := $bitcast.ref.ref($p437);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p438, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p439, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p423, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p440);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p441, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p442, $0.ref);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i431, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p444, $i445, $i446 := $p423, $i431, $i434;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i446, 0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i447} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i447 == 1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.0, $p448);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p449, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p451 := $bitcast.ref.ref($p450);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p453 := $load.ref($M.0, $p452);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p453, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p455 := $bitcast.ref.ref($p454);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} slic_reg64_write($p0, $p451, $i445, $p455, $i446, 0);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    $p460 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p461 := $load.ref($M.0, $p460);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i462 := $p2i.ref.i64($p461);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i463 := $ne.i64($i462, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i463 == 1);
    $p464 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p464, $p444);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    $p470 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p470, $p444);
    $p471 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.0, $p471);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i473 := $add.i32($i472, 1);
    $p474 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p474, $i473);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p488 := alloc_skb(2048, 32);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i489 := $p2i.ref.i64($p488);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i490 := $ne.i64($i489, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i8 := 7;
    assume {:branchcond $i490} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb5;

  $bb120:
    assume $i490 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p491 := $p488;
    goto $bb122;

  $bb122:
    call $i46, $p491, $p492, $p493, $p494, $p495, $i496, $p497, $i498, $i499, $i500, $i501, $i502, $p503, $p504, $p505, $p506, $p507, $p508, $p509, $p510, $i511, $p512, $i513, $i514, $p543, $p544, $p545, $i546, $p547, $p548, $p549, $p550, $p551, $i552, $p553, $i554, $i555 := slic_rcvqueue_fill_loop_$bb122($p0, $p4, $i46, $p491, $p492, $p493, $p494, $p495, $i496, $p497, $i498, $i499, $i500, $i501, $i502, $p503, $p504, $p505, $p506, $p507, $p508, $p509, $p510, $i511, $p512, $i513, $i514, $p543, $p544, $p545, $i546, $p547, $p548, $p549, $p550, $p551, $i552, $p553, $i554, $i555);
    goto $bb122_last;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p493 := $load.ref($M.0, $p492);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p491, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p495 := $load.ref($M.0, $p494);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i496 := pci_map_single($p493, $p495, 2048, 2);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p497 := $i2p.i64.ref($i496);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i498 := $p2i.ref.i64($p497);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i499 := $trunc.i64.i32($i498);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i500 := $p2i.ref.i64($p497);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i501 := $lshr.i64($i500, 32);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i502 := $trunc.i64.i32($i501);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p491, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p503, 34);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p491, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.0, $p504);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p506 := $bitcast.ref.ref($p505);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p506, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p507, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p491, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p508);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p509, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p510, $0.ref);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i499, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p512, $i513, $i514 := $p491, $i499, $i502;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i514, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i515 == 1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p517 := $load.ref($M.0, $p516);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p517, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p519 := $bitcast.ref.ref($p518);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.0, $p520);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p521, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p523 := $bitcast.ref.ref($p522);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} slic_reg64_write($p0, $p519, $i513, $p523, $i514, 0);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    $p528 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p529 := $load.ref($M.0, $p528);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i530 := $p2i.ref.i64($p529);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i531 := $ne.i64($i530, 0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i531} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i531 == 1);
    $p532 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p532, $p512);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    $p538 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p538, $p512);
    $p539 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i540 := $load.i32($M.0, $p539);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i541 := $add.i32($i540, 1);
    $p542 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p542, $i541);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p556 := alloc_skb(2048, 32);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i557 := $p2i.ref.i64($p556);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i558 := $ne.i64($i557, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i8 := 8;
    assume {:branchcond $i558} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i558 == 1);
    goto $bb5;

  $bb136:
    assume $i558 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p559 := $p556;
    goto $bb138;

  $bb138:
    call $i46, $p559, $p560, $p561, $p562, $p563, $i564, $p565, $i566, $i567, $i568, $i569, $i570, $p571, $p572, $p573, $p574, $p575, $p576, $p577, $p578, $i579, $p580, $i581, $i582, $p611, $p612, $p613, $i614, $p615, $p616, $p617, $p618, $p619, $i620, $p621, $i622, $i623 := slic_rcvqueue_fill_loop_$bb138($p0, $p4, $i46, $p559, $p560, $p561, $p562, $p563, $i564, $p565, $i566, $i567, $i568, $i569, $i570, $p571, $p572, $p573, $p574, $p575, $p576, $p577, $p578, $i579, $p580, $i581, $i582, $p611, $p612, $p613, $i614, $p615, $p616, $p617, $p618, $p619, $i620, $p621, $i622, $i623);
    goto $bb138_last;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.0, $p560);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p559, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i564 := pci_map_single($p561, $p563, 2048, 2);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p565 := $i2p.i64.ref($i564);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i566 := $p2i.ref.i64($p565);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i64.i32($i566);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i568 := $p2i.ref.i64($p565);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i569 := $lshr.i64($i568, 32);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i570 := $trunc.i64.i32($i569);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p559, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p571, 34);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p559, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p573 := $load.ref($M.0, $p572);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p574 := $bitcast.ref.ref($p573);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p574, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p575, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p559, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p577 := $bitcast.ref.ref($p576);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p577, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p578, $0.ref);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i579 := $eq.i32($i567, 0);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p580, $i581, $i582 := $p559, $i567, $i570;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i583 := $eq.i32($i582, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i583} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i583 == 1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p585 := $load.ref($M.0, $p584);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p585, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p587 := $bitcast.ref.ref($p586);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.0, $p588);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p589, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p591 := $bitcast.ref.ref($p590);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} slic_reg64_write($p0, $p587, $i581, $p591, $i582, 0);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    $p596 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p597 := $load.ref($M.0, $p596);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i598 := $p2i.ref.i64($p597);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i599 := $ne.i64($i598, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i599 == 1);
    $p600 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p600, $p580);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    $p606 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p606, $p580);
    $p607 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i608 := $load.i32($M.0, $p607);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i609 := $add.i32($i608, 1);
    $p610 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p610, $i609);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p624 := alloc_skb(2048, 32);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i625 := $p2i.ref.i64($p624);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i626 := $ne.i64($i625, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i8 := 9;
    assume {:branchcond $i626} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i626 == 1);
    goto $bb5;

  $bb152:
    assume $i626 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p627 := $p624;
    goto $bb154;

  $bb154:
    call $i46, $p627, $p628, $p629, $p630, $p631, $i632, $p633, $i634, $i635, $i636, $i637, $i638, $p639, $p640, $p641, $p642, $p643, $p644, $p645, $p646, $i647, $p648, $i649, $i650, $p679, $p680, $p681, $i682, $p683, $p684, $p685, $p686, $p687, $i688, $p689, $i690, $i691 := slic_rcvqueue_fill_loop_$bb154($p0, $p4, $i46, $p627, $p628, $p629, $p630, $p631, $i632, $p633, $i634, $i635, $i636, $i637, $i638, $p639, $p640, $p641, $p642, $p643, $p644, $p645, $p646, $i647, $p648, $i649, $i650, $p679, $p680, $p681, $i682, $p683, $p684, $p685, $p686, $p687, $i688, $p689, $i690, $i691);
    goto $bb154_last;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p629 := $load.ref($M.0, $p628);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p627, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p631 := $load.ref($M.0, $p630);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i632 := pci_map_single($p629, $p631, 2048, 2);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p633 := $i2p.i64.ref($i632);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i634 := $p2i.ref.i64($p633);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i635 := $trunc.i64.i32($i634);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i636 := $p2i.ref.i64($p633);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i637 := $lshr.i64($i636, 32);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i638 := $trunc.i64.i32($i637);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p627, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p639, 34);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p627, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p641 := $load.ref($M.0, $p640);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p642 := $bitcast.ref.ref($p641);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p642, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p643, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p627, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p645 := $bitcast.ref.ref($p644);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p645, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p646, $0.ref);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i635, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p648, $i649, $i650 := $p627, $i635, $i638;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i647 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i651 := $eq.i32($i650, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i651 == 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p653 := $load.ref($M.0, $p652);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p653, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p655 := $bitcast.ref.ref($p654);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.0, $p656);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p657, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p659 := $bitcast.ref.ref($p658);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} slic_reg64_write($p0, $p655, $i649, $p659, $i650, 0);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    $p664 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p665 := $load.ref($M.0, $p664);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i666 := $p2i.ref.i64($p665);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i667 := $ne.i64($i666, 0);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i667} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i667 == 1);
    $p668 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p668, $p648);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    $p674 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p674, $p648);
    $p675 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i676 := $load.i32($M.0, $p675);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i677 := $add.i32($i676, 1);
    $p678 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p678, $i677);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p692 := alloc_skb(2048, 32);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i693 := $p2i.ref.i64($p692);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i694 := $ne.i64($i693, 0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i8 := 10;
    assume {:branchcond $i694} true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i694 == 1);
    goto $bb5;

  $bb168:
    assume $i694 == 1;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p695 := $p692;
    goto $bb170;

  $bb170:
    call $i46, $p695, $p696, $p697, $p698, $p699, $i700, $p701, $i702, $i703, $i704, $i705, $i706, $p707, $p708, $p709, $p710, $p711, $p712, $p713, $p714, $i715, $p716, $i717, $i718, $p747, $p748, $p749, $i750, $p751, $p752, $p753, $p754, $p755, $i756, $p757, $i758, $i759 := slic_rcvqueue_fill_loop_$bb170($p0, $p4, $i46, $p695, $p696, $p697, $p698, $p699, $i700, $p701, $i702, $i703, $i704, $i705, $i706, $p707, $p708, $p709, $p710, $p711, $p712, $p713, $p714, $i715, $p716, $i717, $i718, $p747, $p748, $p749, $i750, $p751, $p752, $p753, $p754, $p755, $i756, $p757, $i758, $i759);
    goto $bb170_last;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p697 := $load.ref($M.0, $p696);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p695, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.0, $p698);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i700 := pci_map_single($p697, $p699, 2048, 2);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p701 := $i2p.i64.ref($i700);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i702 := $p2i.ref.i64($p701);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i703 := $trunc.i64.i32($i702);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i704 := $p2i.ref.i64($p701);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i705 := $lshr.i64($i704, 32);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i706 := $trunc.i64.i32($i705);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p695, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p707, 34);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p695, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p709 := $load.ref($M.0, $p708);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p710 := $bitcast.ref.ref($p709);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p710, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p711, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p695, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p713 := $bitcast.ref.ref($p712);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p713, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p714, $0.ref);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i715 := $eq.i32($i703, 0);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p716, $i717, $i718 := $p695, $i703, $i706;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i715 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i719 := $eq.i32($i718, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i719 == 1);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p721 := $load.ref($M.0, $p720);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p721, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p723 := $bitcast.ref.ref($p722);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p725 := $load.ref($M.0, $p724);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p725, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p727 := $bitcast.ref.ref($p726);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} slic_reg64_write($p0, $p723, $i717, $p727, $i718, 0);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    $p732 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p733 := $load.ref($M.0, $p732);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i734 := $p2i.ref.i64($p733);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i735 := $ne.i64($i734, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i735} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i735 == 1);
    $p736 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p736, $p716);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    $p742 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p742, $p716);
    $p743 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i744 := $load.i32($M.0, $p743);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i745 := $add.i32($i744, 1);
    $p746 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p746, $i745);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p760 := alloc_skb(2048, 32);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i761 := $p2i.ref.i64($p760);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i762 := $ne.i64($i761, 0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i8 := 11;
    assume {:branchcond $i762} true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb5;

  $bb184:
    assume $i762 == 1;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p763 := $p760;
    goto $bb186;

  $bb186:
    call $i46, $p763, $p764, $p765, $p766, $p767, $i768, $p769, $i770, $i771, $i772, $i773, $i774, $p775, $p776, $p777, $p778, $p779, $p780, $p781, $p782, $i783, $p784, $i785, $i786, $p815, $p816, $p817, $i818, $p819, $p820, $p821, $p822, $p823, $i824, $p825, $i826, $i827 := slic_rcvqueue_fill_loop_$bb186($p0, $p4, $i46, $p763, $p764, $p765, $p766, $p767, $i768, $p769, $i770, $i771, $i772, $i773, $i774, $p775, $p776, $p777, $p778, $p779, $p780, $p781, $p782, $i783, $p784, $i785, $i786, $p815, $p816, $p817, $i818, $p819, $p820, $p821, $p822, $p823, $i824, $p825, $i826, $i827);
    goto $bb186_last;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p765 := $load.ref($M.0, $p764);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p763, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p767 := $load.ref($M.0, $p766);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i768 := pci_map_single($p765, $p767, 2048, 2);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p769 := $i2p.i64.ref($i768);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i770 := $p2i.ref.i64($p769);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i771 := $trunc.i64.i32($i770);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i772 := $p2i.ref.i64($p769);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i773 := $lshr.i64($i772, 32);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i774 := $trunc.i64.i32($i773);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p763, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p775, 34);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p763, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p777 := $load.ref($M.0, $p776);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p778 := $bitcast.ref.ref($p777);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p778, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p779, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p763, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p781 := $bitcast.ref.ref($p780);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p781, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p782, $0.ref);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i783 := $eq.i32($i771, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p784, $i785, $i786 := $p763, $i771, $i774;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i783 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i787 := $eq.i32($i786, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i787} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i787 == 1);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p789 := $load.ref($M.0, $p788);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($p789, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p791 := $bitcast.ref.ref($p790);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p793 := $load.ref($M.0, $p792);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p793, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p795 := $bitcast.ref.ref($p794);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} slic_reg64_write($p0, $p791, $i785, $p795, $i786, 0);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    $p800 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p801 := $load.ref($M.0, $p800);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i802 := $p2i.ref.i64($p801);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i803 := $ne.i64($i802, 0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i803 == 1);
    $p804 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p804, $p784);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    $p810 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p810, $p784);
    $p811 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i812 := $load.i32($M.0, $p811);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i813 := $add.i32($i812, 1);
    $p814 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p814, $i813);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p828 := alloc_skb(2048, 32);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i829 := $p2i.ref.i64($p828);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i830 := $ne.i64($i829, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i8 := 12;
    assume {:branchcond $i830} true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i830 == 1);
    goto $bb5;

  $bb200:
    assume $i830 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p831 := $p828;
    goto $bb202;

  $bb202:
    call $i46, $p831, $p832, $p833, $p834, $p835, $i836, $p837, $i838, $i839, $i840, $i841, $i842, $p843, $p844, $p845, $p846, $p847, $p848, $p849, $p850, $i851, $p852, $i853, $i854, $p883, $p884, $p885, $i886, $p887, $p888, $p889, $p890, $p891, $i892, $p893, $i894, $i895 := slic_rcvqueue_fill_loop_$bb202($p0, $p4, $i46, $p831, $p832, $p833, $p834, $p835, $i836, $p837, $i838, $i839, $i840, $i841, $i842, $p843, $p844, $p845, $p846, $p847, $p848, $p849, $p850, $i851, $p852, $i853, $i854, $p883, $p884, $p885, $i886, $p887, $p888, $p889, $p890, $p891, $i892, $p893, $i894, $i895);
    goto $bb202_last;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.0, $p832);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p831, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p835 := $load.ref($M.0, $p834);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i836 := pci_map_single($p833, $p835, 2048, 2);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p837 := $i2p.i64.ref($i836);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i838 := $p2i.ref.i64($p837);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i839 := $trunc.i64.i32($i838);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i840 := $p2i.ref.i64($p837);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i841 := $lshr.i64($i840, 32);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i842 := $trunc.i64.i32($i841);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($p831, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p843, 34);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($p831, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p845 := $load.ref($M.0, $p844);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p846 := $bitcast.ref.ref($p845);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p846, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p847, 0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p831, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p849 := $bitcast.ref.ref($p848);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p849, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p850, $0.ref);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i839, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p852, $i853, $i854 := $p831, $i839, $i842;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i851 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i855 := $eq.i32($i854, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i855} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i855 == 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p856 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p857 := $load.ref($M.0, $p856);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($p857, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p859 := $bitcast.ref.ref($p858);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p861 := $load.ref($M.0, $p860);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p861, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p863 := $bitcast.ref.ref($p862);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} slic_reg64_write($p0, $p859, $i853, $p863, $i854, 0);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    $p868 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.0, $p868);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i870 := $p2i.ref.i64($p869);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i871 := $ne.i64($i870, 0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i871} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i871 == 1);
    $p872 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p872, $p852);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    $p878 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p878, $p852);
    $p879 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i880 := $load.i32($M.0, $p879);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i881 := $add.i32($i880, 1);
    $p882 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p882, $i881);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p896 := alloc_skb(2048, 32);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i897 := $p2i.ref.i64($p896);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i898 := $ne.i64($i897, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i8 := 13;
    assume {:branchcond $i898} true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i898 == 1);
    goto $bb5;

  $bb216:
    assume $i898 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p899 := $p896;
    goto $bb218;

  $bb218:
    call $i46, $p899, $p900, $p901, $p902, $p903, $i904, $p905, $i906, $i907, $i908, $i909, $i910, $p911, $p912, $p913, $p914, $p915, $p916, $p917, $p918, $i919, $p920, $i921, $i922, $p951, $p952, $p953, $i954, $p955, $p956, $p957, $p958, $p959, $i960, $p961, $i962, $i963 := slic_rcvqueue_fill_loop_$bb218($p0, $p4, $i46, $p899, $p900, $p901, $p902, $p903, $i904, $p905, $i906, $i907, $i908, $i909, $i910, $p911, $p912, $p913, $p914, $p915, $p916, $p917, $p918, $i919, $p920, $i921, $i922, $p951, $p952, $p953, $i954, $p955, $p956, $p957, $p958, $p959, $i960, $p961, $i962, $i963);
    goto $bb218_last;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p901 := $load.ref($M.0, $p900);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p899, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p903 := $load.ref($M.0, $p902);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i904 := pci_map_single($p901, $p903, 2048, 2);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p905 := $i2p.i64.ref($i904);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i906 := $p2i.ref.i64($p905);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i907 := $trunc.i64.i32($i906);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i908 := $p2i.ref.i64($p905);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i909 := $lshr.i64($i908, 32);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i910 := $trunc.i64.i32($i909);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p899, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p911, 34);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($p899, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p913 := $load.ref($M.0, $p912);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p914 := $bitcast.ref.ref($p913);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($p914, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p915, 0);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref($p899, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p917 := $bitcast.ref.ref($p916);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($p917, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p918, $0.ref);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i919 := $eq.i32($i907, 0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p920, $i921, $i922 := $p899, $i907, $i910;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i919 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i923 := $eq.i32($i922, 0);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i923} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i923 == 1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p925 := $load.ref($M.0, $p924);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p926 := $add.ref($add.ref($p925, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p927 := $bitcast.ref.ref($p926);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p929 := $load.ref($M.0, $p928);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($p929, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p931 := $bitcast.ref.ref($p930);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} slic_reg64_write($p0, $p927, $i921, $p931, $i922, 0);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    $p936 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p937 := $load.ref($M.0, $p936);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i938 := $p2i.ref.i64($p937);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i939 := $ne.i64($i938, 0);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i939} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i939 == 1);
    $p940 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p940, $p920);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    $p946 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p946, $p920);
    $p947 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i948 := $load.i32($M.0, $p947);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i949 := $add.i32($i948, 1);
    $p950 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p950, $i949);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p964 := alloc_skb(2048, 32);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i965 := $p2i.ref.i64($p964);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i966 := $ne.i64($i965, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i8 := 14;
    assume {:branchcond $i966} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i966 == 1);
    goto $bb5;

  $bb232:
    assume $i966 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p967 := $p964;
    goto $bb234;

  $bb234:
    call $i46, $p967, $p968, $p969, $p970, $p971, $i972, $p973, $i974, $i975, $i976, $i977, $i978, $p979, $p980, $p981, $p982, $p983, $p984, $p985, $p986, $i987, $p988, $i989, $i990, $p1019, $p1020, $p1021, $i1022, $p1023, $p1024, $p1025, $p1026, $p1027, $i1028, $p1029, $i1030, $i1031 := slic_rcvqueue_fill_loop_$bb234($p0, $p4, $i46, $p967, $p968, $p969, $p970, $p971, $i972, $p973, $i974, $i975, $i976, $i977, $i978, $p979, $p980, $p981, $p982, $p983, $p984, $p985, $p986, $i987, $p988, $i989, $i990, $p1019, $p1020, $p1021, $i1022, $p1023, $p1024, $p1025, $p1026, $p1027, $i1028, $p1029, $i1030, $i1031);
    goto $bb234_last;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p968 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p969 := $load.ref($M.0, $p968);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p970 := $add.ref($add.ref($p967, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p971 := $load.ref($M.0, $p970);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i972 := pci_map_single($p969, $p971, 2048, 2);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p973 := $i2p.i64.ref($i972);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i974 := $p2i.ref.i64($p973);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i975 := $trunc.i64.i32($i974);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i976 := $p2i.ref.i64($p973);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i977 := $lshr.i64($i976, 32);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i978 := $trunc.i64.i32($i977);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p979 := $add.ref($add.ref($p967, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p979, 34);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($p967, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p981 := $load.ref($M.0, $p980);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p982 := $bitcast.ref.ref($p981);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($p982, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p983, 0);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($p967, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p985 := $bitcast.ref.ref($p984);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($p985, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p986, $0.ref);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i987 := $eq.i32($i975, 0);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p988, $i989, $i990 := $p967, $i975, $i978;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i991 := $eq.i32($i990, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i991} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i991 == 1);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p993 := $load.ref($M.0, $p992);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($add.ref($p993, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p995 := $bitcast.ref.ref($p994);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p997 := $load.ref($M.0, $p996);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($add.ref($p997, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p999 := $bitcast.ref.ref($p998);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} slic_reg64_write($p0, $p995, $i989, $p999, $i990, 0);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    $p1004 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p1005 := $load.ref($M.0, $p1004);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i1006 := $p2i.ref.i64($p1005);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i1007 := $ne.i64($i1006, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1007} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i1007 == 1);
    $p1008 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1008, $p988);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    $p1014 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1014, $p988);
    $p1015 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i1016 := $load.i32($M.0, $p1015);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i1017 := $add.i32($i1016, 1);
    $p1018 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1018, $i1017);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p1032 := alloc_skb(2048, 32);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i1033 := $p2i.ref.i64($p1032);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i1034 := $ne.i64($i1033, 0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i8 := 15;
    assume {:branchcond $i1034} true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !($i1034 == 1);
    goto $bb5;

  $bb248:
    assume $i1034 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p1035 := $p1032;
    goto $bb250;

  $bb250:
    call $i46, $p1035, $p1036, $p1037, $p1038, $p1039, $i1040, $p1041, $i1042, $i1043, $i1044, $i1045, $i1046, $p1047, $p1048, $p1049, $p1050, $p1051, $p1052, $p1053, $p1054, $i1055, $p1056, $i1057, $i1058, $p1087, $p1088, $p1089, $i1090, $p1091, $p1092, $p1093, $p1094, $p1095, $i1096, $p1097, $i1098, $i1099 := slic_rcvqueue_fill_loop_$bb250($p0, $p4, $i46, $p1035, $p1036, $p1037, $p1038, $p1039, $i1040, $p1041, $i1042, $i1043, $i1044, $i1045, $i1046, $p1047, $p1048, $p1049, $p1050, $p1051, $p1052, $p1053, $p1054, $i1055, $p1056, $i1057, $i1058, $p1087, $p1088, $p1089, $i1090, $p1091, $p1092, $p1093, $p1094, $p1095, $i1096, $p1097, $i1098, $i1099);
    goto $bb250_last;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p1037 := $load.ref($M.0, $p1036);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($p1035, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p1039 := $load.ref($M.0, $p1038);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i1040 := pci_map_single($p1037, $p1039, 2048, 2);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p1041 := $i2p.i64.ref($i1040);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i1042 := $p2i.ref.i64($p1041);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i1043 := $trunc.i64.i32($i1042);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i1044 := $p2i.ref.i64($p1041);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i1045 := $lshr.i64($i1044, 32);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i1046 := $trunc.i64.i32($i1045);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p1047 := $add.ref($add.ref($p1035, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1047, 34);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p1048 := $add.ref($add.ref($p1035, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p1049 := $load.ref($M.0, $p1048);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p1050 := $bitcast.ref.ref($p1049);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($add.ref($p1050, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1051, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p1035, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p1053 := $bitcast.ref.ref($p1052);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($add.ref($p1053, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1054, $0.ref);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i1055 := $eq.i32($i1043, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p1056, $i1057, $i1058 := $p1035, $i1043, $i1046;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i1055 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i1059 := $eq.i32($i1058, 0);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1059} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i1059 == 1);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p1061 := $load.ref($M.0, $p1060);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($p1061, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p1063 := $bitcast.ref.ref($p1062);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p1065 := $load.ref($M.0, $p1064);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p1065, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p1067 := $bitcast.ref.ref($p1066);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} slic_reg64_write($p0, $p1063, $i1057, $p1067, $i1058, 0);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    $p1072 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p1073 := $load.ref($M.0, $p1072);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i1074 := $p2i.ref.i64($p1073);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i1075 := $ne.i64($i1074, 0);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1075} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i1075 == 1);
    $p1076 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1076, $p1056);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    $p1082 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1082, $p1056);
    $p1083 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i1084 := $load.i32($M.0, $p1083);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i1085 := $add.i32($i1084, 1);
    $p1086 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1086, $i1085);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i79 := 16;
    goto $bb21;

  $bb257:
    assume $i1075 == 1;
    $p1077 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p1078 := $load.ref($M.0, $p1077);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($add.ref($p1078, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p1080 := $bitcast.ref.ref($p1079);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($add.ref($p1080, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1081, $p1056);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb254:
    assume $i1059 == 1;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p1069 := $load.ref($M.0, $p1068);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p1069, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p1071 := $bitcast.ref.ref($p1070);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} slic_reg32_write($p1071, $i1057, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i1055 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} dev_err.ref.ref.ref($p4, .str.4, $p1035);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($add.ref($p1035, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p1088 := $load.ref($M.0, $p1087);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} dev_err.ref.ref.ref($p4, .str.5, $p1088);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p1089 := $add.ref($add.ref($p1035, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i1090 := $load.i32($M.0, $p1089);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} dev_err.ref.ref.i32($p4, .str.6, $i1090);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} dev_err.ref.ref.ref($p4, .str.7, $p1041);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} dev_err.ref.ref.i32($p4, .str.8, $i1043);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} dev_err.ref.ref.i32($p4, .str.9, $i1046);
    $p1091 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p1092 := $load.ref($M.0, $p1091);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} dev_err.ref.ref.ref($p4, .str.10, $p1092);
    $p1093 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p1094 := $load.ref($M.0, $p1093);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} dev_err.ref.ref.ref($p4, .str.11, $p1094);
    $p1095 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i1096 := $load.i32($M.0, $p1095);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} dev_err.ref.ref.i32($p4, .str.12, $i1096);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p1097 := alloc_skb(2048, 32);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i1098 := $p2i.ref.i64($p1097);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i1099 := $ne.i64($i1098, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i46 := 15;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i1099 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i75 := $i46;
    goto $bb20;

  $bb261:
    assume $i1099 == 1;
    assume {:verifier.code 0} true;
    $p1035 := $p1097;
    goto $bb261_dummy;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb241:
    assume $i1007 == 1;
    $p1009 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p1010 := $load.ref($M.0, $p1009);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p1010, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p1012 := $bitcast.ref.ref($p1011);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p1012, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1013, $p988);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb238:
    assume $i991 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p1000 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p1001 := $load.ref($M.0, $p1000);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($p1001, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p1003 := $bitcast.ref.ref($p1002);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} slic_reg32_write($p1003, $i989, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb235:
    assume $i987 == 1;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} dev_err.ref.ref.ref($p4, .str.4, $p967);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p1019 := $add.ref($add.ref($p967, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p1020 := $load.ref($M.0, $p1019);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} dev_err.ref.ref.ref($p4, .str.5, $p1020);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($p967, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i1022 := $load.i32($M.0, $p1021);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} dev_err.ref.ref.i32($p4, .str.6, $i1022);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} dev_err.ref.ref.ref($p4, .str.7, $p973);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} dev_err.ref.ref.i32($p4, .str.8, $i975);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} dev_err.ref.ref.i32($p4, .str.9, $i978);
    $p1023 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p1024 := $load.ref($M.0, $p1023);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} dev_err.ref.ref.ref($p4, .str.10, $p1024);
    $p1025 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p1026 := $load.ref($M.0, $p1025);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} dev_err.ref.ref.ref($p4, .str.11, $p1026);
    $p1027 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i1028 := $load.i32($M.0, $p1027);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} dev_err.ref.ref.i32($p4, .str.12, $i1028);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p1029 := alloc_skb(2048, 32);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i1030 := $p2i.ref.i64($p1029);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i1031 := $ne.i64($i1030, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i46 := 14;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i1031 == 1);
    goto $bb11;

  $bb246:
    assume $i1031 == 1;
    assume {:verifier.code 0} true;
    $p967 := $p1029;
    goto $bb246_dummy;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb225:
    assume $i939 == 1;
    $p941 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p942 := $load.ref($M.0, $p941);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($p942, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p944 := $bitcast.ref.ref($p943);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($p944, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p945, $p920);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb222:
    assume $i923 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p933 := $load.ref($M.0, $p932);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p933, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p935 := $bitcast.ref.ref($p934);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} slic_reg32_write($p935, $i921, 0);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i919 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} dev_err.ref.ref.ref($p4, .str.4, $p899);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($p899, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p952 := $load.ref($M.0, $p951);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} dev_err.ref.ref.ref($p4, .str.5, $p952);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p899, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i954 := $load.i32($M.0, $p953);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} dev_err.ref.ref.i32($p4, .str.6, $i954);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} dev_err.ref.ref.ref($p4, .str.7, $p905);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} dev_err.ref.ref.i32($p4, .str.8, $i907);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} dev_err.ref.ref.i32($p4, .str.9, $i910);
    $p955 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p956 := $load.ref($M.0, $p955);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} dev_err.ref.ref.ref($p4, .str.10, $p956);
    $p957 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p958 := $load.ref($M.0, $p957);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} dev_err.ref.ref.ref($p4, .str.11, $p958);
    $p959 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i960 := $load.i32($M.0, $p959);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} dev_err.ref.ref.i32($p4, .str.12, $i960);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p961 := alloc_skb(2048, 32);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i962 := $p2i.ref.i64($p961);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i963 := $ne.i64($i962, 0);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i46 := 13;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i963 == 1);
    goto $bb11;

  $bb230:
    assume $i963 == 1;
    assume {:verifier.code 0} true;
    $p899 := $p961;
    goto $bb230_dummy;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb209:
    assume $i871 == 1;
    $p873 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p874 := $load.ref($M.0, $p873);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($add.ref($p874, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p876 := $bitcast.ref.ref($p875);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($p876, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p877, $p852);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb206:
    assume $i855 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p865 := $load.ref($M.0, $p864);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($p865, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p867 := $bitcast.ref.ref($p866);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} slic_reg32_write($p867, $i853, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb203:
    assume $i851 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} dev_err.ref.ref.ref($p4, .str.4, $p831);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p831, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p884 := $load.ref($M.0, $p883);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} dev_err.ref.ref.ref($p4, .str.5, $p884);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($p831, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i886 := $load.i32($M.0, $p885);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} dev_err.ref.ref.i32($p4, .str.6, $i886);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} dev_err.ref.ref.ref($p4, .str.7, $p837);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} dev_err.ref.ref.i32($p4, .str.8, $i839);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} dev_err.ref.ref.i32($p4, .str.9, $i842);
    $p887 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p888 := $load.ref($M.0, $p887);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} dev_err.ref.ref.ref($p4, .str.10, $p888);
    $p889 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dev_err.ref.ref.ref($p4, .str.11, $p890);
    $p891 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i892 := $load.i32($M.0, $p891);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} dev_err.ref.ref.i32($p4, .str.12, $i892);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p893 := alloc_skb(2048, 32);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i894 := $p2i.ref.i64($p893);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i895 := $ne.i64($i894, 0);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i46 := 12;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i895 == 1);
    goto $bb11;

  $bb214:
    assume $i895 == 1;
    assume {:verifier.code 0} true;
    $p831 := $p893;
    goto $bb214_dummy;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb193:
    assume $i803 == 1;
    $p805 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.0, $p805);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p806, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p808 := $bitcast.ref.ref($p807);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p808, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p809, $p784);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb190:
    assume $i787 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p797, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p799 := $bitcast.ref.ref($p798);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} slic_reg32_write($p799, $i785, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb187:
    assume $i783 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} dev_err.ref.ref.ref($p4, .str.4, $p763);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p763, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p816 := $load.ref($M.0, $p815);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} dev_err.ref.ref.ref($p4, .str.5, $p816);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p763, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i818 := $load.i32($M.0, $p817);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} dev_err.ref.ref.i32($p4, .str.6, $i818);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} dev_err.ref.ref.ref($p4, .str.7, $p769);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} dev_err.ref.ref.i32($p4, .str.8, $i771);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} dev_err.ref.ref.i32($p4, .str.9, $i774);
    $p819 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p820 := $load.ref($M.0, $p819);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} dev_err.ref.ref.ref($p4, .str.10, $p820);
    $p821 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p822 := $load.ref($M.0, $p821);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} dev_err.ref.ref.ref($p4, .str.11, $p822);
    $p823 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i824 := $load.i32($M.0, $p823);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} dev_err.ref.ref.i32($p4, .str.12, $i824);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p825 := alloc_skb(2048, 32);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i826 := $p2i.ref.i64($p825);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i827 := $ne.i64($i826, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i46 := 11;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i827 == 1);
    goto $bb11;

  $bb198:
    assume $i827 == 1;
    assume {:verifier.code 0} true;
    $p763 := $p825;
    goto $bb198_dummy;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb177:
    assume $i735 == 1;
    $p737 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.0, $p737);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p738, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p740 := $bitcast.ref.ref($p739);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p740, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p741, $p716);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb174:
    assume $i719 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.0, $p728);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p729, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p731 := $bitcast.ref.ref($p730);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} slic_reg32_write($p731, $i717, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb171:
    assume $i715 == 1;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} dev_err.ref.ref.ref($p4, .str.4, $p695);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p695, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p748 := $load.ref($M.0, $p747);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} dev_err.ref.ref.ref($p4, .str.5, $p748);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p695, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i750 := $load.i32($M.0, $p749);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} dev_err.ref.ref.i32($p4, .str.6, $i750);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} dev_err.ref.ref.ref($p4, .str.7, $p701);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} dev_err.ref.ref.i32($p4, .str.8, $i703);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} dev_err.ref.ref.i32($p4, .str.9, $i706);
    $p751 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} dev_err.ref.ref.ref($p4, .str.10, $p752);
    $p753 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p754 := $load.ref($M.0, $p753);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} dev_err.ref.ref.ref($p4, .str.11, $p754);
    $p755 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i756 := $load.i32($M.0, $p755);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} dev_err.ref.ref.i32($p4, .str.12, $i756);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p757 := alloc_skb(2048, 32);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i758 := $p2i.ref.i64($p757);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i759 := $ne.i64($i758, 0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i46 := 10;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !($i759 == 1);
    goto $bb11;

  $bb182:
    assume $i759 == 1;
    assume {:verifier.code 0} true;
    $p695 := $p757;
    goto $bb182_dummy;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i667 == 1;
    $p669 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p670, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p672 := $bitcast.ref.ref($p671);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p672, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p673, $p648);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb158:
    assume $i651 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p661 := $load.ref($M.0, $p660);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p661, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p663 := $bitcast.ref.ref($p662);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} slic_reg32_write($p663, $i649, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i647 == 1;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} dev_err.ref.ref.ref($p4, .str.4, $p627);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p627, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.0, $p679);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} dev_err.ref.ref.ref($p4, .str.5, $p680);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p627, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i682 := $load.i32($M.0, $p681);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} dev_err.ref.ref.i32($p4, .str.6, $i682);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} dev_err.ref.ref.ref($p4, .str.7, $p633);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} dev_err.ref.ref.i32($p4, .str.8, $i635);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} dev_err.ref.ref.i32($p4, .str.9, $i638);
    $p683 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p684 := $load.ref($M.0, $p683);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} dev_err.ref.ref.ref($p4, .str.10, $p684);
    $p685 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p686 := $load.ref($M.0, $p685);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} dev_err.ref.ref.ref($p4, .str.11, $p686);
    $p687 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i688 := $load.i32($M.0, $p687);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} dev_err.ref.ref.i32($p4, .str.12, $i688);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p689 := alloc_skb(2048, 32);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i690 := $p2i.ref.i64($p689);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i691 := $ne.i64($i690, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i46 := 9;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i691 == 1);
    goto $bb11;

  $bb166:
    assume $i691 == 1;
    assume {:verifier.code 0} true;
    $p627 := $p689;
    goto $bb166_dummy;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb145:
    assume $i599 == 1;
    $p601 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.0, $p601);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p602, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p604 := $bitcast.ref.ref($p603);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p604, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p605, $p580);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i583 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p593 := $load.ref($M.0, $p592);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p593, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p595 := $bitcast.ref.ref($p594);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} slic_reg32_write($p595, $i581, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i579 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} dev_err.ref.ref.ref($p4, .str.4, $p559);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p559, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} dev_err.ref.ref.ref($p4, .str.5, $p612);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p559, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.0, $p613);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} dev_err.ref.ref.i32($p4, .str.6, $i614);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} dev_err.ref.ref.ref($p4, .str.7, $p565);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} dev_err.ref.ref.i32($p4, .str.8, $i567);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} dev_err.ref.ref.i32($p4, .str.9, $i570);
    $p615 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p616 := $load.ref($M.0, $p615);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} dev_err.ref.ref.ref($p4, .str.10, $p616);
    $p617 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.0, $p617);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} dev_err.ref.ref.ref($p4, .str.11, $p618);
    $p619 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i620 := $load.i32($M.0, $p619);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} dev_err.ref.ref.i32($p4, .str.12, $i620);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p621 := alloc_skb(2048, 32);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i622 := $p2i.ref.i64($p621);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i623 := $ne.i64($i622, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i46 := 8;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i623 == 1);
    goto $bb11;

  $bb150:
    assume $i623 == 1;
    assume {:verifier.code 0} true;
    $p559 := $p621;
    goto $bb150_dummy;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb129:
    assume $i531 == 1;
    $p533 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.0, $p533);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p534, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p536 := $bitcast.ref.ref($p535);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p536, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p537, $p512);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i515 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p525 := $load.ref($M.0, $p524);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p525, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p527 := $bitcast.ref.ref($p526);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} slic_reg32_write($p527, $i513, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i511 == 1;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} dev_err.ref.ref.ref($p4, .str.4, $p491);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p491, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.0, $p543);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} dev_err.ref.ref.ref($p4, .str.5, $p544);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p491, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i546 := $load.i32($M.0, $p545);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} dev_err.ref.ref.i32($p4, .str.6, $i546);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} dev_err.ref.ref.ref($p4, .str.7, $p497);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} dev_err.ref.ref.i32($p4, .str.8, $i499);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} dev_err.ref.ref.i32($p4, .str.9, $i502);
    $p547 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} dev_err.ref.ref.ref($p4, .str.10, $p548);
    $p549 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.0, $p549);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} dev_err.ref.ref.ref($p4, .str.11, $p550);
    $p551 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i552 := $load.i32($M.0, $p551);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} dev_err.ref.ref.i32($p4, .str.12, $i552);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p553 := alloc_skb(2048, 32);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i554 := $p2i.ref.i64($p553);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i555 := $ne.i64($i554, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i46 := 7;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i555 == 1);
    goto $bb11;

  $bb134:
    assume $i555 == 1;
    assume {:verifier.code 0} true;
    $p491 := $p553;
    goto $bb134_dummy;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb113:
    assume $i463 == 1;
    $p465 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p466 := $load.ref($M.0, $p465);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p466, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p468 := $bitcast.ref.ref($p467);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p468, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p469, $p444);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i447 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p457, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p459 := $bitcast.ref.ref($p458);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} slic_reg32_write($p459, $i445, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i443 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} dev_err.ref.ref.ref($p4, .str.4, $p423);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p423, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} dev_err.ref.ref.ref($p4, .str.5, $p476);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p423, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i478 := $load.i32($M.0, $p477);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} dev_err.ref.ref.i32($p4, .str.6, $i478);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} dev_err.ref.ref.ref($p4, .str.7, $p429);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} dev_err.ref.ref.i32($p4, .str.8, $i431);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} dev_err.ref.ref.i32($p4, .str.9, $i434);
    $p479 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} dev_err.ref.ref.ref($p4, .str.10, $p480);
    $p481 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.0, $p481);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} dev_err.ref.ref.ref($p4, .str.11, $p482);
    $p483 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i484 := $load.i32($M.0, $p483);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} dev_err.ref.ref.i32($p4, .str.12, $i484);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p485 := alloc_skb(2048, 32);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i486 := $p2i.ref.i64($p485);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i487 := $ne.i64($i486, 0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i46 := 6;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i487 == 1);
    goto $bb11;

  $bb118:
    assume $i487 == 1;
    assume {:verifier.code 0} true;
    $p423 := $p485;
    goto $bb118_dummy;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i395 == 1;
    $p397 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p398, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p400 := $bitcast.ref.ref($p399);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p400, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p401, $p376);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i379 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p388);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p389, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p391 := $bitcast.ref.ref($p390);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} slic_reg32_write($p391, $i377, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i375 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} dev_err.ref.ref.ref($p4, .str.4, $p355);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p355, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} dev_err.ref.ref.ref($p4, .str.5, $p408);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p355, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i410 := $load.i32($M.0, $p409);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} dev_err.ref.ref.i32($p4, .str.6, $i410);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} dev_err.ref.ref.ref($p4, .str.7, $p361);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} dev_err.ref.ref.i32($p4, .str.8, $i363);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} dev_err.ref.ref.i32($p4, .str.9, $i366);
    $p411 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} dev_err.ref.ref.ref($p4, .str.10, $p412);
    $p413 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} dev_err.ref.ref.ref($p4, .str.11, $p414);
    $p415 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i416 := $load.i32($M.0, $p415);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_err.ref.ref.i32($p4, .str.12, $i416);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p417 := alloc_skb(2048, 32);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i418 := $p2i.ref.i64($p417);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i419 := $ne.i64($i418, 0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i46 := 5;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i419 == 1);
    goto $bb11;

  $bb102:
    assume $i419 == 1;
    assume {:verifier.code 0} true;
    $p355 := $p417;
    goto $bb102_dummy;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i327 == 1;
    $p329 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.0, $p329);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p330, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p332 := $bitcast.ref.ref($p331);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p332, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p333, $p308);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i311 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p321, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} slic_reg32_write($p323, $i309, 0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i307 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} dev_err.ref.ref.ref($p4, .str.4, $p287);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p287, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} dev_err.ref.ref.ref($p4, .str.5, $p340);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p287, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.0, $p341);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} dev_err.ref.ref.i32($p4, .str.6, $i342);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} dev_err.ref.ref.ref($p4, .str.7, $p293);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} dev_err.ref.ref.i32($p4, .str.8, $i295);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} dev_err.ref.ref.i32($p4, .str.9, $i298);
    $p343 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.0, $p343);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} dev_err.ref.ref.ref($p4, .str.10, $p344);
    $p345 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} dev_err.ref.ref.ref($p4, .str.11, $p346);
    $p347 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i348 := $load.i32($M.0, $p347);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} dev_err.ref.ref.i32($p4, .str.12, $i348);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p349 := alloc_skb(2048, 32);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i350 := $p2i.ref.i64($p349);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i351 := $ne.i64($i350, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i46 := 4;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i351 == 1);
    goto $bb11;

  $bb86:
    assume $i351 == 1;
    assume {:verifier.code 0} true;
    $p287 := $p349;
    goto $bb86_dummy;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i259 == 1;
    $p261 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p264, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, $p240);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i243 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p253, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} slic_reg32_write($p255, $i241, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i239 == 1;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} dev_err.ref.ref.ref($p4, .str.4, $p219);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p219, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} dev_err.ref.ref.ref($p4, .str.5, $p272);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p219, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} dev_err.ref.ref.i32($p4, .str.6, $i274);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} dev_err.ref.ref.ref($p4, .str.7, $p225);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} dev_err.ref.ref.i32($p4, .str.8, $i227);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} dev_err.ref.ref.i32($p4, .str.9, $i230);
    $p275 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} dev_err.ref.ref.ref($p4, .str.10, $p276);
    $p277 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} dev_err.ref.ref.ref($p4, .str.11, $p278);
    $p279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} dev_err.ref.ref.i32($p4, .str.12, $i280);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p281 := alloc_skb(2048, 32);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i283 := $ne.i64($i282, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i46 := 3;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb11;

  $bb70:
    assume $i283 == 1;
    assume {:verifier.code 0} true;
    $p219 := $p281;
    goto $bb70_dummy;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i191 == 1;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p194, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p197, $p172);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i175 == 1;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p185, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} slic_reg32_write($p187, $i173, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i171 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} dev_err.ref.ref.ref($p4, .str.4, $p151);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p151, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dev_err.ref.ref.ref($p4, .str.5, $p204);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p151, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} dev_err.ref.ref.i32($p4, .str.6, $i206);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} dev_err.ref.ref.ref($p4, .str.7, $p157);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} dev_err.ref.ref.i32($p4, .str.8, $i159);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} dev_err.ref.ref.i32($p4, .str.9, $i162);
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} dev_err.ref.ref.ref($p4, .str.10, $p208);
    $p209 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} dev_err.ref.ref.ref($p4, .str.11, $p210);
    $p211 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} dev_err.ref.ref.i32($p4, .str.12, $i212);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $p213 := alloc_skb(2048, 32);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p213);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i214, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i46 := 2;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb11;

  $bb54:
    assume $i215 == 1;
    assume {:verifier.code 0} true;
    $p151 := $p213;
    goto $bb54_dummy;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i123 == 1;
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $p104);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i107 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} slic_reg32_write($p119, $i105, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i103 == 1;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} dev_err.ref.ref.ref($p4, .str.4, $p83);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} dev_err.ref.ref.ref($p4, .str.5, $p136);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} dev_err.ref.ref.i32($p4, .str.6, $i138);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} dev_err.ref.ref.ref($p4, .str.7, $p89);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} dev_err.ref.ref.i32($p4, .str.8, $i91);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dev_err.ref.ref.i32($p4, .str.9, $i94);
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} dev_err.ref.ref.ref($p4, .str.10, $p140);
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} dev_err.ref.ref.ref($p4, .str.11, $p142);
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} dev_err.ref.ref.i32($p4, .str.12, $i144);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p145 := alloc_skb(2048, 32);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i46 := 1;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb11;

  $bb38:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $p83 := $p145;
    goto $bb38_dummy;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i63 == 1;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p30);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} slic_reg32_write($p51, $i31, 0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} dev_err.ref.ref.ref($p4, .str.2, .str.3);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} dev_err.ref.ref.ref($p4, .str.4, $p9);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} dev_err.ref.ref.ref($p4, .str.5, $p34);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} dev_err.ref.ref.i32($p4, .str.6, $i36);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} dev_err.ref.ref.ref($p4, .str.7, $p15);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} dev_err.ref.ref.i32($p4, .str.8, $i17);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} dev_err.ref.ref.i32($p4, .str.9, $i20);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} dev_err.ref.ref.ref($p4, .str.10, $p38);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} dev_err.ref.ref.ref($p4, .str.11, $p40);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} dev_err.ref.ref.i32($p4, .str.12, $i42);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} dev_err.ref.ref($p4, .str.13);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p43 := alloc_skb(2048, 32);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i46 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb9:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p43;
    goto $bb9_dummy;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb261_dummy:
    assume false;
    return;

  $bb250_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  $bb246_dummy:
    assume false;
    return;

  $bb234_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4480;

  $bb230_dummy:
    assume false;
    return;

  $bb218_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4387;

  $bb214_dummy:
    assume false;
    return;

  $bb202_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4294;

  $bb198_dummy:
    assume false;
    return;

  $bb186_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4201;

  $bb182_dummy:
    assume false;
    return;

  $bb170_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  $bb166_dummy:
    assume false;
    return;

  $bb154_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4015;

  $bb150_dummy:
    assume false;
    return;

  $bb138_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3922;

  $bb134_dummy:
    assume false;
    return;

  $bb122_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  $bb118_dummy:
    assume false;
    return;

  $bb106_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3736;

  $bb102_dummy:
    assume false;
    return;

  $bb90_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  $bb86_dummy:
    assume false;
    return;

  $bb74_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  $bb70_dummy:
    assume false;
    return;

  $bb58_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  $bb54_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;

  $bb38_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  $bb9_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;
}



const slic_rcvqueue_free: ref;

axiom slic_rcvqueue_free == $sub.ref(0, 241823);

procedure slic_rcvqueue_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_rcvqueue_free($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17 := slic_rcvqueue_free_loop_$bb4($p0, $p2, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17);
    goto $bb4_last;

  $bb5:
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} consume_skb($p7);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p2);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 242855);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 775} {:cexpr "alloc_skb:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_check_alloc_flags($i1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p2 := ldv_undef_ptr();
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 243887);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 244919);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    return;
}



const slic_cmdq_free: ref;

axiom slic_cmdq_free == $sub.ref(0, 245951);

procedure slic_cmdq_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_cmdq_free($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p6: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1)), $mul.ref(0, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1184, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 779} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p20, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(992, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 780} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p22, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 781} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p24, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} slic_cmdqmem_free($p0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p6 := slic_cmdq_free_loop_$bb4($p7, $i8, $i9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p6);
    goto $bb4_last;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p16;
    goto $bb12_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} dev_kfree_skb_irq($p11);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4707;
}



const slic_cmdqmem_free: ref;

axiom slic_cmdqmem_free == $sub.ref(0, 246983);

procedure slic_cmdqmem_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_cmdqmem_free($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $i114: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i64;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $i142: i64;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $i156: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p169: ref;
  var $i170: i64;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $i184: i64;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $i198: i64;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $i212: i64;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p225: ref;
  var $i226: i64;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p239: ref;
  var $i240: i64;
  var $p242: ref;
  var $p243: ref;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p253: ref;
  var $i254: i64;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p267: ref;
  var $i268: i64;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $i282: i64;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p295: ref;
  var $i296: i64;
  var $p298: ref;
  var $p299: ref;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p309: ref;
  var $i310: i64;
  var $p312: ref;
  var $p313: ref;
  var $i314: i64;
  var $i315: i1;
  var $p316: ref;
  var $p317: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p323: ref;
  var $i324: i64;
  var $p326: ref;
  var $p327: ref;
  var $i328: i64;
  var $i329: i1;
  var $p330: ref;
  var $p331: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p337: ref;
  var $i338: i64;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $i343: i1;
  var $p344: ref;
  var $p345: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p351: ref;
  var $i352: i64;
  var $p354: ref;
  var $p355: ref;
  var $i356: i64;
  var $i357: i1;
  var $p358: ref;
  var $p359: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p365: ref;
  var $i366: i64;
  var $p368: ref;
  var $p369: ref;
  var $i370: i64;
  var $i371: i1;
  var $p372: ref;
  var $p373: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p379: ref;
  var $i380: i64;
  var $p382: ref;
  var $p383: ref;
  var $i384: i64;
  var $i385: i1;
  var $p386: ref;
  var $p387: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p393: ref;
  var $i394: i64;
  var $p396: ref;
  var $p397: ref;
  var $i398: i64;
  var $i399: i1;
  var $p400: ref;
  var $p401: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p407: ref;
  var $i408: i64;
  var $p410: ref;
  var $p411: ref;
  var $i412: i64;
  var $i413: i1;
  var $p414: ref;
  var $p415: ref;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p421: ref;
  var $i422: i64;
  var $p424: ref;
  var $p425: ref;
  var $i426: i64;
  var $i427: i1;
  var $p428: ref;
  var $p429: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p435: ref;
  var $i436: i64;
  var $p438: ref;
  var $p439: ref;
  var $i440: i64;
  var $i441: i1;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p449: ref;
  var $i450: i64;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(2, 8));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(5, 8));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(7, 8));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $p116 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(8, 8));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    $p130 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(9, 8));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $p144 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(10, 8));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $p158 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(11, 8));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $p172 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(12, 8));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(13, 8));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    $p200 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(14, 8));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    $p214 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(15, 8));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i216 := $p2i.ref.i64($p215);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i217 := $ne.i64($i216, 0);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    $p228 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(16, 8));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i230 := $p2i.ref.i64($p229);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    $p242 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(17, 8));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p243);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $p256 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(18, 8));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $p270 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(19, 8));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p271);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i272, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    $p284 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(20, 8));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p285);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    $p298 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(21, 8));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p299);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    $p312 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(22, 8));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i314 := $p2i.ref.i64($p313);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i315 := $ne.i64($i314, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    $p326 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(23, 8));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i328 := $p2i.ref.i64($p327);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i329 := $ne.i64($i328, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    $p340 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(24, 8));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.0, $p340);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p341);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i343 := $ne.i64($i342, 0);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    $p354 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(25, 8));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i356 := $p2i.ref.i64($p355);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i357 := $ne.i64($i356, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    $p368 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(26, 8));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.0, $p368);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i370 := $p2i.ref.i64($p369);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i371 := $ne.i64($i370, 0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    $p382 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(27, 8));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.0, $p382);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i384 := $p2i.ref.i64($p383);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i385 := $ne.i64($i384, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    $p396 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(28, 8));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.0, $p396);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i398 := $p2i.ref.i64($p397);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i399 := $ne.i64($i398, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    $p410 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(29, 8));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.0, $p410);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i412 := $p2i.ref.i64($p411);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i413 := $ne.i64($i412, 0);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    $p424 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(30, 8));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p425 := $load.ref($M.0, $p424);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i426 := $p2i.ref.i64($p425);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i427 := $ne.i64($i426, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    $p438 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(31, 8));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i440 := $p2i.ref.i64($p439);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i441 := $ne.i64($i440, 0);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 784} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p16, 0, 520, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    return;

  $bb128:
    assume $i441 == 1;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    $p445 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(31, 8));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p447 := $bitcast.ref.ref($p446);
    $p449 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(31, 8));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i450 := $load.i64($M.0, $p449);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} pci_free_consistent($p443, 4096, $p447, $i450);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb124:
    assume $i427 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.0, $p428);
    $p431 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(30, 8));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p433 := $bitcast.ref.ref($p432);
    $p435 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(30, 8));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i436 := $load.i64($M.0, $p435);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} pci_free_consistent($p429, 4096, $p433, $i436);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i413 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.0, $p414);
    $p417 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(29, 8));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.0, $p417);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p419 := $bitcast.ref.ref($p418);
    $p421 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(29, 8));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i422 := $load.i64($M.0, $p421);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} pci_free_consistent($p415, 4096, $p419, $i422);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb116:
    assume $i399 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    $p403 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(28, 8));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.0, $p403);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    $p407 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(28, 8));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i408 := $load.i64($M.0, $p407);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} pci_free_consistent($p401, 4096, $p405, $i408);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb112:
    assume $i385 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    $p389 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(27, 8));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.0, $p389);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p391 := $bitcast.ref.ref($p390);
    $p393 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(27, 8));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i394 := $load.i64($M.0, $p393);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} pci_free_consistent($p387, 4096, $p391, $i394);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume $i371 == 1;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    $p375 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(26, 8));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p376);
    $p379 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(26, 8));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i380 := $load.i64($M.0, $p379);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} pci_free_consistent($p373, 4096, $p377, $i380);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb104:
    assume $i357 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    $p361 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(25, 8));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p362);
    $p365 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(25, 8));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i366 := $load.i64($M.0, $p365);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} pci_free_consistent($p359, 4096, $p363, $i366);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i343 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    $p347 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(24, 8));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p349 := $bitcast.ref.ref($p348);
    $p351 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(24, 8));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i352 := $load.i64($M.0, $p351);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} pci_free_consistent($p345, 4096, $p349, $i352);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb96:
    assume $i329 == 1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    $p333 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(23, 8));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.0, $p333);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    $p337 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(23, 8));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i338 := $load.i64($M.0, $p337);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} pci_free_consistent($p331, 4096, $p335, $i338);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i315 == 1;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    $p319 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(22, 8));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    $p323 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(22, 8));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i324 := $load.i64($M.0, $p323);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} pci_free_consistent($p317, 4096, $p321, $i324);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i301 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.0, $p302);
    $p305 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(21, 8));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p306);
    $p309 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(21, 8));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i310 := $load.i64($M.0, $p309);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} pci_free_consistent($p303, 4096, $p307, $i310);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i287 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    $p291 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(20, 8));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    $p295 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(20, 8));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i296 := $load.i64($M.0, $p295);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} pci_free_consistent($p289, 4096, $p293, $i296);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i273 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    $p277 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(19, 8));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    $p281 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(19, 8));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i282 := $load.i64($M.0, $p281);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} pci_free_consistent($p275, 4096, $p279, $i282);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i259 == 1;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    $p263 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(18, 8));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.0, $p263);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    $p267 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(18, 8));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i268 := $load.i64($M.0, $p267);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} pci_free_consistent($p261, 4096, $p265, $i268);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i245 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    $p249 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(17, 8));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    $p253 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(17, 8));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i254 := $load.i64($M.0, $p253);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} pci_free_consistent($p247, 4096, $p251, $i254);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i231 == 1;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    $p235 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(16, 8));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    $p239 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(16, 8));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i240 := $load.i64($M.0, $p239);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} pci_free_consistent($p233, 4096, $p237, $i240);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i217 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    $p221 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(15, 8));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    $p225 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(15, 8));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i226 := $load.i64($M.0, $p225);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} pci_free_consistent($p219, 4096, $p223, $i226);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i203 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    $p207 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(14, 8));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    $p211 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(14, 8));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i212 := $load.i64($M.0, $p211);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} pci_free_consistent($p205, 4096, $p209, $i212);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume $i189 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    $p193 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(13, 8));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    $p197 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(13, 8));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.0, $p197);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} pci_free_consistent($p191, 4096, $p195, $i198);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i175 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    $p179 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(12, 8));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    $p183 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(12, 8));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i184 := $load.i64($M.0, $p183);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} pci_free_consistent($p177, 4096, $p181, $i184);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i161 == 1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    $p165 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(11, 8));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    $p169 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(11, 8));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i170 := $load.i64($M.0, $p169);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} pci_free_consistent($p163, 4096, $p167, $i170);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i147 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    $p151 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(10, 8));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    $p155 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(10, 8));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} pci_free_consistent($p149, 4096, $p153, $i156);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i133 == 1;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    $p137 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(9, 8));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    $p141 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(9, 8));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i142 := $load.i64($M.0, $p141);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} pci_free_consistent($p135, 4096, $p139, $i142);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i119 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    $p123 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(8, 8));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    $p127 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(8, 8));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} pci_free_consistent($p121, 4096, $p125, $i128);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i105 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    $p109 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(7, 8));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    $p113 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(7, 8));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} pci_free_consistent($p107, 4096, $p111, $i114);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i91 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    $p95 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(6, 8));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(6, 8));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.0, $p99);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} pci_free_consistent($p93, 4096, $p97, $i100);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i77 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    $p81 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(5, 8));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    $p85 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(5, 8));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} pci_free_consistent($p79, 4096, $p83, $i86);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(4, 8));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(4, 8));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} pci_free_consistent($p65, 4096, $p69, $i72);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(3, 8));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    $p57 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(3, 8));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} pci_free_consistent($p51, 4096, $p55, $i58);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(2, 8));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(2, 8));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} pci_free_consistent($p37, 4096, $p41, $i44);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(1, 8));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} pci_free_consistent($p23, 4096, $p27, $i30);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1280, 1)), $mul.ref(264, 1)), $mul.ref(0, 8));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} pci_free_consistent($p8, 4096, $p12, $i15);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 248015);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 817} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 249047);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 820} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    return;
}



const pci_zalloc_consistent: ref;

axiom pci_zalloc_consistent == $sub.ref(0, 250079);

procedure pci_zalloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation pci_zalloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} {:cexpr "pci_zalloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p7 := dma_zalloc_coherent($p6, $i1, $p2, 32);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const slic_rspqueue_free: ref;

axiom slic_rspqueue_free == $sub.ref(0, 251111);

procedure slic_rspqueue_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_rspqueue_free($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i5: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(8, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i3);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(4, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $p16, $p17, $p18, $i19, $p21, $i22, $i23, $p25, $i26, $p28, $i29, $i30, $i31, $i5 := slic_rspqueue_free_loop_$bb4($p0, $p2, $i6, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $p16, $p17, $p18, $i19, $p21, $i22, $i23, $p25, $i26, $p28, $i29, $i30, $i31, $i5);
    goto $bb4_last;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref($i6, 8));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i5);
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref($i23, 8));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i5);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref($i26, 8));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i5, 1);
    call {:si_unique_call 824} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p2);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32($i29, $i30);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i29;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref($i14, 8));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i5);
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref($i19, 8));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} pci_free_consistent($p13, 4096, $p18, $i22);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;
}



const dma_zalloc_coherent: ref;

axiom dma_zalloc_coherent == $sub.ref(0, 252143);

procedure dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} {:cexpr "dma_zalloc_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 826} {:cexpr "dma_zalloc_coherent:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_check_alloc_flags($i3);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p4 := ldv_undef_ptr();
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const slic_init_cleanup: ref;

axiom slic_init_cleanup == $sub.ref(0, 253175);

procedure slic_init_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.15, $M.17, $M.3, $M.5, $M.7, $M.9;



implementation slic_init_cleanup($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(252, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(488, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} slic_rspqueue_free($p0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} slic_cmdq_free($p0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} slic_rcvqueue_free($p0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(488, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(360, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_72 := ldv_del_timer_38($p29);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} pci_free_consistent($p17, 112, $p20, $i22);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 0);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(252, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_free_irq_37($i8, $p11);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_irq_37: ref;

axiom ldv_free_irq_37 == $sub.ref(0, 254207);

procedure ldv_free_irq_37($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation ldv_free_irq_37($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "ldv_free_irq_37:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} free_irq($i0, $p1);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_38: ref;

axiom ldv_del_timer_38 == $sub.ref(0, 255239);

procedure ldv_del_timer_38($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_38($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i1 := del_timer($p0);
    call {:si_unique_call 839} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} disable_suitable_timer_3($p0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 256271);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 841} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 257303);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p22 := $M.10;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 846} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p16 := $M.8;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 845} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 844} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p4 := $M.4;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 843} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 258335);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 259367);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.15, $M.17;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i2 := $M.11;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.13;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.15;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.17;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i16 := $M.18;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 852} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i12 := $M.16;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 851} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i8 := $M.14;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 850} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 849} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const slic_interrupt: ref;

axiom slic_interrupt == $sub.ref(0, 260399);

procedure slic_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.24, assertsPassed, $CurrAddr;



implementation slic_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} {:cexpr "slic_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p3 := netdev_priv($p2);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12216, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12216, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} slic_reg32_write($p17, 2, 1);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 856} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(280, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12212, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12212, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(280, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12168, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 2);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12168, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12176, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12176, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} slic_reg32_write($p59, 0, 1);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} slic_interrupt_card_up($i21, $p4, $p2);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb11;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i21, 268435456);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i38 == 1);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i21, 16777216);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i21, 131072);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12208, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(12208, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} slic_upr_request_complete($p4, $i21);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb16;
}



const ldv_request_irq_39: ref;

axiom ldv_request_irq_39 == $sub.ref(0, 261431);

procedure ldv_request_irq_39($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.19, $M.11, $M.14, $M.20, $M.13, $M.16, $M.21, $M.15, $M.18, $M.22, $M.17;



implementation ldv_request_irq_39($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} {:cexpr "ldv_request_irq_39:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 861} {:cexpr "ldv_request_irq_39:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 863} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i6 := reg_check_1($p1);
    call {:si_unique_call 865} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 262463);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 868} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 870} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 263495);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(slic_interrupt));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 264527);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.12, $M.19, $M.11, $M.14, $M.20, $M.13, $M.16, $M.21, $M.15, $M.18, $M.22, $M.17;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i2 := $M.11;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.13;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.15;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.17;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.18 := $i0;
    call {:si_unique_call 878} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.22 := $p1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 879} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $M.16 := $i0;
    call {:si_unique_call 876} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.21 := $p1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 877} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.14 := $i0;
    call {:si_unique_call 874} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.20 := $p1;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $M.12 := $i0;
    call {:si_unique_call 872} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 265559);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 880} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 881} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 882} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 883} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const slic_interrupt_card_up: ref;

axiom slic_interrupt_card_up == $sub.ref(0, 266591);

procedure slic_interrupt_card_up($i0: i32, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.24, assertsPassed, $CurrAddr;



implementation slic_interrupt_card_up($i0: i32, $p1: ref, $p2: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} {:cexpr "slic_interrupt_card_up:arg:isr"} boogie_si_record_i32($i0);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, $sub.i32(0, 1610612737));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i0, 1073741824);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i0, 536870912);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i56 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12200, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12200, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} slic_xmit_complete($p1);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i50 == 1;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12196, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12196, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} slic_rcv_handler($p1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 0);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i0, 134217728);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i0, 268435456);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i40 == 1);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i0, 16777216);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i0, 131072);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12208, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12208, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} slic_upr_request_complete($p1, $i0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb31;

  $bb27:
    assume $i34 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12204, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12204, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} slic_link_event_handler($p1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12180, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12180, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i0, 33554432);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i0, 8388608);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} dev_err.ref.ref.i32($p32, .str.1, $i0);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} dev_err.ref.ref.i32($p31, .str, $i0);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12184, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(12184, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(24, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i24 := $ule.i32($i23, 239);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $i25, $i26, $i27, $i28 := slic_interrupt_card_up_loop_$bb13($p1, $p22, $i25, $i26, $i27, $i28);
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i25 := slic_rcvqueue_fill($p1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 887} {:cexpr "count"} boogie_si_record_i32($i25);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p22);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i28 := $ule.i32($i27, 239);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb19_dummy;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "rcv_count"} boogie_si_record_i32($i21);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const slic_upr_request_complete: ref;

axiom slic_upr_request_complete == $sub.ref(0, 267623);

procedure slic_upr_request_complete($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, assertsPassed;



implementation slic_upr_request_complete($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p66: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p83: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $p100: ref;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $p117: ref;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $p134: ref;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $i149: i64;
  var $p151: ref;
  var $p153: ref;
  var $i154: i64;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $i159: i64;
  var $p160: ref;
  var $p161: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $i166: i64;
  var $p168: ref;
  var $p170: ref;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $i181: i64;
  var $i182: i64;
  var $i183: i64;
  var $p185: ref;
  var $p187: ref;
  var $i188: i64;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $i193: i64;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $p202: ref;
  var $p204: ref;
  var $i205: i64;
  var $p206: ref;
  var $p207: ref;
  var $p209: ref;
  var $i210: i64;
  var $p211: ref;
  var $p212: ref;
  var $p214: ref;
  var $i215: i64;
  var $i216: i64;
  var $i217: i64;
  var $p219: ref;
  var $p221: ref;
  var $i222: i64;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $i227: i64;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $i232: i64;
  var $i233: i64;
  var $i234: i64;
  var $p236: ref;
  var $p238: ref;
  var $i239: i64;
  var $p240: ref;
  var $p241: ref;
  var $p243: ref;
  var $i244: i64;
  var $p245: ref;
  var $p246: ref;
  var $p248: ref;
  var $i249: i64;
  var $i250: i64;
  var $i251: i64;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p257: ref;
  var $i258: i64;
  var $p259: ref;
  var $p260: ref;
  var $p262: ref;
  var $i263: i64;
  var $i264: i1;
  var $p265: ref;
  var $i266: i32;
  var $p267: ref;
  var $p268: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i32;
  var $p273: ref;
  var $p274: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} {:cexpr "slic_upr_request_complete:arg:isr"} boogie_si_record_i32($i1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} ldv_spin_lock();
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(344, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(352, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p5);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} kfree($p289);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} slic_upr_start($p0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(632, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} spin_unlock_irqrestore($p290, $u0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(52, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i286 := $and.i32($i1, 7405568);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i287 := $or.i32($i285, $i286);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(52, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, $i287);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} slic_link_upr_complete($p0, $i1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb19:
    assume $i22 == 1;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i1, 16777216);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i46 := $sub.i64($i40, $i45);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i35, $i46);
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i47);
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    $p53 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i63 := $sub.i64($i57, $i62);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i52, $i63);
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i64);
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    $p70 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i80 := $sub.i64($i74, $i79);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i69, $i80);
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i81);
    $p85 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i97 := $sub.i64($i91, $i96);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i86, $i97);
    $p100 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p100, $i98);
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.0, $p102);
    $p104 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p110, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.0, $p112);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i114 := $sub.i64($i108, $i113);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i103, $i114);
    $p117 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p117, $i115);
    $p119 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    $p121 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p127, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.0, $p129);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i131 := $sub.i64($i125, $i130);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i120, $i131);
    $p134 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p134, $i132);
    $p136 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    $p138 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p139, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i142 := $load.i64($M.0, $p141);
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p144, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i148 := $sub.i64($i142, $i147);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i137, $i148);
    $p151 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p151, $i149);
    $p153 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(72, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    $p155 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p156, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.0, $p158);
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p161, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i164 := $load.i64($M.0, $p163);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i165 := $sub.i64($i159, $i164);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i166 := $add.i64($i154, $i165);
    $p168 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(72, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p168, $i166);
    $p170 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.0, $p170);
    $p172 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p173, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.0, $p175);
    $p177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p178, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i181 := $load.i64($M.0, $p180);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i182 := $sub.i64($i176, $i181);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i183 := $add.i64($i171, $i182);
    $p185 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p185, $i183);
    $p187 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.0, $p187);
    $p189 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p190, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i193 := $load.i64($M.0, $p192);
    $p194 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p195, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.0, $p197);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i199 := $sub.i64($i193, $i198);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i200 := $add.i64($i188, $i199);
    $p202 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p202, $i200);
    $p204 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.0, $p204);
    $p206 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p207, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    $p211 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p212, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i215 := $load.i64($M.0, $p214);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i216 := $sub.i64($i210, $i215);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i217 := $add.i64($i205, $i216);
    $p219 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p219, $i217);
    $p221 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(96, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i222 := $load.i64($M.0, $p221);
    $p223 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p224, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i227 := $load.i64($M.0, $p226);
    $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p229, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(32, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i232 := $load.i64($M.0, $p231);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i233 := $sub.i64($i227, $i232);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i234 := $add.i64($i222, $i233);
    $p236 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(96, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p236, $i234);
    $p238 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(104, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i239 := $load.i64($M.0, $p238);
    $p240 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p240);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p241, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i244 := $load.i64($M.0, $p243);
    $p245 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p246, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i249 := $load.i64($M.0, $p248);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i250 := $sub.i64($i244, $i249);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i251 := $add.i64($i239, $i250);
    $p253 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12448, 1)), $mul.ref(32, 1)), $mul.ref(104, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p253, $i251);
    $p254 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p255, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i258 := $load.i64($M.0, $p257);
    $p259 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i263 := $load.i64($M.0, $p262);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i264 := $ugt.i64($i258, $i263);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p282 := $bitcast.ref.ref($p26);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p25);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 902} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p282, $p283, 104, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb25:
    assume $i264 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12192, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p265);
    $p267 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p268 := $bitcast.ref.ref($p267);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p268, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i271 := $load.i64($M.0, $p270);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i272 := $trunc.i64.i32($i271);
    $p273 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p274, $mul.ref(0, 104)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i277 := $load.i64($M.0, $p276);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i278 := $trunc.i64.i32($i277);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i279 := $sub.i32($i272, $i278);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i280 := $add.i32($i266, $i279);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12192, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, $i280);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} dev_err.ref.ref.i32($p32, .str.18, $i1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(632, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_link_upr_complete: ref;

axiom slic_link_upr_complete == $sub.ref(0, 268655);

procedure slic_link_upr_complete($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation slic_link_upr_complete($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i8;
  var $i30: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} {:cexpr "slic_link_upr_complete:arg:isr"} boogie_si_record_i32($i1);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 904} {:cexpr "linkstatus"} boogie_si_record_i32($i5);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 16777216);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 131072);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(296, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i5, 1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 2 else 0);
    call {:si_unique_call 906} {:cexpr "linkup"} boogie_si_record_i32($i27);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i5, 8);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i5, 4);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30 := $i33;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i5, 2);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 2);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i27, 0);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i30);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(299, 1));
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i36);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 2);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i64 == 1;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} slic_config_set($p0, 1);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 2);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} netif_start_queue($p67);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(297, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 0);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i27, 2);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb28;

  $bb29:
    assume $i46 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(298, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i30);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i49, $i50);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb28;

  $bb31:
    assume $i51 == 1;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(299, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i36);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i54, $i55);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb28;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i27, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb22;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb19;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i30 := 3;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(4, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i64($i17, 32);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_73 := slic_upr_queue_request($p0, 1, $i15, $i19, 0, 0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 269687);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} free_($p0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 270719);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 910} $free($p0);
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 271751);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} netif_tx_start_queue($p1);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 272783);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} clear_bit(0, $p1);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 273815);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 915} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    return;
}



const slic_rcv_handler: ref;

axiom slic_rcv_handler == $sub.ref(0, 274847);

procedure slic_rcv_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rcv_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $p72: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i85: i32;
  var $i6: i32;
  var $i33: i32;
  var $i86: i32;
  var $i81: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $p91: ref;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p3 := slic_rcvqueue_getnext($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i86 := $i6;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i81 := $i86;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12244, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 929} {:cexpr "_max1"} boogie_si_record_i32($i88);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i89 := $ugt.i32($i88, $i81);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i89 == 1);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i90 := $i81;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12244, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i89 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i90 := $i88;
    goto $bb29;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p3, 0;
    goto $bb4;

  $bb4:
    call $p9, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p30, $i31, $i32, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $p45, $i46, $i47, $p50, $i51, $i52, $p54, $p56, $i57, $i58, $i59, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i74, $i75, $i76, $p82, $i83, $i84, $p7, $i8, $p10, $i85, $i33, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78 := slic_rcv_handler_loop_$bb4($p0, $p2, $p9, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p30, $i31, $i32, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $p45, $i46, $i47, $p50, $i51, $i52, $p54, $p56, $i57, $i58, $i59, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i74, $i75, $i76, $p82, $i83, $i84, $p7, $i8, $p10, $i85, $i33, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78);
    goto $bb4_last;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p10 := $p7;
    goto $bb24;

  $bb24:
    call $p9, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p30, $i31, $i32, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $p10, $i33, vslice_dummy_var_74, vslice_dummy_var_75 := slic_rcv_handler_loop_$bb24($p0, $p9, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p30, $i31, $i32, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i8, $p10, $i33, vslice_dummy_var_74, vslice_dummy_var_75);
    goto $bb24_last;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p10, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p9);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i17);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 268435456);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 2048)), $mul.ref(34, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i36 := slic_mac_filter($p0, $p35);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i8($i37);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p41, $p42 := $p10, $p11;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_76 := skb_pull($p41, 34);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref(0, 2048)), $mul.ref(20, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 65535);
    call {:si_unique_call 924} {:cexpr "rx_bytes"} boogie_si_record_i32($i47);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_77 := skb_put($p41, $i47);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i52);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i47);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i57, $i58);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i59);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p41, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, $sub.i32(0, 1537));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 512);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i65);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p41, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p41, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i71 := eth_type_trans($p41, $p70);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p41, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i71);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_78 := netif_rx($p41);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i8, 1);
    call {:si_unique_call 928} {:cexpr "frames"} boogie_si_record_i32($i74);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i32($i74, 1023);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i76 := $i74;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p82 := slic_rcvqueue_getnext($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i85 := $i74;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i6 := $i85;
    goto $bb3;

  $bb22:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p82, $i74;
    goto $bb22_dummy;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12252, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12252, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i81 := $i76;
    goto $bb20;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_75 := slic_rcvqueue_reinsert($p0, $p10);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p30 := slic_rcvqueue_getnext($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i33 := $i8;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i86 := $i33;
    goto $bb25;

  $bb9:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p30;
    goto $bb9_dummy;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb14;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12188, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12188, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} slic_rcv_handle_error($p0, $p12);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_74 := slic_rcvqueue_reinsert($p0, $p10);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;
}



const slic_xmit_complete: ref;

axiom slic_xmit_complete == $sub.ref(0, 275879);

procedure slic_xmit_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.2, $CurrAddr;



implementation slic_xmit_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i8: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p2 := slic_rspqueue_getnext($p0);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p6, $i7 := $p2, 0;
    goto $bb4;

  $bb4:
    call $i8, $p6, $i7, $p9, $i10, $i11, $p12, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $i30, $p33, $p34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $p48, $i49, $i50 := slic_xmit_complete_loop_$bb4($p0, $p1, $i8, $p6, $i7, $p9, $i10, $i11, $p12, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $i30, $p33, $p34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $p48, $i49, $i50);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12224, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12224, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i17);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p24, $i22);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.24, $p27);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1800, 1)), $mul.ref($i30, 40)), $mul.ref(8, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 352)), $mul.ref(292, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 3);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i7, 1);
    call {:si_unique_call 936} {:cexpr "frames"} boogie_si_record_i32($i47);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p48 := slic_rspqueue_getnext($p0);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i8 := $i47;
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p6, $i7 := $p48, $i47;
    goto $bb14_dummy;

  $bb5:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12248, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 933} {:cexpr "_max1"} boogie_si_record_i32($i52);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i53 := $ugt.i32($i52, $i5);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i54 := $i5;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12248, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i53 == 1;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb17;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} slic_cmdq_putdone_irq($p0, $p35);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p35, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} dev_kfree_skb_irq($p44);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const slic_rspqueue_getnext: ref;

axiom slic_rspqueue_getnext == $sub.ref(0, 276911);

procedure slic_rspqueue_getnext($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation slic_rspqueue_getnext($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i15, 127);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(4, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref($i27, 8));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 128);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} slic_reg64_write($p0, $p24, $i32, $p36, 0, 0);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(4, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(8, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i42 := $urem.i32($i39, $i41);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(4, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(0, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(4, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref($i47, 8));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p50);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb5:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1, 32));
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(16, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const slic_cmdq_putdone_irq: ref;

axiom slic_cmdq_putdone_irq == $sub.ref(0, 277943);

procedure slic_cmdq_putdone_irq($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0;



implementation slic_cmdq_putdone_irq($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} spin_lock($p3);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(0, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(0, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(16, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(16, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12164, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(24, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} spin_unlock($p21);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(1088, 1)), $mul.ref(16, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 10);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} netif_wake_queue($p20);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 278975);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} netif_tx_wake_queue($p1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 280007);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    return;
}



const slic_rcv_handle_error: ref;

axiom slic_rcv_handle_error == $sub.ref(0, 281039);

procedure slic_rcv_handle_error($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_rcv_handle_error($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p91: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p133: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i32;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $p241: ref;
  var $i242: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $p248: ref;
  var $i249: i1;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $p274: ref;
  var $i275: i1;
  var $p277: ref;
  var $i278: i32;
  var $i279: i32;
  var $p281: ref;
  var $i282: i1;
  var $p284: ref;
  var $i285: i32;
  var $i286: i32;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i1;
  var $p302: ref;
  var $i303: i32;
  var $i304: i32;
  var $p306: ref;
  var $i307: i1;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $p313: ref;
  var $i314: i1;
  var $p316: ref;
  var $i317: i32;
  var $i318: i32;
  var $p320: ref;
  var $i321: i1;
  var $p323: ref;
  var $i324: i32;
  var $i325: i32;
  var $p327: ref;
  var $i328: i1;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $p334: ref;
  var $i335: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i32;
  var $p341: ref;
  var $i342: i1;
  var $p344: ref;
  var $i345: i32;
  var $i346: i32;
  var $p348: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2048)), $mul.ref(34, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 5);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, 1073741824);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p256);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p257, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i260 := $and.i32($i259, 16777216);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p290, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i293 := $and.i32($i292, 128);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    return;

  $bb76:
    assume $i294 == 1;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p296 := $bitcast.ref.ref($p295);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p296, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p297);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i299 := $and.i32($i298, 255);
    call {:si_unique_call 946} {:cexpr "lerr"} boogie_si_record_i32($i299);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 134);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i299, 133);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i299, 132);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i299, 131);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i299, 130);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i299, 129);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i299, 128);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i342 == 1;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(4, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.0, $p344);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i346 := $add.i32($i345, 1);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(4, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p348, $i346);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i335 == 1;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(0, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.0, $p337);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i339 := $add.i32($i338, 1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(0, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p341, $i339);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i328 == 1;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(32, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i332 := $add.i32($i331, 1);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(32, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p334, $i332);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i321 == 1;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(36, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.0, $p323);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i325 := $add.i32($i324, 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(36, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, $i325);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i314 == 1;
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(40, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.0, $p316);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i318 := $add.i32($i317, 1);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(40, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, $i318);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i307 == 1;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(16, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i311 := $add.i32($i310, 1);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(16, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p313, $i311);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i300 == 1;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(12, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.0, $p302);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i304 := $add.i32($i303, 1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(12, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p306, $i304);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb64:
    assume $i261 == 1;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p263, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i266 := $lshr.i32($i265, 16);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i266, 511);
    call {:si_unique_call 945} {:cexpr "nerr"} boogie_si_record_i32($i267);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 259);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i267, 258);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i267, 256);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i282 == 1;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(44, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i286 := $add.i32($i285, 1);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(44, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p288, $i286);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i275 == 1;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(48, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p277);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i279 := $add.i32($i278, 1);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(48, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, $i279);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i268 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(52, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i272 := $add.i32($i271, 1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(52, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p274, $i272);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb52:
    assume $i229 == 1;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i234 := $lshr.i32($i233, 25);
    call {:si_unique_call 944} {:cexpr "xerr"} boogie_si_record_i32($i234);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 35);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i234, 34);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i234, 32);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i249 == 1;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(60, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i253 := $add.i32($i252, 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(60, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, $i253);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i242 == 1;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(8, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i245, 1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(8, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p248, $i246);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i235 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(56, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i239 := $add.i32($i238, 1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(56, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $i239);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 268435456);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1073741824);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 536870912);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 134217728);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 33554432);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 16777216);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 8388608);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 4194304);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 2097152);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, 1048576);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 524288);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p189, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i192 := $and.i32($i191, 262144);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i203, 131072);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i216 := $and.i32($i215, 65536);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i217 == 1;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(44, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, 1);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(44, 1));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, $i221);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i205 == 1;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(48, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i209 := $add.i32($i208, 1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(48, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, $i209);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i193 == 1;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(52, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i196, 1);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(52, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, $i197);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i181 == 1;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(60, 1));
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i185 := $add.i32($i184, 1);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(60, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, $i185);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i169 == 1;
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(56, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i172, 1);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(56, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i173);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i157 == 1;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(40, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, 1);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(40, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, $i161);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i145 == 1;
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(36, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, 1);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(36, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i149);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i127 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(32, 1));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(32, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $i131);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, $p135);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 1);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, $i137);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i115 == 1;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(28, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(28, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, $i119);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i103 == 1;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(24, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i106, 1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(24, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i107);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i85 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(20, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(20, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i89);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i95);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i67 == 1;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(16, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(16, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i77 := $add.i64($i76, 1);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i77);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i49 == 1;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(12, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(12, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(112, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 1);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(112, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i59);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i37 == 1;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(4, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(4, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(8, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(8, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(0, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12280, 1)), $mul.ref(0, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i18);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const slic_rcvqueue_reinsert: ref;

axiom slic_rcvqueue_reinsert == $sub.ref(0, 282071);

procedure slic_rcvqueue_reinsert($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation slic_rcvqueue_reinsert($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i10 := pci_map_single($p7, $p9, 2048, 2);
    call {:si_unique_call 948} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p11);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    call {:si_unique_call 949} {:cexpr "paddrl"} boogie_si_record_i32($i17);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p11);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i18, 32);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 950} {:cexpr "paddrh"} boogie_si_record_i32($i20);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i17, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i20, 0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 376)), $mul.ref(256, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} slic_reg64_write($p0, $p43, $i17, $p47, $i20, 0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i51 == 1);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p1);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb7:
    assume $i51 == 1;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 376)), $mul.ref(32, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} slic_reg32_write($p39, $i17, 0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} dev_err.ref.ref.ref($p24, .str.2, .str.16);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} dev_err.ref.ref.ref($p24, .str.4, $p1);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} dev_err.ref.ref.ref($p24, .str.5, $p26);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} dev_err.ref.ref.i32($p24, .str.6, $i28);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} dev_err.ref.ref.ref($p24, .str.7, $p11);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} dev_err.ref.ref.i32($p24, .str.8, $i17);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} dev_err.ref.ref.i32($p24, .str.9, $i20);
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} dev_err.ref.ref.ref($p24, .str.10, $p30);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} dev_err.ref.ref.ref($p24, .str.11, $p32);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} dev_err.ref.ref.i32($p24, .str.12, $i34);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_mac_filter: ref;

axiom slic_mac_filter == $sub.ref(0, 283103);

procedure slic_mac_filter($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_mac_filter($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p43: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(316, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 963} {:cexpr "opts"} boogie_si_record_i32($i5);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 8);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i11 := is_broadcast_ether_addr($p10);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i22 := is_multicast_ether_addr($p21);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 967} {:cexpr "tmp___1"} boogie_si_record_i8($i23);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i5, 1);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12240, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 1);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12240, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i5, 32);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i5, 4);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(336, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p43 := $p40;
    goto $bb21;

  $bb21:
    call $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p61, $p62, $i63, $i64, $p43 := slic_mac_filter_loop_$bb21($p1, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p61, $p62, $i63, $i64, $p43);
    goto $bb21_last;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i48 := ether_addr_equal($p45, $p47);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 969} {:cexpr "tmp___0"} boogie_si_record_i8($i49);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p62;
    goto $bb26_dummy;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12236, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12236, 1));
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i58);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12236, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12236, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 1);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i34);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i5, 2);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12232, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(12232, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 284135);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p2 := external_alloc();
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 285167);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p2 := external_alloc();
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 286199);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation eth_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 287231);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 976} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 977} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slic_rcvqueue_getnext: ref;

axiom slic_rcvqueue_getnext == $sub.ref(0, 288263);

procedure slic_rcvqueue_getnext($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rcvqueue_getnext($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p28: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2968)), $mul.ref(1368, 1));
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} dev_err.ref.ref.ref.i32($p31, .str.17, $p1, $i33);
    assume {:verifier.code 0} true;
    $p28 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, 239);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p28);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb19:
    assume $i42 == 1;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(24, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i37, $i38, $i39, $i40 := slic_rcvqueue_getnext_loop_$bb10($p0, $p34, $i37, $i38, $i39, $i40);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i37 := slic_rcvqueue_fill($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 980} {:cexpr "count"} boogie_si_record_i32($i37);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p34);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i39, 239);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb16_dummy;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p28 := $p27;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p27 := $p6;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const is_broadcast_ether_addr: ref;

axiom is_broadcast_ether_addr == $sub.ref(0, 289295);

procedure is_broadcast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_broadcast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(2, 2));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i3, $i7);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 2));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i8, $i12);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 65535);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const slic_entry_probe: ref;

axiom slic_entry_probe == $sub.ref(0, 290327);

procedure slic_entry_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.30, $M.2, $M.37, $M.38, $M.33, $CurrAddr, assertsPassed;



implementation slic_entry_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i17: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p44: ref;
  var $i45: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p53: ref;
  var $i54: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p62: ref;
  var $i63: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i79: i32;
  var $i75: i32;
  var $i28: i32;
  var $i16: i32;
  var $i5: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i2 := $M.25;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(84, 1)), $i2);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i3 := pci_enable_device($p0);
    call {:si_unique_call 982} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($u1, 0);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i11 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 986} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i18 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 990} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_79 := pci_set_consistent_dma_mask($p0, 4294967295);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i22 := pci_request_regions($p0, .str.22);
    call {:si_unique_call 994} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} pci_set_master($p0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p25 := alloc_etherdev_mqs(12592, 1, 1);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p29);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p25);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} pci_set_drvdata($p0, $p32);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p33 := netdev_priv($p25);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p25);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p0);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i17, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    call {:si_unique_call 1003} {:cexpr "mmio_start"} boogie_si_record_i64($i45);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i50 == 1);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i54, $i58);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i59 == 1);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p71 := ioremap($i45, $i70);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} slic_config_pci($p0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} slic_init_driver();
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} slic_init_adapter($p25, $p0, $p1, $p71, $u1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i76 := slic_card_locate($p34);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 1011} {:cexpr "tmp___2"} boogie_si_record_i32($i76);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p34, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p34, $mul.ref(0, 12592)), $mul.ref(244, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i90 := slic_card_init($p81, $p34);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 1015} {:cexpr "err"} boogie_si_record_i32($i90);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} slic_adapter_set_hwaddr($p34);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p71);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p93, $i92);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p34, $mul.ref(0, 12592)), $mul.ref(228, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, slic_netdev_ops);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_80 := strcpy($p99, .str.26);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i101 := ldv_register_netdev_43($p25);
    call {:si_unique_call 1019} {:cexpr "err"} boogie_si_record_i32($i101);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb48:
    assume $i102 == 1;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} dev_err.ref.ref($p103, .str.27);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i79 := $i101;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} iounmap($p71);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i75 := $i79;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ldv_free_netdev_44($p25);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i28 := $i75;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} pci_release_regions($p0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} pci_disable_device($p0);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb45:
    assume $i91 == 1;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i79 := $i90;
    goto $bb40;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i84 == 1;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p81, $mul.ref(0, 768)), $mul.ref(24, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 1);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p81, $mul.ref(0, 768)), $mul.ref(24, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p34, $mul.ref(0, 12592)), $mul.ref(244, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 1);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i77 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} dev_err.ref.ref($p78, .str.25);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i79 := $i76;
    goto $bb40;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} dev_err.ref.ref.i64.i64($p74, .str.24, $i70, $i45);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32(0, 12);
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i68 := $sub.i64($i63, $i67);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb29;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i40 := $or.i64($i39, 32);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i27 == 1;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb23;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} dev_err.ref.ref($p24, .str.23);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb12;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} dev_err.ref.ref($p20, .str.21);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb12;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i13 := pci_set_consistent_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 988} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb14;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} dev_err.ref.ref($p15, .str.20);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb12;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p8 := $M.26;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} _dev_info.ref.ref.ref($p7, .str.19, $p8);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p10 := $M.27;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} _dev_info.ref.ref.ref($p9, .str.19, $p10);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const slic_entry_remove: ref;

axiom slic_entry_remove == $sub.ref(0, 291359);

procedure slic_entry_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.3, $M.5, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17;



implementation slic_entry_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p9: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p37: ref;
  var $p44: ref;
  var $p36: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $p3 := netdev_priv($p2);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ldv_unregister_netdev_41($p2);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} slic_adapter_freeresources($p4);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} slic_unmap_mmio_space($p4);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(336, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 768)), $mul.ref(24, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 768)), $mul.ref(24, 1));
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 12592)), $mul.ref(244, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 768)), $mul.ref(24, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_free_netdev_42($p2);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} pci_release_regions($p0);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} pci_disable_device($p0);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(88, 1)));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p16);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i26, $i27);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p16);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i33, $i34);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p36 := $p25;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p16, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p36, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p46);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(72, 1)));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i48, 1);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(72, 1)), $i49);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} slic_card_cleanup($p16);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p37 := $p25;
    goto $bb17;

  $bb17:
    call $p38, $p39, $p40, $p41, $i42, $i43, $p37, $p44 := slic_entry_remove_loop_$bb17($i34, $p38, $p39, $p40, $p41, $i42, $i43, $p37, $p44);
    goto $bb17_last;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i34);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p36 := $p44;
    goto $bb16;

  $bb19:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p37 := $p39;
    goto $bb19_dummy;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(88, 1)), $p30);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $i13, $i14, $p9 := slic_entry_remove_loop_$bb4($p10, $p11, $p12, $i13, $i14, $p9);
    goto $bb4_last;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p9);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} kfree($p12);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p11);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p11;
    goto $bb6_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7174;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7125;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 292391);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_unregister_netdev_41: ref;

axiom ldv_unregister_netdev_41 == $sub.ref(0, 293423);

procedure ldv_unregister_netdev_41($p0: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_unregister_netdev_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} unregister_netdev($p0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    return;
}



const slic_unmap_mmio_space: ref;

axiom slic_unmap_mmio_space == $sub.ref(0, 294455);

procedure slic_unmap_mmio_space($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_unmap_mmio_space($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} iounmap($p7);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_card_cleanup: ref;

axiom slic_card_cleanup == $sub.ref(0, 295487);

procedure slic_card_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.5, $M.7, $M.9;



implementation slic_card_cleanup($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(192, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} kfree($p7);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(192, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(64, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_81 := ldv_del_timer_sync_40($p5);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_netdev_42: ref;

axiom ldv_free_netdev_42 == $sub.ref(0, 296519);

procedure ldv_free_netdev_42($p0: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_free_netdev_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} free_netdev($p0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1038} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 297551);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 298583);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 299615);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_40: ref;

axiom ldv_del_timer_sync_40 == $sub.ref(0, 300647);

procedure ldv_del_timer_sync_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_sync_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1040} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} disable_suitable_timer_3($p0);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 301679);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 302711);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 303743);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 304775);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 305807);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1045} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 306839);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 307871);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 1048} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_consistent_dma_mask: ref;

axiom pci_set_consistent_dma_mask == $sub.ref(0, 308903);

procedure pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "pci_set_consistent_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i3 := dma_set_coherent_mask($p2, $i1);
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 309935);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1052} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1053} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 310967);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 311999);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1055} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1056} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p3 := external_alloc();
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 313031);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} dev_set_drvdata($p2, $p1);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 314063);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 1060} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const slic_config_pci: ref;

axiom slic_config_pci == $sub.ref(0, 315095);

procedure slic_config_pci($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation slic_config_pci($p0: ref)
{
  var $p1: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i16;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_82 := pci_read_config_word($p0, 4, $p1);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.29, $p1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 854);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    call {:si_unique_call 1064} {:cexpr "new_command"} boogie_si_record_i16($i6);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.29, $p1);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i6);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i8, $i9);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i6);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_83 := pci_write_config_word($p0, 4, $i12);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_init_driver: ref;

axiom slic_init_driver == $sub.ref(0, 316127);

procedure slic_init_driver();
  free requires assertsPassed;
  modifies $M.30, $CurrAddr;



implementation slic_init_driver()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var vslice_dummy_var_84: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i1 := $M.30;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1067} {:cexpr "slic_first_init"} boogie_si_record_i32(0);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_84 := spinlock_check(slic_global);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __raw_spin_lock_init(slic_global, .str.30, $p0);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const slic_init_adapter: ref;

axiom slic_init_adapter == $sub.ref(0, 317159);

procedure slic_init_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation slic_init_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i16;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p78: ref;
  var $i79: i16;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: ref;
  var vslice_dummy_var_87: ref;
  var vslice_dummy_var_88: ref;
  var vslice_dummy_var_89: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1075} {:cexpr "slic_init_adapter:arg:chip_idx"} boogie_si_record_i32($i4);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p10 := netdev_priv($p0);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(220, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i14);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $i18);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(224, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1728)), $mul.ref(216, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(208, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 3);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 31);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(212, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 7);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(216, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p3);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(228, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(44, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i4);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(16, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(16, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(36, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(632, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} vslice_dummy_var_85 := spinlock_check($p49);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(632, 1)), $mul.ref(0, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} __raw_spin_lock_init($p53, .str.31, $p5);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(704, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_86 := spinlock_check($p54);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __raw_spin_lock_init($p58, .str.32, $p6);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(56, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_87 := spinlock_check($p59);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __raw_spin_lock_init($p63, .str.33, $p7);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(128, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_88 := spinlock_check($p64);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} __raw_spin_lock_init($p68, .str.34, $p8);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(12088, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_89 := spinlock_check($p69);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(12088, 1)), $mul.ref(0, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __raw_spin_lock_init($p73, .str.35, $p9);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(40, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 1);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(1800, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(1, 40));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p78, $i79 := $p77, 1;
    goto $bb1;

  $bb1:
    call $p81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $p78, $i79 := slic_init_adapter_loop_$bb1($p11, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $p78, $i79);
    goto $bb1_last;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p78, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, $i79);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p78, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, 0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p78, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p86);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p78);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i79);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    call {:si_unique_call 1087} {:cexpr "index"} boogie_si_record_i16($i91);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p78, $mul.ref(1, 40));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i91);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i94 := $ule.i32($i93, 255);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p98 := pci_alloc_consistent($p96, 112, $p97);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p98);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i104 == 1;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p11, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 1089} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p107, 0, 112, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $p78, $i79 := $p92, $i91;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7391;
}



const slic_card_locate: ref;

axiom slic_card_locate == $sub.ref(0, 318191);

procedure slic_card_locate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation slic_card_locate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p43: ref;
  var $p54: ref;
  var $p42: ref;
  var $p49: ref;
  var $p39: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p75: ref;
  var $p100: ref;
  var $p74: ref;
  var $p85: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p113: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $p126: ref;
  var $p127: ref;
  var $i9: i32;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(88, 1)));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(96, 1)));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64(5460);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 2));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i16 := readw($p15);
    call {:si_unique_call 1091} {:cexpr "card_hostid"} boogie_si_record_i16($i16);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 65535);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p42 := $p1;
    assume {:branchcond $i41} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p49 := $p42;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p39 := $p49;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p39);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(16, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 768)), $mul.ref(296, 1)), $mul.ref($i59, 8));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p39, $mul.ref(0, 768)), $mul.ref(16, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 1);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p2);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p74 := $p2;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p85 := $p74;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p85);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i102 == 1);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p85, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 1);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p85, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    assume {:verifier.code 0} true;
    $p113 := $p85;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p113, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i119, 1);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(32, 1));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, $i120);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(32, 1));
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p113, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i124, 8));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p0);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(24, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $p113);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb11;

  $bb69:
    assume $i102 == 1;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p103 := kmalloc(48, 32);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(96, 1)));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p104, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p110);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(96, 1)), $p103);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p104, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 1);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p113 := $p103;
    goto $bb77;

  $bb71:
    assume $i106 == 1;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i16);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 65535);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb11;

  $bb73:
    assume $i108 == 1;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p39);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} kfree($p109);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i73 == 1;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p75 := $p2;
    goto $bb48;

  $bb48:
    call $p77, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i86, $p88, $p89, $p90, $i91, $p92, $i93, $i94, $p95, $p96, $p97, $i98, $i99, $p75, $p100, $p129, $p130, $i131, $i132, $p134, $p135, $i136, $i137, $p139, $p140, $i141, $i142 := slic_card_locate_loop_$bb48($p0, $p77, $p78, $i79, $i80, $i81, $i82, $i83, $p84, $i86, $p88, $p89, $p90, $i91, $p92, $i93, $i94, $p95, $p96, $p97, $i98, $i99, $p75, $p100, $p129, $p130, $i131, $i132, $p134, $p135, $i136, $i137, $p139, $p140, $i141, $i142);
    goto $bb48_last;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i81 := 0;
    assume true;
    goto $bb52, $bb54;

  $bb54:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i81 := 1;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i81 := 2;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(3, 8));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i81 := 3;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i82 := 4;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 4);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p84 := $p75;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i82);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref($i86, 8));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 12592)), $mul.ref(212, 1));
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(212, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i91, $i93);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p95 := $p75;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p100 := $p97;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p74 := $p100;
    goto $bb47;

  $bb66:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $p75 := $p97;
    goto $bb66_dummy;

  $bb63:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p85 := $p95;
    goto $bb61;

  $bb59:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p85 := $p84;
    goto $bb61;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb55;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb53;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb53;

  $bb42:
    assume $i64 == 1;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(16, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 768)), $mul.ref(296, 1)), $mul.ref($i67, 8));
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p0);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p39);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i56 == 1;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb11;

  $bb27:
    assume $i41 == 1;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p43 := $p1;
    goto $bb30;

  $bb30:
    call $p44, $i45, $i46, $i47, $p48, $p50, $p51, $i52, $i53, $p43, $p54 := slic_card_locate_loop_$bb30($i16, $p44, $i45, $i46, $i47, $p48, $p50, $p51, $i52, $i53, $p43, $p54);
    goto $bb30_last;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 768)), $mul.ref(12, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i16);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i45, $i46);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p48 := $p43;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p54 := $p51;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p42 := $p54;
    goto $bb29;

  $bb36:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p51;
    goto $bb36_dummy;

  $bb32:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p49 := $p48;
    goto $bb34;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p19 := kmalloc(768, 208);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(88, 1)));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(88, 1)), $p19);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(208, 1));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 768)), $mul.ref(0, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(212, 1));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p20, $mul.ref(0, 768)), $mul.ref(4, 1));
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(0, 4)));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i33 := 0;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(1, 4)));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i33 := 1;
    assume {:branchcond $i144} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(2, 4)));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 0);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i33 := 2;
    assume {:branchcond $i146} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(3, 4)));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i33 := 3;
    assume {:branchcond $i148} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(4, 4)));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 0);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i33 := 4;
    assume {:branchcond $i150} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(5, 4)));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i33 := 5;
    assume {:branchcond $i152} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(6, 4)));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i33 := 6;
    assume {:branchcond $i154} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(7, 4)));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i33 := 7;
    assume {:branchcond $i156} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(8, 4)));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i33 := 8;
    assume {:branchcond $i158} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(9, 4)));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i33 := 9;
    assume {:branchcond $i160} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(10, 4)));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i33 := 10;
    assume {:branchcond $i162} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(11, 4)));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i33 := 11;
    assume {:branchcond $i164} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(12, 4)));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i33 := 12;
    assume {:branchcond $i166} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(13, 4)));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i33 := 13;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(14, 4)));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i33 := 14;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(15, 4)));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i33 := 15;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(16, 4)));
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i33 := 16;
    assume {:branchcond $i174} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(17, 4)));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 0);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i33 := 17;
    assume {:branchcond $i176} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(18, 4)));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i33 := 18;
    assume {:branchcond $i178} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(19, 4)));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 0);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i33 := 19;
    assume {:branchcond $i180} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(20, 4)));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i33 := 20;
    assume {:branchcond $i182} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(21, 4)));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i33 := 21;
    assume {:branchcond $i184} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(22, 4)));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 0);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i33 := 22;
    assume {:branchcond $i186} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(23, 4)));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i33 := 23;
    assume {:branchcond $i188} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(24, 4)));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i33 := 24;
    assume {:branchcond $i190} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(25, 4)));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i33 := 25;
    assume {:branchcond $i192} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(26, 4)));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i33 := 26;
    assume {:branchcond $i194} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(27, 4)));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i33 := 27;
    assume {:branchcond $i196} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(28, 4)));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i33 := 28;
    assume {:branchcond $i198} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(29, 4)));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i33 := 29;
    assume {:branchcond $i200} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(30, 4)));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 0);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i33 := 30;
    assume {:branchcond $i202} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(31, 4)));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i33 := 31;
    assume {:branchcond $i204} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(72, 1)));
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(72, 1)), $i38);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p39 := $p19;
    goto $bb26;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    $p35 := $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref($i34, 4));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref(0, 768)), $mul.ref(12, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i33);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb20;

  $bb201:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb20;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb20;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb20;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb20;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb20;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb20;

  $bb177:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb20;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb20;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb20;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb20;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb20;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb20;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb20;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb20;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb20;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb20;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb20;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb20;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb20;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb20;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb20;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb20;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb20;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb20;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb20;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb20;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb20;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb20;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb20;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb11;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb66_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7541;

  $bb36_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;
}



const slic_card_init: ref;

axiom slic_card_init == $sub.ref(0, 319223);

procedure slic_card_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.37, $M.38, $CurrAddr, assertsPassed;



implementation slic_card_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i77: i32;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i16;
  var $p94: ref;
  var $i95: i16;
  var $p96: ref;
  var $p98: ref;
  var $i99: i8;
  var $p100: ref;
  var $p107: ref;
  var $i108: i16;
  var $p109: ref;
  var $i110: i16;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i8;
  var $p117: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $i128: i16;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $p139: ref;
  var $i140: i1;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $i141: i32;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $p163: ref;
  var $i164: i8;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i50: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i9: i32;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(16, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1096} {:cexpr "macaddrs"} boogie_si_record_i32($i6);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} slic_soft_reset($p1);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i7 := slic_card_download($p1);
    call {:si_unique_call 1099} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(196, 1));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i174 := slic_card_download_gbrcv($p1);
    call {:si_unique_call 1141} {:cexpr "status"} boogie_si_record_i32($i174);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(84, 1)));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i177 == 1);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i178 := $M.32;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} slic_intagg_set($p1, $i178);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(52, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, 7340032);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, 1);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(48, 1));
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 0);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb66:
    assume $i177 == 1;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} slic_intagg_set($p1, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i175 == 1;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i9 := $i174;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $p15 := pci_alloc_consistent($p14, 128, $p2);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.31, $p2);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 1101} {:cexpr "phys_configl"} boogie_si_record_i32($i18);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.31, $p2);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i64($i19, 32);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    call {:si_unique_call 1102} {:cexpr "phys_configh"} boogie_si_record_i32($i21);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p16);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1104} cmdloc_dummy_var_32 := $memset.i8(cmdloc_dummy_var_31, $p27, 0, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} slic_reg32_write($p29, 0, 1);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb10, $bb11;

  $bb11:
    assume !(1 == 1);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(272, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_spin_lock();
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i64($i36, 32);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} slic_reg32_write($p34, $i38, 0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(16, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p32, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} slic_reg32_write($p40, $i43, 1);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(704, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} spin_unlock_irqrestore($p44, $u0);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i45 := slic_config_get($p1, $i18, $i21);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 1112} {:cexpr "status"} boogie_si_record_i32($i45);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb20;

  $bb20:
    call $i51, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $p72, $p73, $p74, $p75, $p76, $i78, $i79, $i77 := slic_card_init_loop_$bb20($p1, $p4, $i51, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $p72, $p73, $p74, $p75, $p76, $i78, $i79, $i77);
    goto $bb20_last;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb28, $bb29;

  $bb29:
    assume !(1 == 1);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i51, 1);
    call {:si_unique_call 1121} {:cexpr "i"} boogie_si_record_i32($i78);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i79 := $ugt.i32($i78, 5000);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i77 := $i78;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i51 := $i77;
    goto corral_source_split_7848_dummy;

  $bb34:
    assume $i79 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} dev_err.ref.ref($p82, .str.38);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(16, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} slic_reg64_write($p1, $p84, 0, $p86, 0, 1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p16);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i185 := $load.i64($M.31, $p2);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} pci_free_consistent($p183, 128, $p184, $i185);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i9 := $i50;
    goto $bb3;

  $bb28:
    assume 1 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 268435456);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} slic_reg32_write($p76, 0, 1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i77 := $i51;
    goto $bb27;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(16, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} slic_reg64_write($p1, $p67, 0, $p69, 0, 1);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} slic_reg32_write($p71, 0, 1);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} slic_upr_request_complete($p1, 0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p16, $mul.ref(0, 128)), $mul.ref(2, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    call {:si_unique_call 1128} {:cexpr "eecodesize"} boogie_si_record_i16($i108);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p16, $mul.ref(0, 128)), $mul.ref(38, 1));
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    call {:si_unique_call 1129} {:cexpr "dramsize"} boogie_si_record_i16($i110);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p16, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p16, $mul.ref(0, 128)), $mul.ref(70, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    call {:si_unique_call 1130} {:cexpr "fruformat"} boogie_si_record_i8($i116);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p16, $mul.ref(0, 128)), $mul.ref(71, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i101, $i102, $i103, $p104, $i105, $p106 := $i108, $i6, $i110, $p111, $i116, $p117;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i101);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i121 := $ule.i32($i120, 128);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(2, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p139, $i103);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i140 := $ult.i32(0, $i102);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(28, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, $i105);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(29, 1));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p106);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 1136} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p156, $p157, 25, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p16);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i161 := $load.i64($M.31, $p2);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} pci_free_consistent($p159, 128, $p160, $i161);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i164);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i165 == 1);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(16, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p4, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} slic_reg64_write($p1, $p167, 0, $p169, 0, 1);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} dev_err.ref.ref($p172, .str.39);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb59:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(196, 1));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, 1);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb51:
    assume $i140 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i141 := 0;
    goto $bb54;

  $bb54:
    call $p143, $p144, $i145, $p146, $p147, $i148, $p149, $i150, $i151, $i141, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35 := slic_card_init_loop_$bb54($p0, $i102, $p104, $p143, $p144, $i145, $p146, $p147, $i148, $p149, $i150, $i151, $i141, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35);
    goto $bb54_last;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(4, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i141);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p144, $mul.ref($i145, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p104);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i148 := $zext.i32.i64($i141);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p147, $mul.ref($i148, 1));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1134} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p146, $p149, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i141, 1);
    call {:si_unique_call 1135} {:cexpr "i"} boogie_si_record_i32($i150);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i151 := $ult.i32($i150, $i102);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i151 == 1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb56:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i141 := $i150;
    goto $bb56_dummy;

  $bb42:
    assume $i121 == 1;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i101);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i123 := $ugt.i32($i122, 97);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb44;

  $bb45:
    assume $i123 == 1;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p16);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i64($i101);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, $sub.i64(0, 2));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p124, $mul.ref($i126, 2));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.0, $p127);
    call {:si_unique_call 1131} {:cexpr "ee_chksum"} boogie_si_record_i16($i128);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p16);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i101);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, $sub.i32(0, 2));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i132 := slic_eeprom_cksum($p129, $i131);
    call {:si_unique_call 1133} {:cexpr "calc_chksum"} boogie_si_record_i16($i132);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i128);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i132);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i133, $i134);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i135 == 1;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, 1);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume $i90 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p16);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 128)), $mul.ref(2, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    call {:si_unique_call 1125} {:cexpr "eecodesize"} boogie_si_record_i16($i93);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p91, $mul.ref(0, 128)), $mul.ref(52, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    call {:si_unique_call 1126} {:cexpr "dramsize"} boogie_si_record_i16($i95);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p91, $mul.ref(0, 128)), $mul.ref(58, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p91, $mul.ref(0, 128)), $mul.ref(70, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    call {:si_unique_call 1127} {:cexpr "fruformat"} boogie_si_record_i8($i99);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p91, $mul.ref(0, 128)), $mul.ref(71, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i101, $i102, $i103, $p104, $i105, $p106 := $i93, 2, $i95, $p96, $i99, $p100;
    goto $bb40;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} dev_err.ref.ref($p49, .str.37);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i50 := $i45;
    goto $bb18;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb10:
    assume 1 == 1;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} dev_err.ref.ref($p26, .str.36);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb56_dummy:
    assume false;
    return;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7927;

  corral_source_split_7848_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7805;
}



const slic_adapter_set_hwaddr: ref;

axiom slic_adapter_set_hwaddr == $sub.ref(0, 320255);

procedure slic_adapter_set_hwaddr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation slic_adapter_set_hwaddr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(196, 1));
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(304, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(216, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(4, 1)), $mul.ref($i14, 6)), $mul.ref(0, 1));
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 1144} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p11, $p19, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(310, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i22 := is_zero_ether_addr($p21);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 1146} {:cexpr "tmp"} boogie_si_record_i8($i23);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(310, 1));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 1148} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p36, $p38, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(310, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(304, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 1147} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p26, $p28, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 321287);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const ldv_register_netdev_43: ref;

axiom ldv_register_netdev_43 == $sub.ref(0, 322319);

procedure ldv_register_netdev_43($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.33, $M.0, $CurrAddr;



implementation ldv_register_netdev_43($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i1 := register_netdev($p0);
    call {:si_unique_call 1150} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1151} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} ldv_net_device_ops_5();
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_netdev_44: ref;

axiom ldv_free_netdev_44 == $sub.ref(0, 323351);

procedure ldv_free_netdev_44($p0: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_free_netdev_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} free_netdev($p0);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 324383);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1155} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1156} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_5: ref;

axiom ldv_net_device_ops_5 == $sub.ref(0, 325415);

procedure ldv_net_device_ops_5();
  free requires assertsPassed;
  modifies $M.33, $M.0, $CurrAddr;



implementation ldv_net_device_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 326447);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p1 := calloc(1, $i0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1160} __VERIFIER_assume($i4);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const slic_soft_reset: ref;

axiom slic_soft_reset == $sub.ref(0, 327479);

procedure slic_soft_reset($p0: ref);
  free requires assertsPassed;



implementation slic_soft_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(8, 1));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} slic_reg32_write($p13, 57005, 1);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb10, $bb11;

  $bb11:
    assume !(1 == 1);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume 1 == 1;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} __const_udelay(4295000);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(232, 1));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} slic_reg32_write($p9, 0, 1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __const_udelay(4295000);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const slic_card_download: ref;

axiom slic_card_download == $sub.ref(0, 328511);

procedure slic_card_download($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.38, $CurrAddr;



implementation slic_card_download($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i32: i32;
  var $i33: i32;
  var $i46: i32;
  var $i31: i32;
  var $i47: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i49: i32;
  var $i50: i32;
  var $i63: i32;
  var $i48: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i114: i32;
  var $i115: i32;
  var $i84: i32;
  var $i85: i32;
  var $i116: i32;
  var $i117: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i118: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i168: i32;
  var $i138: i32;
  var $i132: i32;
  var $i169: i32;
  var $i170: i1;
  var $i119: i32;
  var $i120: i32;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 2);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p12 := .str.41;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i17 := request_firmware($p1, $p12, $p16);
    call {:si_unique_call 1171} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.34, $p1);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.35, $p23);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64(0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 4));
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.36, $p27);
    call {:si_unique_call 1173} {:cexpr "numsects"} boogie_si_record_i32($i28);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i29 := $add.i32(0, 4);
    call {:si_unique_call 1174} {:cexpr "index"} boogie_si_record_i32($i29);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i30 := $ult.i32(0, $i28);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32(0, $i28);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i48 := $i31;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.34, $p1);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.35, $p65);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i48);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 4));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.36, $p69);
    call {:si_unique_call 1179} {:cexpr "instruction"} boogie_si_record_i32($i70);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i48, 4);
    call {:si_unique_call 1180} {:cexpr "index"} boogie_si_record_i32($i71);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i72 := $ult.i32(0, $i28);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i118 := $ult.i32(0, $i28);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.34, $p1);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} release_firmware($p171);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __const_udelay(4295000);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} __const_udelay(4295000);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} __const_udelay(4295000);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} __const_udelay(4295000);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __const_udelay(4295000);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} __const_udelay(4295000);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} __const_udelay(4295000);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} __const_udelay(4295000);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} __const_udelay(4295000);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} slic_reg32_write($p173, $sub.i32(0, 2147483648), 1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __const_udelay(4295000);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(4295000);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} __const_udelay(4295000);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __const_udelay(4295000);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} __const_udelay(4295000);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __const_udelay(4295000);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} __const_udelay(4295000);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(4295000);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} __const_udelay(4295000);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(4295000);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} __const_udelay(4295000);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __const_udelay(4295000);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} __const_udelay(4295000);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __const_udelay(4295000);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} __const_udelay(4295000);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(4295000);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} __const_udelay(4295000);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} __const_udelay(4295000);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} __const_udelay(4295000);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb47:
    assume $i118 == 1;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i119, $i120 := 0, $i48;
    goto $bb50;

  $bb50:
    call $p121, $p122, $p123, $p124, $i125, $p126, $i127, $i128, $p129, $i130, $i131, $i133, $p134, $i135, $i136, $i137, $p142, $p143, $i144, $i145, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $p153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $p163, $i164, $i165, $i166, $i167, $i139, $i140, $i141, $i168, $i138, $i132, $i169, $i170, $i119, $i120 := slic_card_download_loop_$bb50($p1, $p2, $p3, $p5, $i28, $p121, $p122, $p123, $p124, $i125, $p126, $i127, $i128, $p129, $i130, $i131, $i133, $p134, $i135, $i136, $i137, $p142, $p143, $i144, $i145, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $p153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $p163, $i164, $i165, $i166, $i167, $i139, $i140, $i141, $i168, $i138, $i132, $i169, $i170, $i119, $i120);
    goto $bb50_last;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.34, $p1);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.35, $p122);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i120);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p124, $mul.ref($i125, 4));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.36, $p126);
    call {:si_unique_call 1192} {:cexpr "instruction"} boogie_si_record_i32($i127);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i119);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref($i128, 4));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.38, $p129);
    call {:si_unique_call 1193} {:cexpr "baseaddress"} boogie_si_record_i32($i130);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i131 := $ule.i32($i130, 32767);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i119);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref($i133, 4));
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.37, $p134);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i136 := $lshr.i32($i135, 3);
    call {:si_unique_call 1195} {:cexpr "thissectionsize"} boogie_si_record_i32($i136);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32(0, $i136);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i138 := $i120;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i132 := $i138;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i119, 1);
    call {:si_unique_call 1194} {:cexpr "section"} boogie_si_record_i32($i169);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i170 := $ult.i32($i169, $i28);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i170 == 1);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb64:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    $i119, $i120 := $i169, $i132;
    goto $bb64_dummy;

  $bb56:
    assume $i137 == 1;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i139, $i140, $i141 := 0, $i120, $i127;
    goto $bb59;

  $bb59:
    call $p142, $p143, $i144, $i145, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $p153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $p163, $i164, $i165, $i166, $i167, $i139, $i140, $i141, $i168 := slic_card_download_loop_$bb59($p1, $p5, $i130, $i136, $p142, $p143, $i144, $i145, $p146, $p147, $p148, $p149, $p150, $p151, $i152, $p153, $i154, $i155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $p163, $i164, $i165, $i166, $i167, $i139, $i140, $i141, $i168);
    goto $bb59_last;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i130, $i139);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i145 := $or.i32($i144, 1073741824);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} slic_reg32_write($p143, $i145, 1);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} slic_reg32_write($p147, $i141, 1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.34, $p1);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.35, $p149);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i140);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p151, $mul.ref($i152, 4));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.36, $p153);
    call {:si_unique_call 1198} {:cexpr "instruction"} boogie_si_record_i32($i154);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i140, 4);
    call {:si_unique_call 1199} {:cexpr "index"} boogie_si_record_i32($i155);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} slic_reg32_write($p157, $i154, 1);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.34, $p1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.35, $p159);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i155);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p161, $mul.ref($i162, 4));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.36, $p163);
    call {:si_unique_call 1201} {:cexpr "instruction"} boogie_si_record_i32($i164);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i165 := $add.i32($i155, 4);
    call {:si_unique_call 1202} {:cexpr "index"} boogie_si_record_i32($i165);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i139, 1);
    call {:si_unique_call 1203} {:cexpr "codeaddr"} boogie_si_record_i32($i166);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i166, $i136);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i168 := $i165;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i138 := $i168;
    goto $bb58;

  $bb61:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $i139, $i140, $i141 := $i166, $i165, $i164;
    goto $bb61_dummy;

  $bb52:
    assume $i131 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i132 := $i120;
    goto $bb54;

  $bb31:
    assume $i72 == 1;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := 0, $i71, $i70;
    goto $bb34;

  $bb34:
    call $i76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $p89, $p90, $i91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $i108, $p109, $i110, $i111, $i112, $i113, $i86, $i87, $i88, $i114, $i115, $i84, $i85, $i116, $i117, $i73, $i74, $i75 := slic_card_download_loop_$bb34($p1, $p2, $p3, $p5, $i28, $i76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $p89, $p90, $i91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $i108, $p109, $i110, $i111, $i112, $i113, $i86, $i87, $i88, $i114, $i115, $i84, $i85, $i116, $i117, $i73, $i74, $i75);
    goto $bb34_last;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i73);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref($i76, 4));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.38, $p77);
    call {:si_unique_call 1181} {:cexpr "baseaddress"} boogie_si_record_i32($i78);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i73);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref($i79, 4));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.37, $p80);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i82 := $lshr.i32($i81, 3);
    call {:si_unique_call 1182} {:cexpr "thissectionsize"} boogie_si_record_i32($i82);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32(0, $i82);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i84, $i85 := $i75, $i74;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i73, 1);
    call {:si_unique_call 1191} {:cexpr "section"} boogie_si_record_i32($i116);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i117 := $ult.i32($i116, $i28);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i117 == 1);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb44:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i116, $i85, $i84;
    goto $bb44_dummy;

  $bb36:
    assume $i83 == 1;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88 := 0, $i74, $i75;
    goto $bb39;

  $bb39:
    call $p89, $p90, $i91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $i108, $p109, $i110, $i111, $i112, $i113, $i86, $i87, $i88, $i114, $i115 := slic_card_download_loop_$bb39($p1, $p5, $i78, $i82, $p89, $p90, $i91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $p107, $i108, $p109, $i110, $i111, $i112, $i113, $i86, $i87, $i88, $i114, $i115);
    goto $bb39_last;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i78, $i86);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} slic_reg32_write($p90, $i91, 1);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} slic_reg32_write($p93, $i88, 1);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.34, $p1);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.35, $p95);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i87);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p97, $mul.ref($i98, 4));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.36, $p99);
    call {:si_unique_call 1185} {:cexpr "instruction"} boogie_si_record_i32($i100);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i87, 4);
    call {:si_unique_call 1186} {:cexpr "index"} boogie_si_record_i32($i101);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} slic_reg32_write($p103, $i100, 1);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.34, $p1);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.35, $p105);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i101);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p107, $mul.ref($i108, 4));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.36, $p109);
    call {:si_unique_call 1188} {:cexpr "instruction"} boogie_si_record_i32($i110);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i101, 4);
    call {:si_unique_call 1189} {:cexpr "index"} boogie_si_record_i32($i111);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i86, 1);
    call {:si_unique_call 1190} {:cexpr "codeaddr"} boogie_si_record_i32($i112);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, $i82);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i114, $i115 := $i110, $i111;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i84, $i85 := $i114, $i115;
    goto $bb38;

  $bb41:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i86, $i87, $i88 := $i112, $i111, $i110;
    goto $bb41_dummy;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i49, $i50 := $i31, 0;
    goto $bb26;

  $bb26:
    call $p51, $p52, $p53, $p54, $i55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i49, $i50, $i63 := slic_card_download_loop_$bb26($p1, $p3, $i28, $p51, $p52, $p53, $p54, $i55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $i49, $i50, $i63);
    goto $bb26_last;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.34, $p1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.35, $p52);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i49);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 4));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.36, $p56);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i50);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref($i58, 4));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p59, $i57);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i49, 4);
    call {:si_unique_call 1177} {:cexpr "index"} boogie_si_record_i32($i60);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i50, 1);
    call {:si_unique_call 1178} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i61, $i28);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i63 := $i60;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i48 := $i63;
    goto $bb25;

  $bb28:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i49, $i50 := $i60, $i61;
    goto $bb28_dummy;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i29, 0;
    goto $bb18;

  $bb18:
    call $p34, $p35, $p36, $p37, $i38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $i32, $i33, $i46 := slic_card_download_loop_$bb18($p1, $p2, $i28, $p34, $p35, $p36, $p37, $i38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $i32, $i33, $i46);
    goto $bb18_last;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.34, $p1);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.35, $p35);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i32);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($i38, 4));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.36, $p39);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i33);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref($i41, 4));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p42, $i40);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i32, 4);
    call {:si_unique_call 1175} {:cexpr "index"} boogie_si_record_i32($i43);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i33, 1);
    call {:si_unique_call 1176} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32($i44, $i28);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i46 := $i43;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i31 := $i46;
    goto $bb17;

  $bb20:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i32, $i33 := $i43, $i44;
    goto $bb20_dummy;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} dev_err.ref.ref.ref($p21, .str.43, $p12);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb11;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p12 := .str.42;
    goto $bb9;

  $bb61_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  $bb64_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8239;

  $bb41_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  $bb44_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8154;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8132;
}



const slic_config_get: ref;

axiom slic_config_get == $sub.ref(0, 329543);

procedure slic_config_get($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, assertsPassed;



implementation slic_config_get($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} {:cexpr "slic_config_get:arg:config"} boogie_si_record_i32($i1);
    call {:si_unique_call 1237} {:cexpr "slic_config_get:arg:config_h"} boogie_si_record_i32($i2);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i3 := slic_upr_request($p0, 3, $i1, $i2, 0, 0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 1239} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const slic_eeprom_cksum: ref;

axiom slic_eeprom_cksum == $sub.ref(0, 330575);

procedure slic_eeprom_cksum($p0: ref, $i1: i32) returns ($r: i16);
  free requires assertsPassed;



implementation slic_eeprom_cksum($p0: ref, $i1: i32) returns ($r: i16)
{
  var $i3: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i28: i32;
  var $i34: i32;
  var $i27: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} {:cexpr "slic_eeprom_cksum:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i1, 1);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $p4, $i5, $i6 := $p0, $i1, 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i5, 0);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i6;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i24, 16);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i27 := $i24;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i27);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i37 := $xor.i32($i36, $sub.i32(0, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb15;

  $bb15:
    call $i29, $i30, $i31, $i32, $i33, $i28, $i34 := slic_eeprom_cksum_loop_$bb15($i29, $i30, $i31, $i32, $i33, $i28, $i34);
    goto $bb15_last;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 65535);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i32($i28, 16);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i29, $i30);
    call {:si_unique_call 1244} {:cexpr "checksum"} boogie_si_record_i32($i31);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 16);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i27 := $i34;
    goto $bb14;

  $bb17:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i31;
    goto $bb17_dummy;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $i6);
    call {:si_unique_call 1243} {:cexpr "checksum"} boogie_si_record_i32($i23);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i7, $i8, $p9 := 0, $i1, $p0;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $i13, $i14, $i15, $i7, $i8, $p9, $p16, $i17, $i18 := slic_eeprom_cksum_loop_$bb4($p10, $i11, $i12, $i13, $i14, $i15, $i7, $i8, $p9, $p16, $i17, $i18);
    goto $bb4_last;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(1, 2));
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p9);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i7);
    call {:si_unique_call 1241} {:cexpr "checksum"} boogie_si_record_i32($i13);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i8, 2);
    call {:si_unique_call 1242} {:cexpr "len"} boogie_si_record_i32($i14);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 1);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p10, $i14, $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p4, $i5, $i6 := $p16, $i17, $i18;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8, $p9 := $i13, $i14, $p10;
    goto $bb6_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8400;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8375;
}



const slic_card_download_gbrcv: ref;

axiom slic_card_download_gbrcv == $sub.ref(0, 331607);

procedure slic_card_download_gbrcv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation slic_card_download_gbrcv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i43: i32;
  var $i44: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(288, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 2);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p10 := .str.44;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i15 := request_firmware($p1, $p10, $p14);
    call {:si_unique_call 1247} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.34, $p1);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.35, $p21);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64(0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 4));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.36, $p25);
    call {:si_unique_call 1249} {:cexpr "rcvucodelen"} boogie_si_record_i32($i26);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i27 := $add.i32(0, 4);
    call {:si_unique_call 1250} {:cexpr "index"} boogie_si_record_i32($i27);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(222, 1));
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} slic_reg32_write($p41, 1073741824, 1);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32(0, $i26);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.34, $p1);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} release_firmware($p71);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} slic_reg32_write($p73, $sub.i32(0, 2147483648), 1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb31:
    assume $i42 == 1;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i27, 0;
    goto $bb34;

  $bb34:
    call $p45, $p46, $p47, $p48, $p49, $p50, $i51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $i70, $i43, $i44 := slic_card_download_gbrcv_loop_$bb34($p1, $p3, $i26, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $i60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $i70, $i43, $i44);
    goto $bb34_last;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} slic_reg32_write($p46, $i44, 1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.34, $p1);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.35, $p48);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i43);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p50, $mul.ref($i51, 4));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.36, $p52);
    call {:si_unique_call 1255} {:cexpr "instruction"} boogie_si_record_i32($i53);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i43, 4);
    call {:si_unique_call 1256} {:cexpr "index"} boogie_si_record_i32($i54);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} slic_reg32_write($p56, $i53, 1);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.34, $p1);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.35, $p58);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i54);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p59, $mul.ref($i60, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.36, $p61);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    call {:si_unique_call 1258} {:cexpr "instruction"} boogie_si_record_i32($i63);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i54, 1);
    call {:si_unique_call 1259} {:cexpr "index"} boogie_si_record_i32($i64);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i63);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} slic_reg32_write($p66, $i68, 1);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i44, 1);
    call {:si_unique_call 1261} {:cexpr "codeaddr"} boogie_si_record_i32($i69);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i69, $i26);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i43, $i44 := $i64, $i69;
    goto $bb36_dummy;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i34 := $M.39;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i26, $i34);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.34, $p1);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} release_firmware($p36);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb11;

  $bb16:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb20;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i37 := $M.40;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i26, $i37);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i38 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.34, $p1);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} release_firmware($p39);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb11;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} dev_err.ref.ref.ref($p19, .str.43, $p10);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb11;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p10 := .str.45;
    goto $bb9;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8474;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 332639);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1264} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1265} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 333671);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    return;
}



const readw: ref;

axiom readw == $sub.ref(0, 334703);

procedure readw($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation readw($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1266} $i2 := devirtbounce.6(0, $p1);
    call {:si_unique_call 1267} {:cexpr "ret"} boogie_si_record_i16($i2);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 335735);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 1270} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_write_config_word: ref;

axiom pci_write_config_word == $sub.ref(0, 336767);

procedure pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} {:cexpr "pci_write_config_word:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 1272} {:cexpr "pci_write_config_word:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i9 := pci_bus_write_config_word($p4, $i6, $i1, $i8);
    call {:si_unique_call 1274} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pci_bus_write_config_word: ref;

axiom pci_bus_write_config_word == $sub.ref(0, 337799);

procedure pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1275} {:cexpr "pci_bus_write_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1276} {:cexpr "pci_bus_write_config_word:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1277} {:cexpr "pci_bus_write_config_word:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1278} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1279} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 338831);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1280} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1281} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1282} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1283} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 339863);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1285} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p2 := external_alloc();
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 340895);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 341927);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 1289} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 342959);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1290} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1292} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 343991);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1293} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1294} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1295} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 345023);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1297} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.41;
    call {:si_unique_call 1298} cmdloc_dummy_var_49 := $memset.i8(cmdloc_dummy_var_48, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.41 := cmdloc_dummy_var_49;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 346055);

procedure choose_timer_2();
  free requires assertsPassed;
  modifies $M.42, $M.44, $M.46, $M.48, $M.0;



implementation choose_timer_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1299} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1300} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1301} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} ldv_stop();
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i18 := $M.48;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1308} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(2);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i20 := $M.48;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p21 := $M.49;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_timer_2($i20, $p21);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i14 := $M.46;
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1306} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(2);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i16 := $M.46;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p17 := $M.47;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} ldv_timer_2($i16, $p17);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i10 := $M.44;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1304} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(2);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i12 := $M.44;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p13 := $M.45;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} ldv_timer_2($i12, $p13);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i6 := $M.42;
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1302} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(2);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i8 := $M.42;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p9 := $M.43;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ldv_timer_2($i8, $p9);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_2: ref;

axiom ldv_timer_2 == $sub.ref(0, 347087);

procedure ldv_timer_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_timer_2($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} {:cexpr "ldv_timer_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.51, $p2);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} slic_timer_load_check($i3);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 348119);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const choose_timer_3: ref;

axiom choose_timer_3 == $sub.ref(0, 349151);

procedure choose_timer_3();
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9, $M.0;



implementation choose_timer_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1315} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1317} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ldv_stop();
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 1324} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(2);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i20 := $M.9;
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p21 := $M.10;
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} ldv_timer_3($i20, $p21);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $M.7 := 2;
    call {:si_unique_call 1322} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(2);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p17 := $M.8;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} ldv_timer_3($i16, $p17);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 1320} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(2);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p13 := $M.6;
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_timer_3($i12, $p13);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i6 := $M.3;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1318} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(2);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i8 := $M.3;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p9 := $M.4;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} ldv_timer_3($i8, $p9);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_3: ref;

axiom ldv_timer_3 == $sub.ref(0, 350183);

procedure ldv_timer_3($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_timer_3($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} {:cexpr "ldv_timer_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} slic_timer_ping($i3);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 351215);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.24, assertsPassed, $CurrAddr;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1331} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1332} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1333} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1335} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1336} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1337} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1338} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} ldv_stop();
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i8 := slic_interrupt($i1, $p2);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 1341} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const timer_init_3: ref;

axiom timer_init_3 == $sub.ref(0, 352247);

procedure timer_init_3();
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation timer_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1344} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 1345} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1346} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1347} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_driver_4: ref;

axiom ldv_pci_driver_4 == $sub.ref(0, 353279);

procedure ldv_pci_driver_4();
  free requires assertsPassed;
  modifies $M.52, $M.0, $CurrAddr;



implementation ldv_pci_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 354311);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.2, $M.24, assertsPassed, $CurrAddr;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1349} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1351} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ldv_stop();
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i18 := $M.17;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i19 := $M.18;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p20 := $M.22;
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.11 := $i21;
    call {:si_unique_call 1355} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i14 := $M.15;
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i15 := $M.16;
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p16 := $M.21;
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $M.11 := $i17;
    call {:si_unique_call 1353} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i10 := $M.13;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i11 := $M.14;
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p12 := $M.20;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.11 := $i13;
    call {:si_unique_call 1357} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i7 := $M.12;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p8 := $M.19;
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.11 := $i9;
    call {:si_unique_call 1359} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 355343);

procedure timer_init_2();
  free requires assertsPassed;
  modifies $M.42, $M.44, $M.46, $M.48;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1361} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1362} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1363} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1364} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 356375);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.53, $M.54, $M.55, $M.56, $M.3, $M.5, $M.7, $M.9, $M.57, $M.42, $M.44, $M.46, $M.48, $M.58, $M.28, $M.0, $M.59, $M.11, $M.60, $M.61, $M.62, $M.17, $M.15, $M.13, $M.4, $M.6, $M.8, $M.10, $M.33, $M.43, $M.45, $M.47, $M.49, $M.12, $M.14, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.52, $M.2, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.32, $M.40, $M.39, $M.30, $M.27, $M.26, $M.25, $CurrAddr, $M.37, $M.38, $M.24, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i174: i32;
  var $i175: i32;
  var vslice_dummy_var_90: ref;
  var vslice_dummy_var_91: ref;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: ref;
  var vslice_dummy_var_101: ref;
  var vslice_dummy_var_102: ref;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    call {:si_unique_call 1365} $initialize();
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p5 := ldv_init_zalloc(40);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $p7 := ldv_init_zalloc(232);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} ldv_initialize();
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_90 := ldv_memset($p9, 0, 4);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} vslice_dummy_var_91 := ldv_memset($p11, 0, 4);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1378} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} timer_init_3();
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} timer_init_2();
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $p85, $i86, $i87, $p88, $i89, $i90, $p91, $i93, $i94, $p95, $i97, $i98, $p99, $i101, $i102, $p103, $i105, $i106, $p107, $i108, $i110, $i111, $p112, $i113, $i115, $i116, $p117, $i118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i135, $i137, $i138, $p139, $i140, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $p150, $i152, $i153, $p154, $i156, $i157, $p158, $i160, $i161, $p162, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i174, $i175, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109 := main_loop_$bb1($p0, $p1, $p3, $p4, $p6, $p8, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $p85, $i86, $i87, $p88, $i89, $i90, $p91, $i93, $i94, $p95, $i97, $i98, $p99, $i101, $i102, $p103, $i105, $i106, $p107, $i108, $i110, $i111, $p112, $i113, $i115, $i116, $p117, $i118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i135, $i137, $i138, $p139, $i140, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $p150, $i152, $i153, $p154, $i156, $i157, $p158, $i160, $i161, $p162, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i174, $i175, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} ldv_stop();
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb46_dummy;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i65 := $M.28;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb86:
    assume $i66 == 1;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1414} $i67 := __VERIFIER_nondet_int();
    call {:si_unique_call 1415} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i67);
    call {:si_unique_call 1416} {:cexpr "tmp___6"} boogie_si_record_i32($i67);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i67, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i67, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i67, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i67, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} ldv_stop();
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb97:
    assume $i72 == 1;
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i171 := $M.28;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 2);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb184:
    assume $i172 == 1;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} vslice_dummy_var_109 := ldv_ndo_uninit_5();
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i174 := $M.55;
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i175 := $sub.i32($i174, 1);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.55 := $i175;
    call {:si_unique_call 1464} {:cexpr "ref_cnt"} boogie_si_record_i32($i175);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb95:
    assume $i71 == 1;
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i164 := $M.28;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb178:
    assume $i165 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $i166 := ldv_ndo_init_5();
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.62 := $i166;
    call {:si_unique_call 1459} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i166);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i167 := $M.62;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb180:
    assume $i168 == 1;
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i169 := $M.55;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i169, 1);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $M.55 := $i170;
    call {:si_unique_call 1461} {:cexpr "ref_cnt"} boogie_si_record_i32($i170);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb93:
    assume $i70 == 1;
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i152 := $M.28;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i156 := $M.28;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 3);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i160 := $M.28;
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb175:
    assume $i161 == 1;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p162 := $M.33;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} vslice_dummy_var_108 := slic_mac_set_address($p162, $p4);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1457} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i157 == 1;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p158 := $M.33;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} vslice_dummy_var_107 := slic_mac_set_address($p158, $p4);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1455} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i153 == 1;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p154 := $M.33;
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} vslice_dummy_var_106 := slic_mac_set_address($p154, $p4);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1453} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb91:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i67, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i74 == 1);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i148 := $M.28;
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb166:
    assume $i149 == 1;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p150 := $M.33;
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} vslice_dummy_var_105 := slic_xmit_start($p8, $p150);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1451} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb102:
    assume $i74 == 1;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i142 := $M.28;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb160:
    assume $i143 == 1;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p144 := $M.33;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i145 := slic_entry_open($p144);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.61 := $i145;
    call {:si_unique_call 1448} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i145);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i146 := $M.61;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb162:
    assume $i147 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1449} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb164;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i73 == 1;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i132 := $M.28;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 3);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i137 := $M.28;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 2);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb157:
    assume $i138 == 1;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $p139 := $M.33;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.41, $p1);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_104 := eth_change_mtu($p139, $i140);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i133 == 1;
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p134 := $M.33;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.41, $p1);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_103 := eth_change_mtu($p134, $i135);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb89:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i77 == 1);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i120 := $M.28;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i124 := $M.28;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 3);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i128 := $M.28;
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb151:
    assume $i129 == 1;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p130 := $M.33;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_102 := slic_get_stats($p130);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i125 == 1;
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p126 := $M.33;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_101 := slic_get_stats($p126);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i121 == 1;
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $p122 := $M.33;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_100 := slic_get_stats($p122);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb108:
    assume $i77 == 1;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i105 := $M.28;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i110 := $M.28;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 3);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i115 := $M.28;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 2);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb142:
    assume $i116 == 1;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p117 := $M.33;
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.41, $p0);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_99 := slic_ioctl($p117, $p6, $i118);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb144;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb139:
    assume $i111 == 1;
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p112 := $M.33;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.41, $p0);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_98 := slic_ioctl($p112, $p6, $i113);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    goto $bb141;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i106 == 1;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p107 := $M.33;
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.41, $p0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_97 := slic_ioctl($p107, $p6, $i108);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i76 == 1;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i93 := $M.28;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i97 := $M.28;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 3);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i101 := $M.28;
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 2);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb133:
    assume $i102 == 1;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p103 := $M.33;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_96 := eth_validate_addr($p103);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1430} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i98 == 1;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p99 := $M.33;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_95 := eth_validate_addr($p99);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i94 == 1;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p95 := $M.33;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_94 := eth_validate_addr($p95);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1426} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb104:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i78 == 1);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i89 := $M.28;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 3);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb124:
    assume $i90 == 1;
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p91 := $M.33;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_93 := slic_entry_halt($p91);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1424} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb110:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i67, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb99;

  $bb112:
    assume $i79 == 1;
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i80 := $M.28;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i83 := $M.28;
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 3);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i86 := $M.28;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb120:
    assume $i87 == 1;
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p88 := $M.33;
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} slic_mcast_set_list($p88);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1422} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i84 == 1;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p85 := $M.33;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} slic_mcast_set_list($p85);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1420} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i81 == 1;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p82 := $M.33;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} slic_mcast_set_list($p82);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1418} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb116;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i63 := $M.58;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb83:
    assume $i64 == 1;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} choose_timer_2();
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i61 := $M.57;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb80:
    assume $i62 == 1;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} choose_timer_3();
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb3:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i44 := $M.56;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume $i45 == 1;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1401} $i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 1402} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i46);
    call {:si_unique_call 1403} {:cexpr "tmp___5"} boogie_si_record_i32($i46);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i46, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} ldv_stop();
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb55:
    assume $i48 == 1;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i54 := $M.56;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 1);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb68:
    assume $i55 == 1;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i56 := slic_module_init();
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $M.60 := $i56;
    call {:si_unique_call 1408} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i56);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i57 := $M.60;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i59 := $M.60;
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i60 == 1;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_check_final_state();
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb70:
    assume $i58 == 1;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb53:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i46, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb57;

  $bb58:
    assume $i49 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i50 := $M.56;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 3);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb60:
    assume $i51 == 1;
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i52 := $M.55;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb62;

  $bb63:
    assume $i53 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} slic_module_cleanup();
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i42 := $M.54;
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i43 == 1;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} choose_interrupt_1();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i21 := $M.53;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1388} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1389} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 1390} {:cexpr "tmp___4"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_stop();
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb25:
    assume $i26 == 1;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i39 := $M.53;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume $i40 == 1;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_92 := ldv_shutdown_4();
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i36 := $M.53;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i37 == 1;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p38 := $M.52;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} slic_entry_remove($p38);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1396} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb27;

  $bb28:
    assume $i27 == 1;
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i28 := $M.53;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i29 == 1;
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p30 := $M.52;
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i31 := slic_entry_probe($p30, $p3);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $M.59 := $i31;
    call {:si_unique_call 1392} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i31);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i32 := $M.59;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i33 == 1;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i34 := $M.55;
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $M.55 := $i35;
    call {:si_unique_call 1394} {:cexpr "ref_cnt"} boogie_si_record_i32($i35);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb46_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1387} {:cexpr "tmp___3"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 357407);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    return;
}



const ldv_shutdown_4: ref;

axiom ldv_shutdown_4 == $sub.ref(0, 358439);

procedure ldv_shutdown_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1467} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const slic_module_cleanup: ref;

axiom slic_module_cleanup == $sub.ref(0, 359471);

procedure slic_module_cleanup();
  free requires assertsPassed;
  modifies $M.53;



implementation slic_module_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_pci_unregister_driver_46(slic_driver);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    return;
}



const slic_module_init: ref;

axiom slic_module_init == $sub.ref(0, 360503);

procedure slic_module_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.53, $M.52, $CurrAddr, $M.0;



implementation slic_module_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} slic_init_driver();
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i0 := ldv___pci_register_driver_45(slic_driver, __this_module, .str.22);
    call {:si_unique_call 1472} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_5: ref;

axiom ldv_ndo_init_5 == $sub.ref(0, 361535);

procedure ldv_ndo_init_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1473} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1474} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_5: ref;

axiom ldv_ndo_uninit_5 == $sub.ref(0, 362567);

procedure ldv_ndo_uninit_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1476} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 363599);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    return;
}



const ldv___pci_register_driver_45: ref;

axiom ldv___pci_register_driver_45 == $sub.ref(0, 364631);

procedure ldv___pci_register_driver_45($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.52, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_45($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1478} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_pci_driver_4();
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 365663);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_46: ref;

axiom ldv_pci_unregister_driver_46 == $sub.ref(0, 366695);

procedure ldv_pci_unregister_driver_46($p0: ref);
  free requires assertsPassed;
  modifies $M.53;



implementation ldv_pci_unregister_driver_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} pci_unregister_driver($p0);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 367727);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 368759);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1485} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 1} true;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 369791);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 370823);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 371855);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 372887);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 373919);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 374951);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 375983);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 377015);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 378047);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 379079);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 380111);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1486} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1487} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1488} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1489} __VERIFIER_assume($i6);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 381143);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 382175);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 383207);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1490} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1491} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1492} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1493} __VERIFIER_assume($i4);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 384239);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 385271);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 386303);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 387335);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1494} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1495} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1496} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1499} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1500} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1501} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1502} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} __VERIFIER_assume($i7);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} __VERIFIER_assume($i11);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 388367);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 389399);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 390431);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 391463);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 392495);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 393527);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1505} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1506} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1507} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1508} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1509} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1510} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1511} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1512} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1513} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1514} __VERIFIER_assume($i7);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} __VERIFIER_assume($i11);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 394559);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 395591);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 396623);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 397655);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 398687);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 399719);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 400751);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 401783);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 402815);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1516} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1517} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1518} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} __VERIFIER_assume($i10);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 403847);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1520} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1521} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1522} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 404879);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1525} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 405911);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1526} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1527} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1528} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 406943);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1529} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1530} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 407975);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 409007);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1531} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1532} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 410039);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 411071);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 412103);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1533} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1534} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $p6 := malloc($i5);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 1538} cmdloc_dummy_var_51 := $memset.i8(cmdloc_dummy_var_50, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 413135);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 414167);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.17, $M.11, $M.15, $M.13, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.33, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.12, $M.14, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.28, $M.59, $M.60, $M.61, $M.62, $M.2, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.0, $M.32, $M.40, $M.39, $M.30, $M.27, $M.26, $M.25;



implementation __SMACK_static_init()
{

  $bb0:
    $M.17 := 0;
    call {:si_unique_call 1539} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1540} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1541} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1542} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.13 := 0;
    call {:si_unique_call 1543} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1544} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    $M.4 := $0.ref;
    $M.5 := 0;
    call {:si_unique_call 1545} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.7 := 0;
    call {:si_unique_call 1546} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.9 := 0;
    call {:si_unique_call 1547} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.33 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1548} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.44 := 0;
    call {:si_unique_call 1549} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.46 := 0;
    call {:si_unique_call 1550} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    $M.47 := $0.ref;
    $M.48 := 0;
    call {:si_unique_call 1551} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.49 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 1552} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 1553} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1554} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1555} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := $0.ref;
    $M.22 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1558} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1563} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1564} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1565} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1566} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1567} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 1568} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.64 := $store.i32($M.64, __mod_pci__slic_pci_tbl_device_table, 0);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i32($M.67, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i64($M.70, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i32($M.67, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i64($M.70, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i32($M.65, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i32($M.67, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i64($M.70, $add.ref($add.ref($add.ref(__mod_pci__slic_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.71 := $store.i32($M.71, slic_pci_tbl, 5018);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 5);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 5018);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 7);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.71 := $store.i32($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref(slic_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.72 := $store.ref($M.72, slic_driver, $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.22);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), slic_pci_tbl);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), slic_entry_probe);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), slic_entry_remove);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.72 := $store.i64($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(slic_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, slic_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), slic_entry_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), slic_entry_halt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), slic_xmit_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), slic_mcast_set_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), slic_mac_set_address);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), slic_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), eth_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), slic_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.32 := 100;
    call {:si_unique_call 1569} {:cexpr "intagg_delay"} boogie_si_record_i32(100);
    $M.40 := 512;
    call {:si_unique_call 1570} {:cexpr "GBRcvUCodeLen"} boogie_si_record_i32(512);
    $M.39 := 512;
    call {:si_unique_call 1571} {:cexpr "OasisRcvUCodeLen"} boogie_si_record_i32(512);
    $M.30 := 1;
    call {:si_unique_call 1572} {:cexpr "slic_first_init"} boogie_si_record_i32(1);
    $M.27 := .str.29;
    $M.26 := .str.28;
    $M.25 := 0;
    call {:si_unique_call 1573} {:cexpr "dynamic_intagg"} boogie_si_record_i32(0);
    call {:si_unique_call 1574} {:cexpr "rcv_count"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, slic_global, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(84, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(0, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(2, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(3, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(4, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(5, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(6, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(7, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(8, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(9, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(10, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(11, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(12, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(13, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(14, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(15, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(16, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(17, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(18, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(19, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(20, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(21, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(22, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(23, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(24, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(25, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(26, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(27, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(28, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(29, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(30, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(slic_global, $mul.ref(0, 232)), $mul.ref(104, 1)), $mul.ref(31, 4)), 0);
    $M.0 := $store.i8($M.0, .str.58, 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 3)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 6)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 6)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    call {:si_unique_call 1575} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 415199);

procedure devirtbounce(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 416231);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 417263);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1576} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 418295);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 419327);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 420359);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 421391);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.17, $M.11, $M.15, $M.13, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.33, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.12, $M.14, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.28, $M.59, $M.60, $M.61, $M.62, $M.2, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.0, $M.32, $M.40, $M.39, $M.30, $M.27, $M.26, $M.25, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1577} __SMACK_static_init();
    call {:si_unique_call 1578} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.41, $M.53, $M.54, $M.55, $M.56, $M.3, $M.5, $M.7, $M.9, $M.57, $M.42, $M.44, $M.46, $M.48, $M.58, $M.28, $M.0, $M.59, $M.11, $M.60, $M.61, $M.62, $M.17, $M.15, $M.13, $M.4, $M.6, $M.8, $M.10, $M.33, $M.43, $M.45, $M.47, $M.49, $M.12, $M.14, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.52, $M.2, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.32, $M.40, $M.39, $M.30, $M.27, $M.26, $M.25, $CurrAddr, $M.37, $M.38, $M.24;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation slic_mcast_set_list_loop_$bb4(in_$p2: ref, in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref, in_$i29: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref, out_$i29: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p15, out_$i29 := in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p15, in_$i29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_218;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p24;
    goto $bb10_dummy;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i18;
    assume true;
    goto $bb10;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i12);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_237;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_236;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} slic_mcast_set_bit(in_$p2, out_$p17);
    goto corral_source_split_235;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb7;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_223;

  SeqInstr_6:
    call {:si_unique_call 23} {:cexpr "status"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_222;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_$i18 := slic_mcast_add_list(in_$p2, out_$p17);
    goto SeqInstr_5;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_221;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p15, out_$i29 := slic_mcast_set_list_loop_$bb4(in_$p2, in_$i12, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p15, out_$i29);
    return;

  exit:
    return;
}



procedure slic_mcast_set_list_loop_$bb4(in_$p2: ref, in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref, in_$i29: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref, out_$i29: i32);
  modifies $M.0, assertsPassed;



implementation slic_upr_queue_request_loop_$bb10(in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p31: ref, in_$p38: ref) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p31: ref, out_$p38: ref)
{

  entry:
    out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p31, out_$p38 := in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p31, in_$p38;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  $bb12:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p31 := out_$p33;
    goto $bb12_dummy;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p33;
    assume true;
    goto $bb12;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_902;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p31, out_$p38 := slic_upr_queue_request_loop_$bb10(out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p31, out_$p38);
    return;

  exit:
    return;
}



procedure slic_upr_queue_request_loop_$bb10(in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p31: ref, in_$p38: ref) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p31: ref, out_$p38: ref);



implementation slic_mcast_add_list_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i1, in_$i10: i8, in_$i11: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i1, out_$i10: i8, out_$i11: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p6 := in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1276;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p14;
    goto $bb10_dummy;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1289;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1288;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i8.i1(out_$i10);
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i1.i8(out_$i9);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i8(out_$i10);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} out_$i9 := ether_addr_equal(out_$p8, in_$p1);
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_1279;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p6 := slic_mcast_add_list_loop_$bb4(in_$p1, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p6);
    return;

  exit:
    return;
}



procedure slic_mcast_add_list_loop_$bb4(in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$i9: i1, in_$i10: i8, in_$i11: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i1, out_$i10: i8, out_$i11: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p6: ref);



implementation slic_cmdq_getfree_loop_$bb5(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref) returns (out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26 := in_$p7, in_$i8, in_$i9, in_$p10, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} slic_cmdq_getdone(in_$p0);
    out_$p22 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1414;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb8_dummy;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p7;
    assume true;
    goto $bb8;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, in_$p2);
    goto corral_source_split_1420;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    assume true;
    goto $bb6;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_1415;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26 := slic_cmdq_getfree_loop_$bb5(in_$p0, in_$p2, out_$p7, out_$i8, out_$i9, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26);
    return;

  exit:
    return;
}



procedure slic_cmdq_getfree_loop_$bb5(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref) returns (out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref);
  modifies $M.2, $M.0;



implementation slic_cmdq_getfree_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p11: ref, in_$p10: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p31: ref) returns (out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p11: ref, out_$p10: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p31: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$p11, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p31 := in_$p7, in_$i8, in_$i9, in_$p11, in_$p10, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb15_dummy;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p32;
    assume true;
    goto $bb15;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, in_$p2);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} ldv_spin_lock();
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} slic_cmdq_addcmdpage(in_$p0, out_$p28);
    goto corral_source_split_1446;

  $bb13:
    assume out_$i30 == 1;
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p26;
    assume true;
    goto $bb13;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_$p28 := slic_cmdqmem_addpage(in_$p0);
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} spin_unlock_irqrestore(out_$p27, $u0);
    goto corral_source_split_1440;

  $bb12:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(24, 1));
    goto corral_source_split_1439;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    assume true;
    goto $bb6, $bb12;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_1415;

  $bb5:
    call out_$p7, out_$i8, out_$i9, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26 := slic_cmdq_getfree_loop_$bb5(in_$p0, in_$p2, out_$p7, out_$i8, out_$i9, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} slic_cmdq_getdone(in_$p0);
    out_$p22 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(0, 1));
    goto corral_source_split_1414;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    assume false;
    return;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p7;
    assume true;
    goto $bb8;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, in_$p2);
    goto corral_source_split_1420;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_1419;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$p11, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p31 := slic_cmdq_getfree_loop_$bb4(in_$p0, in_$p2, out_$p7, out_$i8, out_$i9, out_$p11, out_$p10, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p31);
    return;

  exit:
    return;
}



procedure slic_cmdq_getfree_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p11: ref, in_$p10: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p31: ref) returns (out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p11: ref, out_$p10: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p31: ref);
  modifies $M.2, $M.0;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation slic_cmdq_reset_loop_$bb15(in_$p0: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p42: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p42: ref)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p42 := in_$p44, in_$i45, in_$i46, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p42;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2285;

  $bb17:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p42 := out_$p53;
    goto $bb17_dummy;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p42, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p51, out_$p50);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p42, $mul.ref(0, 352)), $mul.ref(336, 1));
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p42, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, out_$i46);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 1);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_2288;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(992, 1)), $mul.ref(16, 1));
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p42 := slic_cmdq_reset_loop_$bb15(in_$p0, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p42);
    return;

  exit:
    return;
}



procedure slic_cmdq_reset_loop_$bb15(in_$p0: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p42: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p42: ref);
  modifies $M.0;



implementation slic_cmdq_reset_loop_$bb4(in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p8 := in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  $bb9:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p17;
    goto $bb9_dummy;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2256;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p8, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_2255;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} dev_kfree_skb_irq(out_$p13);
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p15, $0.ref);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p14, 0);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p8, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_2247;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_2243;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p8 := slic_cmdq_reset_loop_$bb4(out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p8);
    return;

  exit:
    return;
}



procedure slic_cmdq_reset_loop_$bb4(in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p8: ref);
  modifies $M.0;



implementation slic_rspqueue_init_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$i18: i64, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i64, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$i18: i64, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i64, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i18, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i31, out_$p32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i9 := in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$p15, in_$p16, in_$i18, in_$p20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i31, in_$p32, in_$p33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2625;

  $bb13:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i50;
    goto $bb13_dummy;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i52 := $ult.i32(out_$i50, out_$i51);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, in_$p6);
    goto corral_source_split_2672;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i9, 1);
    call {:si_unique_call 401} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} slic_reg64_write(in_$p0, out_$p41, out_$i47, out_$p49, 0, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} slic_reg32_write(out_$p33, out_$i39, 0);
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i39 := $or.i32(out_$i38, 128);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i64.i32(out_$i37);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i9);
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref(out_$i34, 8));
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 376)), $mul.ref(56, 1));
    goto corral_source_split_2653;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(0, 0);
    goto corral_source_split_2650;

  $bb7:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i9);
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref(out_$i21, 8));
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, out_$p16);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i9);
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref(out_$i18, 8));
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  SeqInstr_42:
    goto corral_source_split_2632;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$p16 := pci_zalloc_consistent(out_$p11, 4096, out_$p15);
    goto SeqInstr_41;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p13, $mul.ref(out_$i14, 8));
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    out_$p12 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1));
    goto corral_source_split_2628;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 376)), $mul.ref(248, 1));
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i47 := $or.i32(out_$i46, 128);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i64.i32(out_$i45);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i9);
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref(out_$i42, 8));
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_2662;

  $bb11:
    assume !(out_$i31 == 1);
    goto corral_source_split_2661;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i18, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i31, out_$p32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i9 := slic_rspqueue_init_loop_$bb4(in_$p0, in_$p3, in_$p6, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i18, out_$p20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i31, out_$p32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i9);
    return;

  exit:
    return;
}



procedure slic_rspqueue_init_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$i18: i64, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i64, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$i18: i64, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i64, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i9: i32);
  modifies $M.2, $M.0, assertsPassed;



implementation slic_rcvqueue_fill_loop_$bb250(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p1035: ref, in_$p1036: ref, in_$p1037: ref, in_$p1038: ref, in_$p1039: ref, in_$i1040: i64, in_$p1041: ref, in_$i1042: i64, in_$i1043: i32, in_$i1044: i64, in_$i1045: i64, in_$i1046: i32, in_$p1047: ref, in_$p1048: ref, in_$p1049: ref, in_$p1050: ref, in_$p1051: ref, in_$p1052: ref, in_$p1053: ref, in_$p1054: ref, in_$i1055: i1, in_$p1056: ref, in_$i1057: i32, in_$i1058: i32, in_$p1087: ref, in_$p1088: ref, in_$p1089: ref, in_$i1090: i32, in_$p1091: ref, in_$p1092: ref, in_$p1093: ref, in_$p1094: ref, in_$p1095: ref, in_$i1096: i32, in_$p1097: ref, in_$i1098: i64, in_$i1099: i1) returns (out_$i46: i32, out_$p1035: ref, out_$p1036: ref, out_$p1037: ref, out_$p1038: ref, out_$p1039: ref, out_$i1040: i64, out_$p1041: ref, out_$i1042: i64, out_$i1043: i32, out_$i1044: i64, out_$i1045: i64, out_$i1046: i32, out_$p1047: ref, out_$p1048: ref, out_$p1049: ref, out_$p1050: ref, out_$p1051: ref, out_$p1052: ref, out_$p1053: ref, out_$p1054: ref, out_$i1055: i1, out_$p1056: ref, out_$i1057: i32, out_$i1058: i32, out_$p1087: ref, out_$p1088: ref, out_$p1089: ref, out_$i1090: i32, out_$p1091: ref, out_$p1092: ref, out_$p1093: ref, out_$p1094: ref, out_$p1095: ref, out_$i1096: i32, out_$p1097: ref, out_$i1098: i64, out_$i1099: i1)
{

  entry:
    out_$i46, out_$p1035, out_$p1036, out_$p1037, out_$p1038, out_$p1039, out_$i1040, out_$p1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$p1047, out_$p1048, out_$p1049, out_$p1050, out_$p1051, out_$p1052, out_$p1053, out_$p1054, out_$i1055, out_$p1056, out_$i1057, out_$i1058, out_$p1087, out_$p1088, out_$p1089, out_$i1090, out_$p1091, out_$p1092, out_$p1093, out_$p1094, out_$p1095, out_$i1096, out_$p1097, out_$i1098, out_$i1099 := in_$i46, in_$p1035, in_$p1036, in_$p1037, in_$p1038, in_$p1039, in_$i1040, in_$p1041, in_$i1042, in_$i1043, in_$i1044, in_$i1045, in_$i1046, in_$p1047, in_$p1048, in_$p1049, in_$p1050, in_$p1051, in_$p1052, in_$p1053, in_$p1054, in_$i1055, in_$p1056, in_$i1057, in_$i1058, in_$p1087, in_$p1088, in_$p1089, in_$i1090, in_$p1091, in_$p1092, in_$p1093, in_$p1094, in_$p1095, in_$i1096, in_$p1097, in_$i1098, in_$i1099;
    goto $bb250, exit;

  $bb250:
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  $bb261:
    assume out_$i1099 == 1;
    assume {:verifier.code 0} true;
    out_$p1035 := out_$p1097;
    goto $bb261_dummy;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i46 := 15;
    assume true;
    goto $bb261;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i1099 := $ne.i64(out_$i1098, 0);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i1098 := $p2i.ref.i64(out_$p1097);
    goto corral_source_split_4618;

  SeqInstr_186:
    goto corral_source_split_4617;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_$p1097 := alloc_skb(2048, 32);
    goto SeqInstr_185;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i1096);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i1096 := $load.i32($M.0, out_$p1095);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p1094);
    out_$p1095 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$p1094 := $load.ref($M.0, out_$p1093);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p1092);
    out_$p1093 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$p1092 := $load.ref($M.0, out_$p1091);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i1046);
    out_$p1091 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i1043);
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p1041);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i1090);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$i1090 := $load.i32($M.0, out_$p1089);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$p1089 := $add.ref($add.ref(out_$p1035, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p1088);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$p1088 := $load.ref($M.0, out_$p1087);
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$p1087 := $add.ref($add.ref(out_$p1035, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p1035);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4599;

  $bb251:
    assume out_$i1055 == 1;
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$p1056, out_$i1057, out_$i1058 := out_$p1035, out_$i1043, out_$i1046;
    assume true;
    goto $bb251;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i1055 := $eq.i32(out_$i1043, 0);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p1054, $0.ref);
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$p1054 := $add.ref($add.ref(out_$p1053, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$p1053 := $bitcast.ref.ref(out_$p1052);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$p1052 := $add.ref($add.ref(out_$p1035, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p1051, 0);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$p1051 := $add.ref($add.ref(out_$p1050, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$p1050 := $bitcast.ref.ref(out_$p1049);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p1049 := $load.ref($M.0, out_$p1048);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p1048 := $add.ref($add.ref(out_$p1035, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p1047, 34);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$p1047 := $add.ref($add.ref(out_$p1035, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i1046 := $trunc.i64.i32(out_$i1045);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i1045 := $lshr.i64(out_$i1044, 32);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i1044 := $p2i.ref.i64(out_$p1041);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i1043 := $trunc.i64.i32(out_$i1042);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i1042 := $p2i.ref.i64(out_$p1041);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p1041 := $i2p.i64.ref(out_$i1040);
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i1040 := pci_map_single(out_$p1037, out_$p1039, 2048, 2);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$p1039 := $load.ref($M.0, out_$p1038);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$p1038 := $add.ref($add.ref(out_$p1035, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$p1037 := $load.ref($M.0, out_$p1036);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$p1036 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4574;

  $bb261_dummy:
    call {:si_unique_call 1} out_$i46, out_$p1035, out_$p1036, out_$p1037, out_$p1038, out_$p1039, out_$i1040, out_$p1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$p1047, out_$p1048, out_$p1049, out_$p1050, out_$p1051, out_$p1052, out_$p1053, out_$p1054, out_$i1055, out_$p1056, out_$i1057, out_$i1058, out_$p1087, out_$p1088, out_$p1089, out_$i1090, out_$p1091, out_$p1092, out_$p1093, out_$p1094, out_$p1095, out_$i1096, out_$p1097, out_$i1098, out_$i1099 := slic_rcvqueue_fill_loop_$bb250(in_$p0, in_$p4, out_$i46, out_$p1035, out_$p1036, out_$p1037, out_$p1038, out_$p1039, out_$i1040, out_$p1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$p1047, out_$p1048, out_$p1049, out_$p1050, out_$p1051, out_$p1052, out_$p1053, out_$p1054, out_$i1055, out_$p1056, out_$i1057, out_$i1058, out_$p1087, out_$p1088, out_$p1089, out_$i1090, out_$p1091, out_$p1092, out_$p1093, out_$p1094, out_$p1095, out_$i1096, out_$p1097, out_$i1098, out_$i1099);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb250(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p1035: ref, in_$p1036: ref, in_$p1037: ref, in_$p1038: ref, in_$p1039: ref, in_$i1040: i64, in_$p1041: ref, in_$i1042: i64, in_$i1043: i32, in_$i1044: i64, in_$i1045: i64, in_$i1046: i32, in_$p1047: ref, in_$p1048: ref, in_$p1049: ref, in_$p1050: ref, in_$p1051: ref, in_$p1052: ref, in_$p1053: ref, in_$p1054: ref, in_$i1055: i1, in_$p1056: ref, in_$i1057: i32, in_$i1058: i32, in_$p1087: ref, in_$p1088: ref, in_$p1089: ref, in_$i1090: i32, in_$p1091: ref, in_$p1092: ref, in_$p1093: ref, in_$p1094: ref, in_$p1095: ref, in_$i1096: i32, in_$p1097: ref, in_$i1098: i64, in_$i1099: i1) returns (out_$i46: i32, out_$p1035: ref, out_$p1036: ref, out_$p1037: ref, out_$p1038: ref, out_$p1039: ref, out_$i1040: i64, out_$p1041: ref, out_$i1042: i64, out_$i1043: i32, out_$i1044: i64, out_$i1045: i64, out_$i1046: i32, out_$p1047: ref, out_$p1048: ref, out_$p1049: ref, out_$p1050: ref, out_$p1051: ref, out_$p1052: ref, out_$p1053: ref, out_$p1054: ref, out_$i1055: i1, out_$p1056: ref, out_$i1057: i32, out_$i1058: i32, out_$p1087: ref, out_$p1088: ref, out_$p1089: ref, out_$i1090: i32, out_$p1091: ref, out_$p1092: ref, out_$p1093: ref, out_$p1094: ref, out_$p1095: ref, out_$i1096: i32, out_$p1097: ref, out_$i1098: i64, out_$i1099: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb234(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p967: ref, in_$p968: ref, in_$p969: ref, in_$p970: ref, in_$p971: ref, in_$i972: i64, in_$p973: ref, in_$i974: i64, in_$i975: i32, in_$i976: i64, in_$i977: i64, in_$i978: i32, in_$p979: ref, in_$p980: ref, in_$p981: ref, in_$p982: ref, in_$p983: ref, in_$p984: ref, in_$p985: ref, in_$p986: ref, in_$i987: i1, in_$p988: ref, in_$i989: i32, in_$i990: i32, in_$p1019: ref, in_$p1020: ref, in_$p1021: ref, in_$i1022: i32, in_$p1023: ref, in_$p1024: ref, in_$p1025: ref, in_$p1026: ref, in_$p1027: ref, in_$i1028: i32, in_$p1029: ref, in_$i1030: i64, in_$i1031: i1) returns (out_$i46: i32, out_$p967: ref, out_$p968: ref, out_$p969: ref, out_$p970: ref, out_$p971: ref, out_$i972: i64, out_$p973: ref, out_$i974: i64, out_$i975: i32, out_$i976: i64, out_$i977: i64, out_$i978: i32, out_$p979: ref, out_$p980: ref, out_$p981: ref, out_$p982: ref, out_$p983: ref, out_$p984: ref, out_$p985: ref, out_$p986: ref, out_$i987: i1, out_$p988: ref, out_$i989: i32, out_$i990: i32, out_$p1019: ref, out_$p1020: ref, out_$p1021: ref, out_$i1022: i32, out_$p1023: ref, out_$p1024: ref, out_$p1025: ref, out_$p1026: ref, out_$p1027: ref, out_$i1028: i32, out_$p1029: ref, out_$i1030: i64, out_$i1031: i1)
{

  entry:
    out_$i46, out_$p967, out_$p968, out_$p969, out_$p970, out_$p971, out_$i972, out_$p973, out_$i974, out_$i975, out_$i976, out_$i977, out_$i978, out_$p979, out_$p980, out_$p981, out_$p982, out_$p983, out_$p984, out_$p985, out_$p986, out_$i987, out_$p988, out_$i989, out_$i990, out_$p1019, out_$p1020, out_$p1021, out_$i1022, out_$p1023, out_$p1024, out_$p1025, out_$p1026, out_$p1027, out_$i1028, out_$p1029, out_$i1030, out_$i1031 := in_$i46, in_$p967, in_$p968, in_$p969, in_$p970, in_$p971, in_$i972, in_$p973, in_$i974, in_$i975, in_$i976, in_$i977, in_$i978, in_$p979, in_$p980, in_$p981, in_$p982, in_$p983, in_$p984, in_$p985, in_$p986, in_$i987, in_$p988, in_$i989, in_$i990, in_$p1019, in_$p1020, in_$p1021, in_$i1022, in_$p1023, in_$p1024, in_$p1025, in_$p1026, in_$p1027, in_$i1028, in_$p1029, in_$i1030, in_$i1031;
    goto $bb234, exit;

  $bb234:
    assume {:verifier.code 0} true;
    goto corral_source_split_4480;

  $bb246:
    assume out_$i1031 == 1;
    assume {:verifier.code 0} true;
    out_$p967 := out_$p1029;
    goto $bb246_dummy;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i46 := 14;
    assume true;
    goto $bb246;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$i1031 := $ne.i64(out_$i1030, 0);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i1030 := $p2i.ref.i64(out_$p1029);
    goto corral_source_split_4525;

  SeqInstr_180:
    goto corral_source_split_4524;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} out_$p1029 := alloc_skb(2048, 32);
    goto SeqInstr_179;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i1028);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i1028 := $load.i32($M.0, out_$p1027);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p1026);
    out_$p1027 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$p1026 := $load.ref($M.0, out_$p1025);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p1024);
    out_$p1025 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$p1024 := $load.ref($M.0, out_$p1023);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i978);
    out_$p1023 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i975);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p973);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i1022);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i1022 := $load.i32($M.0, out_$p1021);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$p1021 := $add.ref($add.ref(out_$p967, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p1020);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$p1020 := $load.ref($M.0, out_$p1019);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$p1019 := $add.ref($add.ref(out_$p967, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p967);
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4506;

  $bb235:
    assume out_$i987 == 1;
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$p988, out_$i989, out_$i990 := out_$p967, out_$i975, out_$i978;
    assume true;
    goto $bb235;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i987 := $eq.i32(out_$i975, 0);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p986, $0.ref);
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$p986 := $add.ref($add.ref(out_$p985, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$p985 := $bitcast.ref.ref(out_$p984);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$p984 := $add.ref($add.ref(out_$p967, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p983, 0);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$p983 := $add.ref($add.ref(out_$p982, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$p982 := $bitcast.ref.ref(out_$p981);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$p981 := $load.ref($M.0, out_$p980);
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$p980 := $add.ref($add.ref(out_$p967, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p979, 34);
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$p979 := $add.ref($add.ref(out_$p967, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i978 := $trunc.i64.i32(out_$i977);
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$i977 := $lshr.i64(out_$i976, 32);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$i976 := $p2i.ref.i64(out_$p973);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i975 := $trunc.i64.i32(out_$i974);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i974 := $p2i.ref.i64(out_$p973);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$p973 := $i2p.i64.ref(out_$i972);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} out_$i972 := pci_map_single(out_$p969, out_$p971, 2048, 2);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$p971 := $load.ref($M.0, out_$p970);
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$p970 := $add.ref($add.ref(out_$p967, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$p969 := $load.ref($M.0, out_$p968);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$p968 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4481;

  $bb246_dummy:
    call {:si_unique_call 1} out_$i46, out_$p967, out_$p968, out_$p969, out_$p970, out_$p971, out_$i972, out_$p973, out_$i974, out_$i975, out_$i976, out_$i977, out_$i978, out_$p979, out_$p980, out_$p981, out_$p982, out_$p983, out_$p984, out_$p985, out_$p986, out_$i987, out_$p988, out_$i989, out_$i990, out_$p1019, out_$p1020, out_$p1021, out_$i1022, out_$p1023, out_$p1024, out_$p1025, out_$p1026, out_$p1027, out_$i1028, out_$p1029, out_$i1030, out_$i1031 := slic_rcvqueue_fill_loop_$bb234(in_$p0, in_$p4, out_$i46, out_$p967, out_$p968, out_$p969, out_$p970, out_$p971, out_$i972, out_$p973, out_$i974, out_$i975, out_$i976, out_$i977, out_$i978, out_$p979, out_$p980, out_$p981, out_$p982, out_$p983, out_$p984, out_$p985, out_$p986, out_$i987, out_$p988, out_$i989, out_$i990, out_$p1019, out_$p1020, out_$p1021, out_$i1022, out_$p1023, out_$p1024, out_$p1025, out_$p1026, out_$p1027, out_$i1028, out_$p1029, out_$i1030, out_$i1031);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb234(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p967: ref, in_$p968: ref, in_$p969: ref, in_$p970: ref, in_$p971: ref, in_$i972: i64, in_$p973: ref, in_$i974: i64, in_$i975: i32, in_$i976: i64, in_$i977: i64, in_$i978: i32, in_$p979: ref, in_$p980: ref, in_$p981: ref, in_$p982: ref, in_$p983: ref, in_$p984: ref, in_$p985: ref, in_$p986: ref, in_$i987: i1, in_$p988: ref, in_$i989: i32, in_$i990: i32, in_$p1019: ref, in_$p1020: ref, in_$p1021: ref, in_$i1022: i32, in_$p1023: ref, in_$p1024: ref, in_$p1025: ref, in_$p1026: ref, in_$p1027: ref, in_$i1028: i32, in_$p1029: ref, in_$i1030: i64, in_$i1031: i1) returns (out_$i46: i32, out_$p967: ref, out_$p968: ref, out_$p969: ref, out_$p970: ref, out_$p971: ref, out_$i972: i64, out_$p973: ref, out_$i974: i64, out_$i975: i32, out_$i976: i64, out_$i977: i64, out_$i978: i32, out_$p979: ref, out_$p980: ref, out_$p981: ref, out_$p982: ref, out_$p983: ref, out_$p984: ref, out_$p985: ref, out_$p986: ref, out_$i987: i1, out_$p988: ref, out_$i989: i32, out_$i990: i32, out_$p1019: ref, out_$p1020: ref, out_$p1021: ref, out_$i1022: i32, out_$p1023: ref, out_$p1024: ref, out_$p1025: ref, out_$p1026: ref, out_$p1027: ref, out_$i1028: i32, out_$p1029: ref, out_$i1030: i64, out_$i1031: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb218(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p899: ref, in_$p900: ref, in_$p901: ref, in_$p902: ref, in_$p903: ref, in_$i904: i64, in_$p905: ref, in_$i906: i64, in_$i907: i32, in_$i908: i64, in_$i909: i64, in_$i910: i32, in_$p911: ref, in_$p912: ref, in_$p913: ref, in_$p914: ref, in_$p915: ref, in_$p916: ref, in_$p917: ref, in_$p918: ref, in_$i919: i1, in_$p920: ref, in_$i921: i32, in_$i922: i32, in_$p951: ref, in_$p952: ref, in_$p953: ref, in_$i954: i32, in_$p955: ref, in_$p956: ref, in_$p957: ref, in_$p958: ref, in_$p959: ref, in_$i960: i32, in_$p961: ref, in_$i962: i64, in_$i963: i1) returns (out_$i46: i32, out_$p899: ref, out_$p900: ref, out_$p901: ref, out_$p902: ref, out_$p903: ref, out_$i904: i64, out_$p905: ref, out_$i906: i64, out_$i907: i32, out_$i908: i64, out_$i909: i64, out_$i910: i32, out_$p911: ref, out_$p912: ref, out_$p913: ref, out_$p914: ref, out_$p915: ref, out_$p916: ref, out_$p917: ref, out_$p918: ref, out_$i919: i1, out_$p920: ref, out_$i921: i32, out_$i922: i32, out_$p951: ref, out_$p952: ref, out_$p953: ref, out_$i954: i32, out_$p955: ref, out_$p956: ref, out_$p957: ref, out_$p958: ref, out_$p959: ref, out_$i960: i32, out_$p961: ref, out_$i962: i64, out_$i963: i1)
{

  entry:
    out_$i46, out_$p899, out_$p900, out_$p901, out_$p902, out_$p903, out_$i904, out_$p905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p912, out_$p913, out_$p914, out_$p915, out_$p916, out_$p917, out_$p918, out_$i919, out_$p920, out_$i921, out_$i922, out_$p951, out_$p952, out_$p953, out_$i954, out_$p955, out_$p956, out_$p957, out_$p958, out_$p959, out_$i960, out_$p961, out_$i962, out_$i963 := in_$i46, in_$p899, in_$p900, in_$p901, in_$p902, in_$p903, in_$i904, in_$p905, in_$i906, in_$i907, in_$i908, in_$i909, in_$i910, in_$p911, in_$p912, in_$p913, in_$p914, in_$p915, in_$p916, in_$p917, in_$p918, in_$i919, in_$p920, in_$i921, in_$i922, in_$p951, in_$p952, in_$p953, in_$i954, in_$p955, in_$p956, in_$p957, in_$p958, in_$p959, in_$i960, in_$p961, in_$i962, in_$i963;
    goto $bb218, exit;

  $bb218:
    assume {:verifier.code 0} true;
    goto corral_source_split_4387;

  $bb230:
    assume out_$i963 == 1;
    assume {:verifier.code 0} true;
    out_$p899 := out_$p961;
    goto $bb230_dummy;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$i46 := 13;
    assume true;
    goto $bb230;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i963 := $ne.i64(out_$i962, 0);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i962 := $p2i.ref.i64(out_$p961);
    goto corral_source_split_4432;

  SeqInstr_174:
    goto corral_source_split_4431;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} out_$p961 := alloc_skb(2048, 32);
    goto SeqInstr_173;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i960);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i960 := $load.i32($M.0, out_$p959);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p958);
    out_$p959 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p958 := $load.ref($M.0, out_$p957);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p956);
    out_$p957 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p956 := $load.ref($M.0, out_$p955);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i910);
    out_$p955 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i907);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p905);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i954);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i954 := $load.i32($M.0, out_$p953);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$p953 := $add.ref($add.ref(out_$p899, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p952);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$p952 := $load.ref($M.0, out_$p951);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$p951 := $add.ref($add.ref(out_$p899, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p899);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4413;

  $bb219:
    assume out_$i919 == 1;
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$p920, out_$i921, out_$i922 := out_$p899, out_$i907, out_$i910;
    assume true;
    goto $bb219;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i919 := $eq.i32(out_$i907, 0);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p918, $0.ref);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$p918 := $add.ref($add.ref(out_$p917, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$p917 := $bitcast.ref.ref(out_$p916);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$p916 := $add.ref($add.ref(out_$p899, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p915, 0);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$p915 := $add.ref($add.ref(out_$p914, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$p914 := $bitcast.ref.ref(out_$p913);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$p913 := $load.ref($M.0, out_$p912);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$p912 := $add.ref($add.ref(out_$p899, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p911, 34);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p911 := $add.ref($add.ref(out_$p899, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i910 := $trunc.i64.i32(out_$i909);
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i909 := $lshr.i64(out_$i908, 32);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i908 := $p2i.ref.i64(out_$p905);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i907 := $trunc.i64.i32(out_$i906);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i906 := $p2i.ref.i64(out_$p905);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$p905 := $i2p.i64.ref(out_$i904);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i904 := pci_map_single(out_$p901, out_$p903, 2048, 2);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$p903 := $load.ref($M.0, out_$p902);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$p902 := $add.ref($add.ref(out_$p899, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    out_$p901 := $load.ref($M.0, out_$p900);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$p900 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4388;

  $bb230_dummy:
    call {:si_unique_call 1} out_$i46, out_$p899, out_$p900, out_$p901, out_$p902, out_$p903, out_$i904, out_$p905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p912, out_$p913, out_$p914, out_$p915, out_$p916, out_$p917, out_$p918, out_$i919, out_$p920, out_$i921, out_$i922, out_$p951, out_$p952, out_$p953, out_$i954, out_$p955, out_$p956, out_$p957, out_$p958, out_$p959, out_$i960, out_$p961, out_$i962, out_$i963 := slic_rcvqueue_fill_loop_$bb218(in_$p0, in_$p4, out_$i46, out_$p899, out_$p900, out_$p901, out_$p902, out_$p903, out_$i904, out_$p905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$p911, out_$p912, out_$p913, out_$p914, out_$p915, out_$p916, out_$p917, out_$p918, out_$i919, out_$p920, out_$i921, out_$i922, out_$p951, out_$p952, out_$p953, out_$i954, out_$p955, out_$p956, out_$p957, out_$p958, out_$p959, out_$i960, out_$p961, out_$i962, out_$i963);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb218(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p899: ref, in_$p900: ref, in_$p901: ref, in_$p902: ref, in_$p903: ref, in_$i904: i64, in_$p905: ref, in_$i906: i64, in_$i907: i32, in_$i908: i64, in_$i909: i64, in_$i910: i32, in_$p911: ref, in_$p912: ref, in_$p913: ref, in_$p914: ref, in_$p915: ref, in_$p916: ref, in_$p917: ref, in_$p918: ref, in_$i919: i1, in_$p920: ref, in_$i921: i32, in_$i922: i32, in_$p951: ref, in_$p952: ref, in_$p953: ref, in_$i954: i32, in_$p955: ref, in_$p956: ref, in_$p957: ref, in_$p958: ref, in_$p959: ref, in_$i960: i32, in_$p961: ref, in_$i962: i64, in_$i963: i1) returns (out_$i46: i32, out_$p899: ref, out_$p900: ref, out_$p901: ref, out_$p902: ref, out_$p903: ref, out_$i904: i64, out_$p905: ref, out_$i906: i64, out_$i907: i32, out_$i908: i64, out_$i909: i64, out_$i910: i32, out_$p911: ref, out_$p912: ref, out_$p913: ref, out_$p914: ref, out_$p915: ref, out_$p916: ref, out_$p917: ref, out_$p918: ref, out_$i919: i1, out_$p920: ref, out_$i921: i32, out_$i922: i32, out_$p951: ref, out_$p952: ref, out_$p953: ref, out_$i954: i32, out_$p955: ref, out_$p956: ref, out_$p957: ref, out_$p958: ref, out_$p959: ref, out_$i960: i32, out_$p961: ref, out_$i962: i64, out_$i963: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb202(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p831: ref, in_$p832: ref, in_$p833: ref, in_$p834: ref, in_$p835: ref, in_$i836: i64, in_$p837: ref, in_$i838: i64, in_$i839: i32, in_$i840: i64, in_$i841: i64, in_$i842: i32, in_$p843: ref, in_$p844: ref, in_$p845: ref, in_$p846: ref, in_$p847: ref, in_$p848: ref, in_$p849: ref, in_$p850: ref, in_$i851: i1, in_$p852: ref, in_$i853: i32, in_$i854: i32, in_$p883: ref, in_$p884: ref, in_$p885: ref, in_$i886: i32, in_$p887: ref, in_$p888: ref, in_$p889: ref, in_$p890: ref, in_$p891: ref, in_$i892: i32, in_$p893: ref, in_$i894: i64, in_$i895: i1) returns (out_$i46: i32, out_$p831: ref, out_$p832: ref, out_$p833: ref, out_$p834: ref, out_$p835: ref, out_$i836: i64, out_$p837: ref, out_$i838: i64, out_$i839: i32, out_$i840: i64, out_$i841: i64, out_$i842: i32, out_$p843: ref, out_$p844: ref, out_$p845: ref, out_$p846: ref, out_$p847: ref, out_$p848: ref, out_$p849: ref, out_$p850: ref, out_$i851: i1, out_$p852: ref, out_$i853: i32, out_$i854: i32, out_$p883: ref, out_$p884: ref, out_$p885: ref, out_$i886: i32, out_$p887: ref, out_$p888: ref, out_$p889: ref, out_$p890: ref, out_$p891: ref, out_$i892: i32, out_$p893: ref, out_$i894: i64, out_$i895: i1)
{

  entry:
    out_$i46, out_$p831, out_$p832, out_$p833, out_$p834, out_$p835, out_$i836, out_$p837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$p843, out_$p844, out_$p845, out_$p846, out_$p847, out_$p848, out_$p849, out_$p850, out_$i851, out_$p852, out_$i853, out_$i854, out_$p883, out_$p884, out_$p885, out_$i886, out_$p887, out_$p888, out_$p889, out_$p890, out_$p891, out_$i892, out_$p893, out_$i894, out_$i895 := in_$i46, in_$p831, in_$p832, in_$p833, in_$p834, in_$p835, in_$i836, in_$p837, in_$i838, in_$i839, in_$i840, in_$i841, in_$i842, in_$p843, in_$p844, in_$p845, in_$p846, in_$p847, in_$p848, in_$p849, in_$p850, in_$i851, in_$p852, in_$i853, in_$i854, in_$p883, in_$p884, in_$p885, in_$i886, in_$p887, in_$p888, in_$p889, in_$p890, in_$p891, in_$i892, in_$p893, in_$i894, in_$i895;
    goto $bb202, exit;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_4294;

  $bb214:
    assume out_$i895 == 1;
    assume {:verifier.code 0} true;
    out_$p831 := out_$p893;
    goto $bb214_dummy;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i46 := 12;
    assume true;
    goto $bb214;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i895 := $ne.i64(out_$i894, 0);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i894 := $p2i.ref.i64(out_$p893);
    goto corral_source_split_4339;

  SeqInstr_168:
    goto corral_source_split_4338;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} out_$p893 := alloc_skb(2048, 32);
    goto SeqInstr_167;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i892);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$i892 := $load.i32($M.0, out_$p891);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p890);
    out_$p891 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$p890 := $load.ref($M.0, out_$p889);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p888);
    out_$p889 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$p888 := $load.ref($M.0, out_$p887);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i842);
    out_$p887 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i839);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p837);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i886);
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i886 := $load.i32($M.0, out_$p885);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$p885 := $add.ref($add.ref(out_$p831, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p884);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$p884 := $load.ref($M.0, out_$p883);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p883 := $add.ref($add.ref(out_$p831, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p831);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4320;

  $bb203:
    assume out_$i851 == 1;
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$p852, out_$i853, out_$i854 := out_$p831, out_$i839, out_$i842;
    assume true;
    goto $bb203;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    out_$i851 := $eq.i32(out_$i839, 0);
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p850, $0.ref);
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    out_$p850 := $add.ref($add.ref(out_$p849, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$p849 := $bitcast.ref.ref(out_$p848);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$p848 := $add.ref($add.ref(out_$p831, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4313;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p847, 0);
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$p847 := $add.ref($add.ref(out_$p846, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$p846 := $bitcast.ref.ref(out_$p845);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$p845 := $load.ref($M.0, out_$p844);
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$p844 := $add.ref($add.ref(out_$p831, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p843, 34);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$p843 := $add.ref($add.ref(out_$p831, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i842 := $trunc.i64.i32(out_$i841);
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    out_$i841 := $lshr.i64(out_$i840, 32);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$i840 := $p2i.ref.i64(out_$p837);
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i839 := $trunc.i64.i32(out_$i838);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    out_$i838 := $p2i.ref.i64(out_$p837);
    goto corral_source_split_4301;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    out_$p837 := $i2p.i64.ref(out_$i836);
    goto corral_source_split_4300;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} out_$i836 := pci_map_single(out_$p833, out_$p835, 2048, 2);
    goto corral_source_split_4299;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    out_$p835 := $load.ref($M.0, out_$p834);
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$p834 := $add.ref($add.ref(out_$p831, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$p833 := $load.ref($M.0, out_$p832);
    goto corral_source_split_4296;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$p832 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4295;

  $bb214_dummy:
    call {:si_unique_call 1} out_$i46, out_$p831, out_$p832, out_$p833, out_$p834, out_$p835, out_$i836, out_$p837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$p843, out_$p844, out_$p845, out_$p846, out_$p847, out_$p848, out_$p849, out_$p850, out_$i851, out_$p852, out_$i853, out_$i854, out_$p883, out_$p884, out_$p885, out_$i886, out_$p887, out_$p888, out_$p889, out_$p890, out_$p891, out_$i892, out_$p893, out_$i894, out_$i895 := slic_rcvqueue_fill_loop_$bb202(in_$p0, in_$p4, out_$i46, out_$p831, out_$p832, out_$p833, out_$p834, out_$p835, out_$i836, out_$p837, out_$i838, out_$i839, out_$i840, out_$i841, out_$i842, out_$p843, out_$p844, out_$p845, out_$p846, out_$p847, out_$p848, out_$p849, out_$p850, out_$i851, out_$p852, out_$i853, out_$i854, out_$p883, out_$p884, out_$p885, out_$i886, out_$p887, out_$p888, out_$p889, out_$p890, out_$p891, out_$i892, out_$p893, out_$i894, out_$i895);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb202(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p831: ref, in_$p832: ref, in_$p833: ref, in_$p834: ref, in_$p835: ref, in_$i836: i64, in_$p837: ref, in_$i838: i64, in_$i839: i32, in_$i840: i64, in_$i841: i64, in_$i842: i32, in_$p843: ref, in_$p844: ref, in_$p845: ref, in_$p846: ref, in_$p847: ref, in_$p848: ref, in_$p849: ref, in_$p850: ref, in_$i851: i1, in_$p852: ref, in_$i853: i32, in_$i854: i32, in_$p883: ref, in_$p884: ref, in_$p885: ref, in_$i886: i32, in_$p887: ref, in_$p888: ref, in_$p889: ref, in_$p890: ref, in_$p891: ref, in_$i892: i32, in_$p893: ref, in_$i894: i64, in_$i895: i1) returns (out_$i46: i32, out_$p831: ref, out_$p832: ref, out_$p833: ref, out_$p834: ref, out_$p835: ref, out_$i836: i64, out_$p837: ref, out_$i838: i64, out_$i839: i32, out_$i840: i64, out_$i841: i64, out_$i842: i32, out_$p843: ref, out_$p844: ref, out_$p845: ref, out_$p846: ref, out_$p847: ref, out_$p848: ref, out_$p849: ref, out_$p850: ref, out_$i851: i1, out_$p852: ref, out_$i853: i32, out_$i854: i32, out_$p883: ref, out_$p884: ref, out_$p885: ref, out_$i886: i32, out_$p887: ref, out_$p888: ref, out_$p889: ref, out_$p890: ref, out_$p891: ref, out_$i892: i32, out_$p893: ref, out_$i894: i64, out_$i895: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb186(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p763: ref, in_$p764: ref, in_$p765: ref, in_$p766: ref, in_$p767: ref, in_$i768: i64, in_$p769: ref, in_$i770: i64, in_$i771: i32, in_$i772: i64, in_$i773: i64, in_$i774: i32, in_$p775: ref, in_$p776: ref, in_$p777: ref, in_$p778: ref, in_$p779: ref, in_$p780: ref, in_$p781: ref, in_$p782: ref, in_$i783: i1, in_$p784: ref, in_$i785: i32, in_$i786: i32, in_$p815: ref, in_$p816: ref, in_$p817: ref, in_$i818: i32, in_$p819: ref, in_$p820: ref, in_$p821: ref, in_$p822: ref, in_$p823: ref, in_$i824: i32, in_$p825: ref, in_$i826: i64, in_$i827: i1) returns (out_$i46: i32, out_$p763: ref, out_$p764: ref, out_$p765: ref, out_$p766: ref, out_$p767: ref, out_$i768: i64, out_$p769: ref, out_$i770: i64, out_$i771: i32, out_$i772: i64, out_$i773: i64, out_$i774: i32, out_$p775: ref, out_$p776: ref, out_$p777: ref, out_$p778: ref, out_$p779: ref, out_$p780: ref, out_$p781: ref, out_$p782: ref, out_$i783: i1, out_$p784: ref, out_$i785: i32, out_$i786: i32, out_$p815: ref, out_$p816: ref, out_$p817: ref, out_$i818: i32, out_$p819: ref, out_$p820: ref, out_$p821: ref, out_$p822: ref, out_$p823: ref, out_$i824: i32, out_$p825: ref, out_$i826: i64, out_$i827: i1)
{

  entry:
    out_$i46, out_$p763, out_$p764, out_$p765, out_$p766, out_$p767, out_$i768, out_$p769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$p775, out_$p776, out_$p777, out_$p778, out_$p779, out_$p780, out_$p781, out_$p782, out_$i783, out_$p784, out_$i785, out_$i786, out_$p815, out_$p816, out_$p817, out_$i818, out_$p819, out_$p820, out_$p821, out_$p822, out_$p823, out_$i824, out_$p825, out_$i826, out_$i827 := in_$i46, in_$p763, in_$p764, in_$p765, in_$p766, in_$p767, in_$i768, in_$p769, in_$i770, in_$i771, in_$i772, in_$i773, in_$i774, in_$p775, in_$p776, in_$p777, in_$p778, in_$p779, in_$p780, in_$p781, in_$p782, in_$i783, in_$p784, in_$i785, in_$i786, in_$p815, in_$p816, in_$p817, in_$i818, in_$p819, in_$p820, in_$p821, in_$p822, in_$p823, in_$i824, in_$p825, in_$i826, in_$i827;
    goto $bb186, exit;

  $bb186:
    assume {:verifier.code 0} true;
    goto corral_source_split_4201;

  $bb198:
    assume out_$i827 == 1;
    assume {:verifier.code 0} true;
    out_$p763 := out_$p825;
    goto $bb198_dummy;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i46 := 11;
    assume true;
    goto $bb198;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i827 := $ne.i64(out_$i826, 0);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i826 := $p2i.ref.i64(out_$p825);
    goto corral_source_split_4246;

  SeqInstr_162:
    goto corral_source_split_4245;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out_$p825 := alloc_skb(2048, 32);
    goto SeqInstr_161;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i824);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i824 := $load.i32($M.0, out_$p823);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p822);
    out_$p823 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p822 := $load.ref($M.0, out_$p821);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p820);
    out_$p821 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$p820 := $load.ref($M.0, out_$p819);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i774);
    out_$p819 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i771);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p769);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i818);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i818 := $load.i32($M.0, out_$p817);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$p817 := $add.ref($add.ref(out_$p763, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p816);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$p816 := $load.ref($M.0, out_$p815);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$p815 := $add.ref($add.ref(out_$p763, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p763);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4227;

  $bb187:
    assume out_$i783 == 1;
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$p784, out_$i785, out_$i786 := out_$p763, out_$i771, out_$i774;
    assume true;
    goto $bb187;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i783 := $eq.i32(out_$i771, 0);
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p782, $0.ref);
    goto corral_source_split_4223;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$p782 := $add.ref($add.ref(out_$p781, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$p781 := $bitcast.ref.ref(out_$p780);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$p780 := $add.ref($add.ref(out_$p763, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p779, 0);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p779 := $add.ref($add.ref(out_$p778, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$p778 := $bitcast.ref.ref(out_$p777);
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$p777 := $load.ref($M.0, out_$p776);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$p776 := $add.ref($add.ref(out_$p763, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p775, 34);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$p775 := $add.ref($add.ref(out_$p763, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$i774 := $trunc.i64.i32(out_$i773);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i773 := $lshr.i64(out_$i772, 32);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i772 := $p2i.ref.i64(out_$p769);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i771 := $trunc.i64.i32(out_$i770);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i770 := $p2i.ref.i64(out_$p769);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$p769 := $i2p.i64.ref(out_$i768);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_$i768 := pci_map_single(out_$p765, out_$p767, 2048, 2);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p767 := $load.ref($M.0, out_$p766);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p766 := $add.ref($add.ref(out_$p763, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p765 := $load.ref($M.0, out_$p764);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$p764 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4202;

  $bb198_dummy:
    call {:si_unique_call 1} out_$i46, out_$p763, out_$p764, out_$p765, out_$p766, out_$p767, out_$i768, out_$p769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$p775, out_$p776, out_$p777, out_$p778, out_$p779, out_$p780, out_$p781, out_$p782, out_$i783, out_$p784, out_$i785, out_$i786, out_$p815, out_$p816, out_$p817, out_$i818, out_$p819, out_$p820, out_$p821, out_$p822, out_$p823, out_$i824, out_$p825, out_$i826, out_$i827 := slic_rcvqueue_fill_loop_$bb186(in_$p0, in_$p4, out_$i46, out_$p763, out_$p764, out_$p765, out_$p766, out_$p767, out_$i768, out_$p769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$p775, out_$p776, out_$p777, out_$p778, out_$p779, out_$p780, out_$p781, out_$p782, out_$i783, out_$p784, out_$i785, out_$i786, out_$p815, out_$p816, out_$p817, out_$i818, out_$p819, out_$p820, out_$p821, out_$p822, out_$p823, out_$i824, out_$p825, out_$i826, out_$i827);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb186(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p763: ref, in_$p764: ref, in_$p765: ref, in_$p766: ref, in_$p767: ref, in_$i768: i64, in_$p769: ref, in_$i770: i64, in_$i771: i32, in_$i772: i64, in_$i773: i64, in_$i774: i32, in_$p775: ref, in_$p776: ref, in_$p777: ref, in_$p778: ref, in_$p779: ref, in_$p780: ref, in_$p781: ref, in_$p782: ref, in_$i783: i1, in_$p784: ref, in_$i785: i32, in_$i786: i32, in_$p815: ref, in_$p816: ref, in_$p817: ref, in_$i818: i32, in_$p819: ref, in_$p820: ref, in_$p821: ref, in_$p822: ref, in_$p823: ref, in_$i824: i32, in_$p825: ref, in_$i826: i64, in_$i827: i1) returns (out_$i46: i32, out_$p763: ref, out_$p764: ref, out_$p765: ref, out_$p766: ref, out_$p767: ref, out_$i768: i64, out_$p769: ref, out_$i770: i64, out_$i771: i32, out_$i772: i64, out_$i773: i64, out_$i774: i32, out_$p775: ref, out_$p776: ref, out_$p777: ref, out_$p778: ref, out_$p779: ref, out_$p780: ref, out_$p781: ref, out_$p782: ref, out_$i783: i1, out_$p784: ref, out_$i785: i32, out_$i786: i32, out_$p815: ref, out_$p816: ref, out_$p817: ref, out_$i818: i32, out_$p819: ref, out_$p820: ref, out_$p821: ref, out_$p822: ref, out_$p823: ref, out_$i824: i32, out_$p825: ref, out_$i826: i64, out_$i827: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb170(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p695: ref, in_$p696: ref, in_$p697: ref, in_$p698: ref, in_$p699: ref, in_$i700: i64, in_$p701: ref, in_$i702: i64, in_$i703: i32, in_$i704: i64, in_$i705: i64, in_$i706: i32, in_$p707: ref, in_$p708: ref, in_$p709: ref, in_$p710: ref, in_$p711: ref, in_$p712: ref, in_$p713: ref, in_$p714: ref, in_$i715: i1, in_$p716: ref, in_$i717: i32, in_$i718: i32, in_$p747: ref, in_$p748: ref, in_$p749: ref, in_$i750: i32, in_$p751: ref, in_$p752: ref, in_$p753: ref, in_$p754: ref, in_$p755: ref, in_$i756: i32, in_$p757: ref, in_$i758: i64, in_$i759: i1) returns (out_$i46: i32, out_$p695: ref, out_$p696: ref, out_$p697: ref, out_$p698: ref, out_$p699: ref, out_$i700: i64, out_$p701: ref, out_$i702: i64, out_$i703: i32, out_$i704: i64, out_$i705: i64, out_$i706: i32, out_$p707: ref, out_$p708: ref, out_$p709: ref, out_$p710: ref, out_$p711: ref, out_$p712: ref, out_$p713: ref, out_$p714: ref, out_$i715: i1, out_$p716: ref, out_$i717: i32, out_$i718: i32, out_$p747: ref, out_$p748: ref, out_$p749: ref, out_$i750: i32, out_$p751: ref, out_$p752: ref, out_$p753: ref, out_$p754: ref, out_$p755: ref, out_$i756: i32, out_$p757: ref, out_$i758: i64, out_$i759: i1)
{

  entry:
    out_$i46, out_$p695, out_$p696, out_$p697, out_$p698, out_$p699, out_$i700, out_$p701, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$p707, out_$p708, out_$p709, out_$p710, out_$p711, out_$p712, out_$p713, out_$p714, out_$i715, out_$p716, out_$i717, out_$i718, out_$p747, out_$p748, out_$p749, out_$i750, out_$p751, out_$p752, out_$p753, out_$p754, out_$p755, out_$i756, out_$p757, out_$i758, out_$i759 := in_$i46, in_$p695, in_$p696, in_$p697, in_$p698, in_$p699, in_$i700, in_$p701, in_$i702, in_$i703, in_$i704, in_$i705, in_$i706, in_$p707, in_$p708, in_$p709, in_$p710, in_$p711, in_$p712, in_$p713, in_$p714, in_$i715, in_$p716, in_$i717, in_$i718, in_$p747, in_$p748, in_$p749, in_$i750, in_$p751, in_$p752, in_$p753, in_$p754, in_$p755, in_$i756, in_$p757, in_$i758, in_$i759;
    goto $bb170, exit;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  $bb182:
    assume out_$i759 == 1;
    assume {:verifier.code 0} true;
    out_$p695 := out_$p757;
    goto $bb182_dummy;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i46 := 10;
    assume true;
    goto $bb182;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i759 := $ne.i64(out_$i758, 0);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i758 := $p2i.ref.i64(out_$p757);
    goto corral_source_split_4153;

  SeqInstr_156:
    goto corral_source_split_4152;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} out_$p757 := alloc_skb(2048, 32);
    goto SeqInstr_155;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i756);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i756 := $load.i32($M.0, out_$p755);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p754);
    out_$p755 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4148;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$p754 := $load.ref($M.0, out_$p753);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p752);
    out_$p753 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$p752 := $load.ref($M.0, out_$p751);
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i706);
    out_$p751 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i703);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p701);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i750);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i750 := $load.i32($M.0, out_$p749);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$p749 := $add.ref($add.ref(out_$p695, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p748);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$p748 := $load.ref($M.0, out_$p747);
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p747 := $add.ref($add.ref(out_$p695, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p695);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4134;

  $bb171:
    assume out_$i715 == 1;
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p716, out_$i717, out_$i718 := out_$p695, out_$i703, out_$i706;
    assume true;
    goto $bb171;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i715 := $eq.i32(out_$i703, 0);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p714, $0.ref);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$p714 := $add.ref($add.ref(out_$p713, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p713 := $bitcast.ref.ref(out_$p712);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$p712 := $add.ref($add.ref(out_$p695, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p711, 0);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$p711 := $add.ref($add.ref(out_$p710, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$p710 := $bitcast.ref.ref(out_$p709);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$p709 := $load.ref($M.0, out_$p708);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p708 := $add.ref($add.ref(out_$p695, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p707, 34);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$p707 := $add.ref($add.ref(out_$p695, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i706 := $trunc.i64.i32(out_$i705);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i705 := $lshr.i64(out_$i704, 32);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i704 := $p2i.ref.i64(out_$p701);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$i703 := $trunc.i64.i32(out_$i702);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i702 := $p2i.ref.i64(out_$p701);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$p701 := $i2p.i64.ref(out_$i700);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$i700 := pci_map_single(out_$p697, out_$p699, 2048, 2);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$p699 := $load.ref($M.0, out_$p698);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$p698 := $add.ref($add.ref(out_$p695, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$p697 := $load.ref($M.0, out_$p696);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$p696 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4109;

  $bb182_dummy:
    call {:si_unique_call 1} out_$i46, out_$p695, out_$p696, out_$p697, out_$p698, out_$p699, out_$i700, out_$p701, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$p707, out_$p708, out_$p709, out_$p710, out_$p711, out_$p712, out_$p713, out_$p714, out_$i715, out_$p716, out_$i717, out_$i718, out_$p747, out_$p748, out_$p749, out_$i750, out_$p751, out_$p752, out_$p753, out_$p754, out_$p755, out_$i756, out_$p757, out_$i758, out_$i759 := slic_rcvqueue_fill_loop_$bb170(in_$p0, in_$p4, out_$i46, out_$p695, out_$p696, out_$p697, out_$p698, out_$p699, out_$i700, out_$p701, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$p707, out_$p708, out_$p709, out_$p710, out_$p711, out_$p712, out_$p713, out_$p714, out_$i715, out_$p716, out_$i717, out_$i718, out_$p747, out_$p748, out_$p749, out_$i750, out_$p751, out_$p752, out_$p753, out_$p754, out_$p755, out_$i756, out_$p757, out_$i758, out_$i759);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb170(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p695: ref, in_$p696: ref, in_$p697: ref, in_$p698: ref, in_$p699: ref, in_$i700: i64, in_$p701: ref, in_$i702: i64, in_$i703: i32, in_$i704: i64, in_$i705: i64, in_$i706: i32, in_$p707: ref, in_$p708: ref, in_$p709: ref, in_$p710: ref, in_$p711: ref, in_$p712: ref, in_$p713: ref, in_$p714: ref, in_$i715: i1, in_$p716: ref, in_$i717: i32, in_$i718: i32, in_$p747: ref, in_$p748: ref, in_$p749: ref, in_$i750: i32, in_$p751: ref, in_$p752: ref, in_$p753: ref, in_$p754: ref, in_$p755: ref, in_$i756: i32, in_$p757: ref, in_$i758: i64, in_$i759: i1) returns (out_$i46: i32, out_$p695: ref, out_$p696: ref, out_$p697: ref, out_$p698: ref, out_$p699: ref, out_$i700: i64, out_$p701: ref, out_$i702: i64, out_$i703: i32, out_$i704: i64, out_$i705: i64, out_$i706: i32, out_$p707: ref, out_$p708: ref, out_$p709: ref, out_$p710: ref, out_$p711: ref, out_$p712: ref, out_$p713: ref, out_$p714: ref, out_$i715: i1, out_$p716: ref, out_$i717: i32, out_$i718: i32, out_$p747: ref, out_$p748: ref, out_$p749: ref, out_$i750: i32, out_$p751: ref, out_$p752: ref, out_$p753: ref, out_$p754: ref, out_$p755: ref, out_$i756: i32, out_$p757: ref, out_$i758: i64, out_$i759: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb154(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p627: ref, in_$p628: ref, in_$p629: ref, in_$p630: ref, in_$p631: ref, in_$i632: i64, in_$p633: ref, in_$i634: i64, in_$i635: i32, in_$i636: i64, in_$i637: i64, in_$i638: i32, in_$p639: ref, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$i647: i1, in_$p648: ref, in_$i649: i32, in_$i650: i32, in_$p679: ref, in_$p680: ref, in_$p681: ref, in_$i682: i32, in_$p683: ref, in_$p684: ref, in_$p685: ref, in_$p686: ref, in_$p687: ref, in_$i688: i32, in_$p689: ref, in_$i690: i64, in_$i691: i1) returns (out_$i46: i32, out_$p627: ref, out_$p628: ref, out_$p629: ref, out_$p630: ref, out_$p631: ref, out_$i632: i64, out_$p633: ref, out_$i634: i64, out_$i635: i32, out_$i636: i64, out_$i637: i64, out_$i638: i32, out_$p639: ref, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$i647: i1, out_$p648: ref, out_$i649: i32, out_$i650: i32, out_$p679: ref, out_$p680: ref, out_$p681: ref, out_$i682: i32, out_$p683: ref, out_$p684: ref, out_$p685: ref, out_$p686: ref, out_$p687: ref, out_$i688: i32, out_$p689: ref, out_$i690: i64, out_$i691: i1)
{

  entry:
    out_$i46, out_$p627, out_$p628, out_$p629, out_$p630, out_$p631, out_$i632, out_$p633, out_$i634, out_$i635, out_$i636, out_$i637, out_$i638, out_$p639, out_$p640, out_$p641, out_$p642, out_$p643, out_$p644, out_$p645, out_$p646, out_$i647, out_$p648, out_$i649, out_$i650, out_$p679, out_$p680, out_$p681, out_$i682, out_$p683, out_$p684, out_$p685, out_$p686, out_$p687, out_$i688, out_$p689, out_$i690, out_$i691 := in_$i46, in_$p627, in_$p628, in_$p629, in_$p630, in_$p631, in_$i632, in_$p633, in_$i634, in_$i635, in_$i636, in_$i637, in_$i638, in_$p639, in_$p640, in_$p641, in_$p642, in_$p643, in_$p644, in_$p645, in_$p646, in_$i647, in_$p648, in_$i649, in_$i650, in_$p679, in_$p680, in_$p681, in_$i682, in_$p683, in_$p684, in_$p685, in_$p686, in_$p687, in_$i688, in_$p689, in_$i690, in_$i691;
    goto $bb154, exit;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_4015;

  $bb166:
    assume out_$i691 == 1;
    assume {:verifier.code 0} true;
    out_$p627 := out_$p689;
    goto $bb166_dummy;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i46 := 9;
    assume true;
    goto $bb166;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i691 := $ne.i64(out_$i690, 0);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i690 := $p2i.ref.i64(out_$p689);
    goto corral_source_split_4060;

  SeqInstr_150:
    goto corral_source_split_4059;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} out_$p689 := alloc_skb(2048, 32);
    goto SeqInstr_149;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i688);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$i688 := $load.i32($M.0, out_$p687);
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p686);
    out_$p687 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$p686 := $load.ref($M.0, out_$p685);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p684);
    out_$p685 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$p684 := $load.ref($M.0, out_$p683);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i638);
    out_$p683 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i635);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p633);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i682);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i682 := $load.i32($M.0, out_$p681);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p681 := $add.ref($add.ref(out_$p627, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p680);
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$p680 := $load.ref($M.0, out_$p679);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$p679 := $add.ref($add.ref(out_$p627, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p627);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_4041;

  $bb155:
    assume out_$i647 == 1;
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$p648, out_$i649, out_$i650 := out_$p627, out_$i635, out_$i638;
    assume true;
    goto $bb155;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i647 := $eq.i32(out_$i635, 0);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p646, $0.ref);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$p646 := $add.ref($add.ref(out_$p645, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$p645 := $bitcast.ref.ref(out_$p644);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref($add.ref(out_$p627, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p643, 0);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref($add.ref(out_$p642, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$p642 := $bitcast.ref.ref(out_$p641);
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$p641 := $load.ref($M.0, out_$p640);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$p640 := $add.ref($add.ref(out_$p627, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p639, 34);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$p639 := $add.ref($add.ref(out_$p627, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$i638 := $trunc.i64.i32(out_$i637);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$i637 := $lshr.i64(out_$i636, 32);
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i636 := $p2i.ref.i64(out_$p633);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i635 := $trunc.i64.i32(out_$i634);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i634 := $p2i.ref.i64(out_$p633);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$p633 := $i2p.i64.ref(out_$i632);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} out_$i632 := pci_map_single(out_$p629, out_$p631, 2048, 2);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$p631 := $load.ref($M.0, out_$p630);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$p630 := $add.ref($add.ref(out_$p627, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$p629 := $load.ref($M.0, out_$p628);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$p628 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_4016;

  $bb166_dummy:
    call {:si_unique_call 1} out_$i46, out_$p627, out_$p628, out_$p629, out_$p630, out_$p631, out_$i632, out_$p633, out_$i634, out_$i635, out_$i636, out_$i637, out_$i638, out_$p639, out_$p640, out_$p641, out_$p642, out_$p643, out_$p644, out_$p645, out_$p646, out_$i647, out_$p648, out_$i649, out_$i650, out_$p679, out_$p680, out_$p681, out_$i682, out_$p683, out_$p684, out_$p685, out_$p686, out_$p687, out_$i688, out_$p689, out_$i690, out_$i691 := slic_rcvqueue_fill_loop_$bb154(in_$p0, in_$p4, out_$i46, out_$p627, out_$p628, out_$p629, out_$p630, out_$p631, out_$i632, out_$p633, out_$i634, out_$i635, out_$i636, out_$i637, out_$i638, out_$p639, out_$p640, out_$p641, out_$p642, out_$p643, out_$p644, out_$p645, out_$p646, out_$i647, out_$p648, out_$i649, out_$i650, out_$p679, out_$p680, out_$p681, out_$i682, out_$p683, out_$p684, out_$p685, out_$p686, out_$p687, out_$i688, out_$p689, out_$i690, out_$i691);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb154(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p627: ref, in_$p628: ref, in_$p629: ref, in_$p630: ref, in_$p631: ref, in_$i632: i64, in_$p633: ref, in_$i634: i64, in_$i635: i32, in_$i636: i64, in_$i637: i64, in_$i638: i32, in_$p639: ref, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$i647: i1, in_$p648: ref, in_$i649: i32, in_$i650: i32, in_$p679: ref, in_$p680: ref, in_$p681: ref, in_$i682: i32, in_$p683: ref, in_$p684: ref, in_$p685: ref, in_$p686: ref, in_$p687: ref, in_$i688: i32, in_$p689: ref, in_$i690: i64, in_$i691: i1) returns (out_$i46: i32, out_$p627: ref, out_$p628: ref, out_$p629: ref, out_$p630: ref, out_$p631: ref, out_$i632: i64, out_$p633: ref, out_$i634: i64, out_$i635: i32, out_$i636: i64, out_$i637: i64, out_$i638: i32, out_$p639: ref, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$i647: i1, out_$p648: ref, out_$i649: i32, out_$i650: i32, out_$p679: ref, out_$p680: ref, out_$p681: ref, out_$i682: i32, out_$p683: ref, out_$p684: ref, out_$p685: ref, out_$p686: ref, out_$p687: ref, out_$i688: i32, out_$p689: ref, out_$i690: i64, out_$i691: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb138(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p559: ref, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$p563: ref, in_$i564: i64, in_$p565: ref, in_$i566: i64, in_$i567: i32, in_$i568: i64, in_$i569: i64, in_$i570: i32, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$i579: i1, in_$p580: ref, in_$i581: i32, in_$i582: i32, in_$p611: ref, in_$p612: ref, in_$p613: ref, in_$i614: i32, in_$p615: ref, in_$p616: ref, in_$p617: ref, in_$p618: ref, in_$p619: ref, in_$i620: i32, in_$p621: ref, in_$i622: i64, in_$i623: i1) returns (out_$i46: i32, out_$p559: ref, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$p563: ref, out_$i564: i64, out_$p565: ref, out_$i566: i64, out_$i567: i32, out_$i568: i64, out_$i569: i64, out_$i570: i32, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$i579: i1, out_$p580: ref, out_$i581: i32, out_$i582: i32, out_$p611: ref, out_$p612: ref, out_$p613: ref, out_$i614: i32, out_$p615: ref, out_$p616: ref, out_$p617: ref, out_$p618: ref, out_$p619: ref, out_$i620: i32, out_$p621: ref, out_$i622: i64, out_$i623: i1)
{

  entry:
    out_$i46, out_$p559, out_$p560, out_$p561, out_$p562, out_$p563, out_$i564, out_$p565, out_$i566, out_$i567, out_$i568, out_$i569, out_$i570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$i579, out_$p580, out_$i581, out_$i582, out_$p611, out_$p612, out_$p613, out_$i614, out_$p615, out_$p616, out_$p617, out_$p618, out_$p619, out_$i620, out_$p621, out_$i622, out_$i623 := in_$i46, in_$p559, in_$p560, in_$p561, in_$p562, in_$p563, in_$i564, in_$p565, in_$i566, in_$i567, in_$i568, in_$i569, in_$i570, in_$p571, in_$p572, in_$p573, in_$p574, in_$p575, in_$p576, in_$p577, in_$p578, in_$i579, in_$p580, in_$i581, in_$i582, in_$p611, in_$p612, in_$p613, in_$i614, in_$p615, in_$p616, in_$p617, in_$p618, in_$p619, in_$i620, in_$p621, in_$i622, in_$i623;
    goto $bb138, exit;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_3922;

  $bb150:
    assume out_$i623 == 1;
    assume {:verifier.code 0} true;
    out_$p559 := out_$p621;
    goto $bb150_dummy;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i46 := 8;
    assume true;
    goto $bb150;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$i623 := $ne.i64(out_$i622, 0);
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$i622 := $p2i.ref.i64(out_$p621);
    goto corral_source_split_3967;

  SeqInstr_144:
    goto corral_source_split_3966;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} out_$p621 := alloc_skb(2048, 32);
    goto SeqInstr_143;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i620);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i620 := $load.i32($M.0, out_$p619);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p618);
    out_$p619 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$p618 := $load.ref($M.0, out_$p617);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p616);
    out_$p617 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p616 := $load.ref($M.0, out_$p615);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i570);
    out_$p615 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i567);
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p565);
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i614);
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i614 := $load.i32($M.0, out_$p613);
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref(out_$p559, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p612);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$p612 := $load.ref($M.0, out_$p611);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$p611 := $add.ref($add.ref(out_$p559, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p559);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3948;

  $bb139:
    assume out_$i579 == 1;
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p580, out_$i581, out_$i582 := out_$p559, out_$i567, out_$i570;
    assume true;
    goto $bb139;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i579 := $eq.i32(out_$i567, 0);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p578, $0.ref);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p578 := $add.ref($add.ref(out_$p577, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p577 := $bitcast.ref.ref(out_$p576);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(out_$p559, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p575, 0);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$p575 := $add.ref($add.ref(out_$p574, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$p574 := $bitcast.ref.ref(out_$p573);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$p573 := $load.ref($M.0, out_$p572);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref($add.ref(out_$p559, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p571, 34);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p571 := $add.ref($add.ref(out_$p559, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i570 := $trunc.i64.i32(out_$i569);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i569 := $lshr.i64(out_$i568, 32);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i568 := $p2i.ref.i64(out_$p565);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i567 := $trunc.i64.i32(out_$i566);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$i566 := $p2i.ref.i64(out_$p565);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$p565 := $i2p.i64.ref(out_$i564);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_$i564 := pci_map_single(out_$p561, out_$p563, 2048, 2);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p563 := $load.ref($M.0, out_$p562);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p562 := $add.ref($add.ref(out_$p559, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p561 := $load.ref($M.0, out_$p560);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$p560 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3923;

  $bb150_dummy:
    call {:si_unique_call 1} out_$i46, out_$p559, out_$p560, out_$p561, out_$p562, out_$p563, out_$i564, out_$p565, out_$i566, out_$i567, out_$i568, out_$i569, out_$i570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$i579, out_$p580, out_$i581, out_$i582, out_$p611, out_$p612, out_$p613, out_$i614, out_$p615, out_$p616, out_$p617, out_$p618, out_$p619, out_$i620, out_$p621, out_$i622, out_$i623 := slic_rcvqueue_fill_loop_$bb138(in_$p0, in_$p4, out_$i46, out_$p559, out_$p560, out_$p561, out_$p562, out_$p563, out_$i564, out_$p565, out_$i566, out_$i567, out_$i568, out_$i569, out_$i570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$i579, out_$p580, out_$i581, out_$i582, out_$p611, out_$p612, out_$p613, out_$i614, out_$p615, out_$p616, out_$p617, out_$p618, out_$p619, out_$i620, out_$p621, out_$i622, out_$i623);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb138(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p559: ref, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$p563: ref, in_$i564: i64, in_$p565: ref, in_$i566: i64, in_$i567: i32, in_$i568: i64, in_$i569: i64, in_$i570: i32, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$i579: i1, in_$p580: ref, in_$i581: i32, in_$i582: i32, in_$p611: ref, in_$p612: ref, in_$p613: ref, in_$i614: i32, in_$p615: ref, in_$p616: ref, in_$p617: ref, in_$p618: ref, in_$p619: ref, in_$i620: i32, in_$p621: ref, in_$i622: i64, in_$i623: i1) returns (out_$i46: i32, out_$p559: ref, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$p563: ref, out_$i564: i64, out_$p565: ref, out_$i566: i64, out_$i567: i32, out_$i568: i64, out_$i569: i64, out_$i570: i32, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$i579: i1, out_$p580: ref, out_$i581: i32, out_$i582: i32, out_$p611: ref, out_$p612: ref, out_$p613: ref, out_$i614: i32, out_$p615: ref, out_$p616: ref, out_$p617: ref, out_$p618: ref, out_$p619: ref, out_$i620: i32, out_$p621: ref, out_$i622: i64, out_$i623: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb122(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p491: ref, in_$p492: ref, in_$p493: ref, in_$p494: ref, in_$p495: ref, in_$i496: i64, in_$p497: ref, in_$i498: i64, in_$i499: i32, in_$i500: i64, in_$i501: i64, in_$i502: i32, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$p506: ref, in_$p507: ref, in_$p508: ref, in_$p509: ref, in_$p510: ref, in_$i511: i1, in_$p512: ref, in_$i513: i32, in_$i514: i32, in_$p543: ref, in_$p544: ref, in_$p545: ref, in_$i546: i32, in_$p547: ref, in_$p548: ref, in_$p549: ref, in_$p550: ref, in_$p551: ref, in_$i552: i32, in_$p553: ref, in_$i554: i64, in_$i555: i1) returns (out_$i46: i32, out_$p491: ref, out_$p492: ref, out_$p493: ref, out_$p494: ref, out_$p495: ref, out_$i496: i64, out_$p497: ref, out_$i498: i64, out_$i499: i32, out_$i500: i64, out_$i501: i64, out_$i502: i32, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$p506: ref, out_$p507: ref, out_$p508: ref, out_$p509: ref, out_$p510: ref, out_$i511: i1, out_$p512: ref, out_$i513: i32, out_$i514: i32, out_$p543: ref, out_$p544: ref, out_$p545: ref, out_$i546: i32, out_$p547: ref, out_$p548: ref, out_$p549: ref, out_$p550: ref, out_$p551: ref, out_$i552: i32, out_$p553: ref, out_$i554: i64, out_$i555: i1)
{

  entry:
    out_$i46, out_$p491, out_$p492, out_$p493, out_$p494, out_$p495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$p503, out_$p504, out_$p505, out_$p506, out_$p507, out_$p508, out_$p509, out_$p510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p543, out_$p544, out_$p545, out_$i546, out_$p547, out_$p548, out_$p549, out_$p550, out_$p551, out_$i552, out_$p553, out_$i554, out_$i555 := in_$i46, in_$p491, in_$p492, in_$p493, in_$p494, in_$p495, in_$i496, in_$p497, in_$i498, in_$i499, in_$i500, in_$i501, in_$i502, in_$p503, in_$p504, in_$p505, in_$p506, in_$p507, in_$p508, in_$p509, in_$p510, in_$i511, in_$p512, in_$i513, in_$i514, in_$p543, in_$p544, in_$p545, in_$i546, in_$p547, in_$p548, in_$p549, in_$p550, in_$p551, in_$i552, in_$p553, in_$i554, in_$i555;
    goto $bb122, exit;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  $bb134:
    assume out_$i555 == 1;
    assume {:verifier.code 0} true;
    out_$p491 := out_$p553;
    goto $bb134_dummy;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i46 := 7;
    assume true;
    goto $bb134;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i555 := $ne.i64(out_$i554, 0);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i554 := $p2i.ref.i64(out_$p553);
    goto corral_source_split_3874;

  SeqInstr_138:
    goto corral_source_split_3873;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_$p553 := alloc_skb(2048, 32);
    goto SeqInstr_137;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i552);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i552 := $load.i32($M.0, out_$p551);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p550);
    out_$p551 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p550 := $load.ref($M.0, out_$p549);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p548);
    out_$p549 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$p548 := $load.ref($M.0, out_$p547);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i502);
    out_$p547 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i499);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p497);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i546);
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i546 := $load.i32($M.0, out_$p545);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$p545 := $add.ref($add.ref(out_$p491, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p544);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$p544 := $load.ref($M.0, out_$p543);
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$p543 := $add.ref($add.ref(out_$p491, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p491);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3855;

  $bb123:
    assume out_$i511 == 1;
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p512, out_$i513, out_$i514 := out_$p491, out_$i499, out_$i502;
    assume true;
    goto $bb123;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i511 := $eq.i32(out_$i499, 0);
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p510, $0.ref);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$p510 := $add.ref($add.ref(out_$p509, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$p509 := $bitcast.ref.ref(out_$p508);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p508 := $add.ref($add.ref(out_$p491, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p507, 0);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$p507 := $add.ref($add.ref(out_$p506, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$p506 := $bitcast.ref.ref(out_$p505);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$p505 := $load.ref($M.0, out_$p504);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p504 := $add.ref($add.ref(out_$p491, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p503, 34);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p503 := $add.ref($add.ref(out_$p491, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$i502 := $trunc.i64.i32(out_$i501);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i501 := $lshr.i64(out_$i500, 32);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i500 := $p2i.ref.i64(out_$p497);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i499 := $trunc.i64.i32(out_$i498);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i498 := $p2i.ref.i64(out_$p497);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$p497 := $i2p.i64.ref(out_$i496);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} out_$i496 := pci_map_single(out_$p493, out_$p495, 2048, 2);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$p495 := $load.ref($M.0, out_$p494);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p494 := $add.ref($add.ref(out_$p491, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p493 := $load.ref($M.0, out_$p492);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p492 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3830;

  $bb134_dummy:
    call {:si_unique_call 1} out_$i46, out_$p491, out_$p492, out_$p493, out_$p494, out_$p495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$p503, out_$p504, out_$p505, out_$p506, out_$p507, out_$p508, out_$p509, out_$p510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p543, out_$p544, out_$p545, out_$i546, out_$p547, out_$p548, out_$p549, out_$p550, out_$p551, out_$i552, out_$p553, out_$i554, out_$i555 := slic_rcvqueue_fill_loop_$bb122(in_$p0, in_$p4, out_$i46, out_$p491, out_$p492, out_$p493, out_$p494, out_$p495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$p503, out_$p504, out_$p505, out_$p506, out_$p507, out_$p508, out_$p509, out_$p510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p543, out_$p544, out_$p545, out_$i546, out_$p547, out_$p548, out_$p549, out_$p550, out_$p551, out_$i552, out_$p553, out_$i554, out_$i555);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb122(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p491: ref, in_$p492: ref, in_$p493: ref, in_$p494: ref, in_$p495: ref, in_$i496: i64, in_$p497: ref, in_$i498: i64, in_$i499: i32, in_$i500: i64, in_$i501: i64, in_$i502: i32, in_$p503: ref, in_$p504: ref, in_$p505: ref, in_$p506: ref, in_$p507: ref, in_$p508: ref, in_$p509: ref, in_$p510: ref, in_$i511: i1, in_$p512: ref, in_$i513: i32, in_$i514: i32, in_$p543: ref, in_$p544: ref, in_$p545: ref, in_$i546: i32, in_$p547: ref, in_$p548: ref, in_$p549: ref, in_$p550: ref, in_$p551: ref, in_$i552: i32, in_$p553: ref, in_$i554: i64, in_$i555: i1) returns (out_$i46: i32, out_$p491: ref, out_$p492: ref, out_$p493: ref, out_$p494: ref, out_$p495: ref, out_$i496: i64, out_$p497: ref, out_$i498: i64, out_$i499: i32, out_$i500: i64, out_$i501: i64, out_$i502: i32, out_$p503: ref, out_$p504: ref, out_$p505: ref, out_$p506: ref, out_$p507: ref, out_$p508: ref, out_$p509: ref, out_$p510: ref, out_$i511: i1, out_$p512: ref, out_$i513: i32, out_$i514: i32, out_$p543: ref, out_$p544: ref, out_$p545: ref, out_$i546: i32, out_$p547: ref, out_$p548: ref, out_$p549: ref, out_$p550: ref, out_$p551: ref, out_$i552: i32, out_$p553: ref, out_$i554: i64, out_$i555: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb106(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p423: ref, in_$p424: ref, in_$p425: ref, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p429: ref, in_$i430: i64, in_$i431: i32, in_$i432: i64, in_$i433: i64, in_$i434: i32, in_$p435: ref, in_$p436: ref, in_$p437: ref, in_$p438: ref, in_$p439: ref, in_$p440: ref, in_$p441: ref, in_$p442: ref, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i32, in_$p475: ref, in_$p476: ref, in_$p477: ref, in_$i478: i32, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p483: ref, in_$i484: i32, in_$p485: ref, in_$i486: i64, in_$i487: i1) returns (out_$i46: i32, out_$p423: ref, out_$p424: ref, out_$p425: ref, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p429: ref, out_$i430: i64, out_$i431: i32, out_$i432: i64, out_$i433: i64, out_$i434: i32, out_$p435: ref, out_$p436: ref, out_$p437: ref, out_$p438: ref, out_$p439: ref, out_$p440: ref, out_$p441: ref, out_$p442: ref, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i32, out_$p475: ref, out_$p476: ref, out_$p477: ref, out_$i478: i32, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p483: ref, out_$i484: i32, out_$p485: ref, out_$i486: i64, out_$i487: i1)
{

  entry:
    out_$i46, out_$p423, out_$p424, out_$p425, out_$p426, out_$p427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$p435, out_$p436, out_$p437, out_$p438, out_$p439, out_$p440, out_$p441, out_$p442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p475, out_$p476, out_$p477, out_$i478, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$i484, out_$p485, out_$i486, out_$i487 := in_$i46, in_$p423, in_$p424, in_$p425, in_$p426, in_$p427, in_$i428, in_$p429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$p435, in_$p436, in_$p437, in_$p438, in_$p439, in_$p440, in_$p441, in_$p442, in_$i443, in_$p444, in_$i445, in_$i446, in_$p475, in_$p476, in_$p477, in_$i478, in_$p479, in_$p480, in_$p481, in_$p482, in_$p483, in_$i484, in_$p485, in_$i486, in_$i487;
    goto $bb106, exit;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_3736;

  $bb118:
    assume out_$i487 == 1;
    assume {:verifier.code 0} true;
    out_$p423 := out_$p485;
    goto $bb118_dummy;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i46 := 6;
    assume true;
    goto $bb118;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i64(out_$i486, 0);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i486 := $p2i.ref.i64(out_$p485);
    goto corral_source_split_3781;

  SeqInstr_132:
    goto corral_source_split_3780;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} out_$p485 := alloc_skb(2048, 32);
    goto SeqInstr_131;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i484);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i484 := $load.i32($M.0, out_$p483);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p482);
    out_$p483 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$p482 := $load.ref($M.0, out_$p481);
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p480);
    out_$p481 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$p480 := $load.ref($M.0, out_$p479);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i434);
    out_$p479 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i431);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p429);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i478);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i478 := $load.i32($M.0, out_$p477);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$p477 := $add.ref($add.ref(out_$p423, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p476);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$p476 := $load.ref($M.0, out_$p475);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$p475 := $add.ref($add.ref(out_$p423, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p423);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3762;

  $bb107:
    assume out_$i443 == 1;
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p444, out_$i445, out_$i446 := out_$p423, out_$i431, out_$i434;
    assume true;
    goto $bb107;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i431, 0);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p442, $0.ref);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p442 := $add.ref($add.ref(out_$p441, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p441 := $bitcast.ref.ref(out_$p440);
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$p440 := $add.ref($add.ref(out_$p423, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p439, 0);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$p439 := $add.ref($add.ref(out_$p438, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$p438 := $bitcast.ref.ref(out_$p437);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$p437 := $load.ref($M.0, out_$p436);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$p436 := $add.ref($add.ref(out_$p423, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p435, 34);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$p435 := $add.ref($add.ref(out_$p423, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i434 := $trunc.i64.i32(out_$i433);
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i433 := $lshr.i64(out_$i432, 32);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$i432 := $p2i.ref.i64(out_$p429);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i431 := $trunc.i64.i32(out_$i430);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i430 := $p2i.ref.i64(out_$p429);
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$p429 := $i2p.i64.ref(out_$i428);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} out_$i428 := pci_map_single(out_$p425, out_$p427, 2048, 2);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$p427 := $load.ref($M.0, out_$p426);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref(out_$p423, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$p425 := $load.ref($M.0, out_$p424);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3737;

  $bb118_dummy:
    call {:si_unique_call 1} out_$i46, out_$p423, out_$p424, out_$p425, out_$p426, out_$p427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$p435, out_$p436, out_$p437, out_$p438, out_$p439, out_$p440, out_$p441, out_$p442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p475, out_$p476, out_$p477, out_$i478, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$i484, out_$p485, out_$i486, out_$i487 := slic_rcvqueue_fill_loop_$bb106(in_$p0, in_$p4, out_$i46, out_$p423, out_$p424, out_$p425, out_$p426, out_$p427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$p435, out_$p436, out_$p437, out_$p438, out_$p439, out_$p440, out_$p441, out_$p442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p475, out_$p476, out_$p477, out_$i478, out_$p479, out_$p480, out_$p481, out_$p482, out_$p483, out_$i484, out_$p485, out_$i486, out_$i487);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb106(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p423: ref, in_$p424: ref, in_$p425: ref, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p429: ref, in_$i430: i64, in_$i431: i32, in_$i432: i64, in_$i433: i64, in_$i434: i32, in_$p435: ref, in_$p436: ref, in_$p437: ref, in_$p438: ref, in_$p439: ref, in_$p440: ref, in_$p441: ref, in_$p442: ref, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i32, in_$p475: ref, in_$p476: ref, in_$p477: ref, in_$i478: i32, in_$p479: ref, in_$p480: ref, in_$p481: ref, in_$p482: ref, in_$p483: ref, in_$i484: i32, in_$p485: ref, in_$i486: i64, in_$i487: i1) returns (out_$i46: i32, out_$p423: ref, out_$p424: ref, out_$p425: ref, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p429: ref, out_$i430: i64, out_$i431: i32, out_$i432: i64, out_$i433: i64, out_$i434: i32, out_$p435: ref, out_$p436: ref, out_$p437: ref, out_$p438: ref, out_$p439: ref, out_$p440: ref, out_$p441: ref, out_$p442: ref, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i32, out_$p475: ref, out_$p476: ref, out_$p477: ref, out_$i478: i32, out_$p479: ref, out_$p480: ref, out_$p481: ref, out_$p482: ref, out_$p483: ref, out_$i484: i32, out_$p485: ref, out_$i486: i64, out_$i487: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb90(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p355: ref, in_$p356: ref, in_$p357: ref, in_$p358: ref, in_$p359: ref, in_$i360: i64, in_$p361: ref, in_$i362: i64, in_$i363: i32, in_$i364: i64, in_$i365: i64, in_$i366: i32, in_$p367: ref, in_$p368: ref, in_$p369: ref, in_$p370: ref, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i32, in_$p407: ref, in_$p408: ref, in_$p409: ref, in_$i410: i32, in_$p411: ref, in_$p412: ref, in_$p413: ref, in_$p414: ref, in_$p415: ref, in_$i416: i32, in_$p417: ref, in_$i418: i64, in_$i419: i1) returns (out_$i46: i32, out_$p355: ref, out_$p356: ref, out_$p357: ref, out_$p358: ref, out_$p359: ref, out_$i360: i64, out_$p361: ref, out_$i362: i64, out_$i363: i32, out_$i364: i64, out_$i365: i64, out_$i366: i32, out_$p367: ref, out_$p368: ref, out_$p369: ref, out_$p370: ref, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i32, out_$p407: ref, out_$p408: ref, out_$p409: ref, out_$i410: i32, out_$p411: ref, out_$p412: ref, out_$p413: ref, out_$p414: ref, out_$p415: ref, out_$i416: i32, out_$p417: ref, out_$i418: i64, out_$i419: i1)
{

  entry:
    out_$i46, out_$p355, out_$p356, out_$p357, out_$p358, out_$p359, out_$i360, out_$p361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$p367, out_$p368, out_$p369, out_$p370, out_$p371, out_$p372, out_$p373, out_$p374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p407, out_$p408, out_$p409, out_$i410, out_$p411, out_$p412, out_$p413, out_$p414, out_$p415, out_$i416, out_$p417, out_$i418, out_$i419 := in_$i46, in_$p355, in_$p356, in_$p357, in_$p358, in_$p359, in_$i360, in_$p361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$p367, in_$p368, in_$p369, in_$p370, in_$p371, in_$p372, in_$p373, in_$p374, in_$i375, in_$p376, in_$i377, in_$i378, in_$p407, in_$p408, in_$p409, in_$i410, in_$p411, in_$p412, in_$p413, in_$p414, in_$p415, in_$i416, in_$p417, in_$i418, in_$i419;
    goto $bb90, exit;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  $bb102:
    assume out_$i419 == 1;
    assume {:verifier.code 0} true;
    out_$p355 := out_$p417;
    goto $bb102_dummy;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i46 := 5;
    assume true;
    goto $bb102;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i419 := $ne.i64(out_$i418, 0);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i418 := $p2i.ref.i64(out_$p417);
    goto corral_source_split_3688;

  SeqInstr_126:
    goto corral_source_split_3687;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_$p417 := alloc_skb(2048, 32);
    goto SeqInstr_125;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i416);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i416 := $load.i32($M.0, out_$p415);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p414);
    out_$p415 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$p414 := $load.ref($M.0, out_$p413);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p412);
    out_$p413 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p412 := $load.ref($M.0, out_$p411);
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i366);
    out_$p411 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i363);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p361);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i410);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i410 := $load.i32($M.0, out_$p409);
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$p409 := $add.ref($add.ref(out_$p355, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p408);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$p408 := $load.ref($M.0, out_$p407);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$p407 := $add.ref($add.ref(out_$p355, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p355);
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3669;

  $bb91:
    assume out_$i375 == 1;
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$p376, out_$i377, out_$i378 := out_$p355, out_$i363, out_$i366;
    assume true;
    goto $bb91;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i363, 0);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p374, $0.ref);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$p374 := $add.ref($add.ref(out_$p373, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p373 := $bitcast.ref.ref(out_$p372);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref(out_$p355, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p371, 0);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref($add.ref(out_$p370, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$p370 := $bitcast.ref.ref(out_$p369);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$p369 := $load.ref($M.0, out_$p368);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$p368 := $add.ref($add.ref(out_$p355, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p367, 34);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p367 := $add.ref($add.ref(out_$p355, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i366 := $trunc.i64.i32(out_$i365);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i365 := $lshr.i64(out_$i364, 32);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i364 := $p2i.ref.i64(out_$p361);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$i363 := $trunc.i64.i32(out_$i362);
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i362 := $p2i.ref.i64(out_$p361);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$p361 := $i2p.i64.ref(out_$i360);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} out_$i360 := pci_map_single(out_$p357, out_$p359, 2048, 2);
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$p359 := $load.ref($M.0, out_$p358);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(out_$p355, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p357 := $load.ref($M.0, out_$p356);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p356 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3644;

  $bb102_dummy:
    call {:si_unique_call 1} out_$i46, out_$p355, out_$p356, out_$p357, out_$p358, out_$p359, out_$i360, out_$p361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$p367, out_$p368, out_$p369, out_$p370, out_$p371, out_$p372, out_$p373, out_$p374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p407, out_$p408, out_$p409, out_$i410, out_$p411, out_$p412, out_$p413, out_$p414, out_$p415, out_$i416, out_$p417, out_$i418, out_$i419 := slic_rcvqueue_fill_loop_$bb90(in_$p0, in_$p4, out_$i46, out_$p355, out_$p356, out_$p357, out_$p358, out_$p359, out_$i360, out_$p361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$p367, out_$p368, out_$p369, out_$p370, out_$p371, out_$p372, out_$p373, out_$p374, out_$i375, out_$p376, out_$i377, out_$i378, out_$p407, out_$p408, out_$p409, out_$i410, out_$p411, out_$p412, out_$p413, out_$p414, out_$p415, out_$i416, out_$p417, out_$i418, out_$i419);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb90(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p355: ref, in_$p356: ref, in_$p357: ref, in_$p358: ref, in_$p359: ref, in_$i360: i64, in_$p361: ref, in_$i362: i64, in_$i363: i32, in_$i364: i64, in_$i365: i64, in_$i366: i32, in_$p367: ref, in_$p368: ref, in_$p369: ref, in_$p370: ref, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i32, in_$p407: ref, in_$p408: ref, in_$p409: ref, in_$i410: i32, in_$p411: ref, in_$p412: ref, in_$p413: ref, in_$p414: ref, in_$p415: ref, in_$i416: i32, in_$p417: ref, in_$i418: i64, in_$i419: i1) returns (out_$i46: i32, out_$p355: ref, out_$p356: ref, out_$p357: ref, out_$p358: ref, out_$p359: ref, out_$i360: i64, out_$p361: ref, out_$i362: i64, out_$i363: i32, out_$i364: i64, out_$i365: i64, out_$i366: i32, out_$p367: ref, out_$p368: ref, out_$p369: ref, out_$p370: ref, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i32, out_$p407: ref, out_$p408: ref, out_$p409: ref, out_$i410: i32, out_$p411: ref, out_$p412: ref, out_$p413: ref, out_$p414: ref, out_$p415: ref, out_$i416: i32, out_$p417: ref, out_$i418: i64, out_$i419: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb74(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p287: ref, in_$p288: ref, in_$p289: ref, in_$p290: ref, in_$p291: ref, in_$i292: i64, in_$p293: ref, in_$i294: i64, in_$i295: i32, in_$i296: i64, in_$i297: i64, in_$i298: i32, in_$p299: ref, in_$p300: ref, in_$p301: ref, in_$p302: ref, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i1, in_$p308: ref, in_$i309: i32, in_$i310: i32, in_$p339: ref, in_$p340: ref, in_$p341: ref, in_$i342: i32, in_$p343: ref, in_$p344: ref, in_$p345: ref, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$p349: ref, in_$i350: i64, in_$i351: i1) returns (out_$i46: i32, out_$p287: ref, out_$p288: ref, out_$p289: ref, out_$p290: ref, out_$p291: ref, out_$i292: i64, out_$p293: ref, out_$i294: i64, out_$i295: i32, out_$i296: i64, out_$i297: i64, out_$i298: i32, out_$p299: ref, out_$p300: ref, out_$p301: ref, out_$p302: ref, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i1, out_$p308: ref, out_$i309: i32, out_$i310: i32, out_$p339: ref, out_$p340: ref, out_$p341: ref, out_$i342: i32, out_$p343: ref, out_$p344: ref, out_$p345: ref, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$p349: ref, out_$i350: i64, out_$i351: i1)
{

  entry:
    out_$i46, out_$p287, out_$p288, out_$p289, out_$p290, out_$p291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$p300, out_$p301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$p308, out_$i309, out_$i310, out_$p339, out_$p340, out_$p341, out_$i342, out_$p343, out_$p344, out_$p345, out_$p346, out_$p347, out_$i348, out_$p349, out_$i350, out_$i351 := in_$i46, in_$p287, in_$p288, in_$p289, in_$p290, in_$p291, in_$i292, in_$p293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$p299, in_$p300, in_$p301, in_$p302, in_$p303, in_$p304, in_$p305, in_$p306, in_$i307, in_$p308, in_$i309, in_$i310, in_$p339, in_$p340, in_$p341, in_$i342, in_$p343, in_$p344, in_$p345, in_$p346, in_$p347, in_$i348, in_$p349, in_$i350, in_$i351;
    goto $bb74, exit;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  $bb86:
    assume out_$i351 == 1;
    assume {:verifier.code 0} true;
    out_$p287 := out_$p349;
    goto $bb86_dummy;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i46 := 4;
    assume true;
    goto $bb86;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$i351 := $ne.i64(out_$i350, 0);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i350 := $p2i.ref.i64(out_$p349);
    goto corral_source_split_3595;

  SeqInstr_120:
    goto corral_source_split_3594;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} out_$p349 := alloc_skb(2048, 32);
    goto SeqInstr_119;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i348);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i348 := $load.i32($M.0, out_$p347);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p346);
    out_$p347 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p346 := $load.ref($M.0, out_$p345);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p344);
    out_$p345 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$p344 := $load.ref($M.0, out_$p343);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i298);
    out_$p343 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i295);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p293);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i342);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i342 := $load.i32($M.0, out_$p341);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$p341 := $add.ref($add.ref(out_$p287, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p340);
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$p340 := $load.ref($M.0, out_$p339);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$p339 := $add.ref($add.ref(out_$p287, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p287);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3576;

  $bb75:
    assume out_$i307 == 1;
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$p308, out_$i309, out_$i310 := out_$p287, out_$i295, out_$i298;
    assume true;
    goto $bb75;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i295, 0);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p306, $0.ref);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(out_$p305, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p305 := $bitcast.ref.ref(out_$p304);
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(out_$p287, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p303, 0);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref(out_$p302, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$p302 := $bitcast.ref.ref(out_$p301);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$p301 := $load.ref($M.0, out_$p300);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$p300 := $add.ref($add.ref(out_$p287, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p299, 34);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$p299 := $add.ref($add.ref(out_$p287, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i298 := $trunc.i64.i32(out_$i297);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i297 := $lshr.i64(out_$i296, 32);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i296 := $p2i.ref.i64(out_$p293);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i295 := $trunc.i64.i32(out_$i294);
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$i294 := $p2i.ref.i64(out_$p293);
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$p293 := $i2p.i64.ref(out_$i292);
    goto corral_source_split_3556;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} out_$i292 := pci_map_single(out_$p289, out_$p291, 2048, 2);
    goto corral_source_split_3555;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$p291 := $load.ref($M.0, out_$p290);
    goto corral_source_split_3554;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref(out_$p287, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$p289 := $load.ref($M.0, out_$p288);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3551;

  $bb86_dummy:
    call {:si_unique_call 1} out_$i46, out_$p287, out_$p288, out_$p289, out_$p290, out_$p291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$p300, out_$p301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$p308, out_$i309, out_$i310, out_$p339, out_$p340, out_$p341, out_$i342, out_$p343, out_$p344, out_$p345, out_$p346, out_$p347, out_$i348, out_$p349, out_$i350, out_$i351 := slic_rcvqueue_fill_loop_$bb74(in_$p0, in_$p4, out_$i46, out_$p287, out_$p288, out_$p289, out_$p290, out_$p291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$p300, out_$p301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$p308, out_$i309, out_$i310, out_$p339, out_$p340, out_$p341, out_$i342, out_$p343, out_$p344, out_$p345, out_$p346, out_$p347, out_$i348, out_$p349, out_$i350, out_$i351);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb74(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p287: ref, in_$p288: ref, in_$p289: ref, in_$p290: ref, in_$p291: ref, in_$i292: i64, in_$p293: ref, in_$i294: i64, in_$i295: i32, in_$i296: i64, in_$i297: i64, in_$i298: i32, in_$p299: ref, in_$p300: ref, in_$p301: ref, in_$p302: ref, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i1, in_$p308: ref, in_$i309: i32, in_$i310: i32, in_$p339: ref, in_$p340: ref, in_$p341: ref, in_$i342: i32, in_$p343: ref, in_$p344: ref, in_$p345: ref, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$p349: ref, in_$i350: i64, in_$i351: i1) returns (out_$i46: i32, out_$p287: ref, out_$p288: ref, out_$p289: ref, out_$p290: ref, out_$p291: ref, out_$i292: i64, out_$p293: ref, out_$i294: i64, out_$i295: i32, out_$i296: i64, out_$i297: i64, out_$i298: i32, out_$p299: ref, out_$p300: ref, out_$p301: ref, out_$p302: ref, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i1, out_$p308: ref, out_$i309: i32, out_$i310: i32, out_$p339: ref, out_$p340: ref, out_$p341: ref, out_$i342: i32, out_$p343: ref, out_$p344: ref, out_$p345: ref, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$p349: ref, out_$i350: i64, out_$i351: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb58(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$i224: i64, in_$p225: ref, in_$i226: i64, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$i230: i32, in_$p231: ref, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p237: ref, in_$p238: ref, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$i280: i32, in_$p281: ref, in_$i282: i64, in_$i283: i1) returns (out_$i46: i32, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$i224: i64, out_$p225: ref, out_$i226: i64, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$i230: i32, out_$p231: ref, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p237: ref, out_$p238: ref, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$i280: i32, out_$p281: ref, out_$i282: i64, out_$i283: i1)
{

  entry:
    out_$i46, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p237, out_$p238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p271, out_$p272, out_$p273, out_$i274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283 := in_$i46, in_$p219, in_$p220, in_$p221, in_$p222, in_$p223, in_$i224, in_$p225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$p231, in_$p232, in_$p233, in_$p234, in_$p235, in_$p236, in_$p237, in_$p238, in_$i239, in_$p240, in_$i241, in_$i242, in_$p271, in_$p272, in_$p273, in_$i274, in_$p275, in_$p276, in_$p277, in_$p278, in_$p279, in_$i280, in_$p281, in_$i282, in_$i283;
    goto $bb58, exit;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  $bb70:
    assume out_$i283 == 1;
    assume {:verifier.code 0} true;
    out_$p219 := out_$p281;
    goto $bb70_dummy;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i46 := 3;
    assume true;
    goto $bb70;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i283 := $ne.i64(out_$i282, 0);
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    out_$i282 := $p2i.ref.i64(out_$p281);
    goto corral_source_split_3502;

  SeqInstr_114:
    goto corral_source_split_3501;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} out_$p281 := alloc_skb(2048, 32);
    goto SeqInstr_113;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3500;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i280);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.0, out_$p279);
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p278);
    out_$p279 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$p278 := $load.ref($M.0, out_$p277);
    goto corral_source_split_3496;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p276);
    out_$p277 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    out_$p276 := $load.ref($M.0, out_$p275);
    goto corral_source_split_3494;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i230);
    out_$p275 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i227);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p225);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i274);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i32($M.0, out_$p273);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(out_$p219, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p272);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p272 := $load.ref($M.0, out_$p271);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p219, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p219);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3483;

  $bb59:
    assume out_$i239 == 1;
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p240, out_$i241, out_$i242 := out_$p219, out_$i227, out_$i230;
    assume true;
    goto $bb59;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i227, 0);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p238, $0.ref);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(out_$p237, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$p237 := $bitcast.ref.ref(out_$p236);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$p236 := $add.ref($add.ref(out_$p219, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p235, 0);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(out_$p234, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$p234 := $bitcast.ref.ref(out_$p233);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$p233 := $load.ref($M.0, out_$p232);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref(out_$p219, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p231, 34);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref($add.ref(out_$p219, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i230 := $trunc.i64.i32(out_$i229);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i229 := $lshr.i64(out_$i228, 32);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i228 := $p2i.ref.i64(out_$p225);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i227 := $trunc.i64.i32(out_$i226);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i226 := $p2i.ref.i64(out_$p225);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$p225 := $i2p.i64.ref(out_$i224);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} out_$i224 := pci_map_single(out_$p221, out_$p223, 2048, 2);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p223 := $load.ref($M.0, out_$p222);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(out_$p219, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$p221 := $load.ref($M.0, out_$p220);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3458;

  $bb70_dummy:
    call {:si_unique_call 1} out_$i46, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p237, out_$p238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p271, out_$p272, out_$p273, out_$i274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283 := slic_rcvqueue_fill_loop_$bb58(in_$p0, in_$p4, out_$i46, out_$p219, out_$p220, out_$p221, out_$p222, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p231, out_$p232, out_$p233, out_$p234, out_$p235, out_$p236, out_$p237, out_$p238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p271, out_$p272, out_$p273, out_$i274, out_$p275, out_$p276, out_$p277, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb58(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p223: ref, in_$i224: i64, in_$p225: ref, in_$i226: i64, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$i230: i32, in_$p231: ref, in_$p232: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p237: ref, in_$p238: ref, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$i280: i32, in_$p281: ref, in_$i282: i64, in_$i283: i1) returns (out_$i46: i32, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p223: ref, out_$i224: i64, out_$p225: ref, out_$i226: i64, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$i230: i32, out_$p231: ref, out_$p232: ref, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p237: ref, out_$p238: ref, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$i280: i32, out_$p281: ref, out_$i282: i64, out_$i283: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb42(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$p157: ref, in_$i158: i64, in_$i159: i32, in_$i160: i64, in_$i161: i64, in_$i162: i32, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i32, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$i206: i32, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$i212: i32, in_$p213: ref, in_$i214: i64, in_$i215: i1) returns (out_$i46: i32, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$p157: ref, out_$i158: i64, out_$i159: i32, out_$i160: i64, out_$i161: i64, out_$i162: i32, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i32, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$i206: i32, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$i212: i32, out_$p213: ref, out_$i214: i64, out_$i215: i1)
{

  entry:
    out_$i46, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p203, out_$p204, out_$p205, out_$i206, out_$p207, out_$p208, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215 := in_$i46, in_$p151, in_$p152, in_$p153, in_$p154, in_$p155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p169, in_$p170, in_$i171, in_$p172, in_$i173, in_$i174, in_$p203, in_$p204, in_$p205, in_$i206, in_$p207, in_$p208, in_$p209, in_$p210, in_$p211, in_$i212, in_$p213, in_$i214, in_$i215;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;

  $bb54:
    assume out_$i215 == 1;
    assume {:verifier.code 0} true;
    out_$p151 := out_$p213;
    goto $bb54_dummy;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i46 := 2;
    assume true;
    goto $bb54;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i64(out_$i214, 0);
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i214 := $p2i.ref.i64(out_$p213);
    goto corral_source_split_3409;

  SeqInstr_108:
    goto corral_source_split_3408;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} out_$p213 := alloc_skb(2048, 32);
    goto SeqInstr_107;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i212);
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.0, out_$p211);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p210);
    out_$p211 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$p210 := $load.ref($M.0, out_$p209);
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p208);
    out_$p209 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$p208 := $load.ref($M.0, out_$p207);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i162);
    out_$p207 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i159);
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p157);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i206);
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.0, out_$p205);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(out_$p151, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p204);
    goto corral_source_split_3394;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$p204 := $load.ref($M.0, out_$p203);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(out_$p151, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p151);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3390;

  $bb43:
    assume out_$i171 == 1;
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$p172, out_$i173, out_$i174 := out_$p151, out_$i159, out_$i162;
    assume true;
    goto $bb43;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i159, 0);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p170, $0.ref);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(out_$p169, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p169 := $bitcast.ref.ref(out_$p168);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(out_$p151, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p167, 0);
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(out_$p166, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$p166 := $bitcast.ref.ref(out_$p165);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$p165 := $load.ref($M.0, out_$p164);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p151, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p163, 34);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p151, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i64.i32(out_$i161);
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$i161 := $lshr.i64(out_$i160, 32);
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i160 := $p2i.ref.i64(out_$p157);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i64.i32(out_$i158);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$i158 := $p2i.ref.i64(out_$p157);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$p157 := $i2p.i64.ref(out_$i156);
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_$i156 := pci_map_single(out_$p153, out_$p155, 2048, 2);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.0, out_$p154);
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(out_$p151, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.0, out_$p152);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3365;

  $bb54_dummy:
    call {:si_unique_call 1} out_$i46, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p203, out_$p204, out_$p205, out_$i206, out_$p207, out_$p208, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215 := slic_rcvqueue_fill_loop_$bb42(in_$p0, in_$p4, out_$i46, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p203, out_$p204, out_$p205, out_$i206, out_$p207, out_$p208, out_$p209, out_$p210, out_$p211, out_$i212, out_$p213, out_$i214, out_$i215);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb42(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$p157: ref, in_$i158: i64, in_$i159: i32, in_$i160: i64, in_$i161: i64, in_$i162: i32, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i32, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$i206: i32, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$i212: i32, in_$p213: ref, in_$i214: i64, in_$i215: i1) returns (out_$i46: i32, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$p157: ref, out_$i158: i64, out_$i159: i32, out_$i160: i64, out_$i161: i64, out_$i162: i32, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i32, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$i206: i32, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$i212: i32, out_$p213: ref, out_$i214: i64, out_$i215: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb26(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i64, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$p145: ref, in_$i146: i64, in_$i147: i1) returns (out_$i46: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i64, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$p145: ref, out_$i146: i64, out_$i147: i1)
{

  entry:
    out_$i46, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p135, out_$p136, out_$p137, out_$i138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147 := in_$i46, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$p102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p135, in_$p136, in_$p137, in_$i138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$p145, in_$i146, in_$i147;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  $bb38:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$p83 := out_$p145;
    goto $bb38_dummy;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i46 := 1;
    assume true;
    goto $bb38;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i64(out_$i146, 0);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i146 := $p2i.ref.i64(out_$p145);
    goto corral_source_split_3316;

  SeqInstr_102:
    goto corral_source_split_3315;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} out_$p145 := alloc_skb(2048, 32);
    goto SeqInstr_101;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i144);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.0, out_$p143);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p142);
    out_$p143 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.0, out_$p141);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p140);
    out_$p141 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i94);
    out_$p139 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i91);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p89);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i138);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.0, out_$p137);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p136);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.0, out_$p135);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p83, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p83);
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3297;

  $bb27:
    assume out_$i103 == 1;
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$p104, out_$i105, out_$i106 := out_$p83, out_$i91, out_$i94;
    assume true;
    goto $bb27;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i91, 0);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p102, $0.ref);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$p101 := $bitcast.ref.ref(out_$p100);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p83, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p99, 0);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p98, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$p98 := $bitcast.ref.ref(out_$p97);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p83, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p95, 34);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i64.i32(out_$i93);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i93 := $lshr.i64(out_$i92, 32);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i91 := $trunc.i64.i32(out_$i90);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$p89 := $i2p.i64.ref(out_$i88);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} out_$i88 := pci_map_single(out_$p85, out_$p87, 2048, 2);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p83, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3272;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i46, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p135, out_$p136, out_$p137, out_$i138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147 := slic_rcvqueue_fill_loop_$bb26(in_$p0, in_$p4, out_$i46, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p135, out_$p136, out_$p137, out_$i138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$p145, out_$i146, out_$i147);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb26(in_$p0: ref, in_$p4: ref, in_$i46: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i64, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i1, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i32, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$p145: ref, in_$i146: i64, in_$i147: i1) returns (out_$i46: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i64, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i1, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i32, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$p145: ref, out_$i146: i64, out_$i147: i1);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_fill_loop_$bb6(in_$p0: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i46: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i46: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p30, out_$i31, out_$i32, out_$i46 := in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p30, in_$i31, in_$i32, in_$i46;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;

  $bb9:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p43;
    goto $bb9_dummy;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i46 := 0;
    assume true;
    goto $bb9;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_3213;

  SeqInstr_96:
    goto corral_source_split_3212;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} out_$p43 := alloc_skb(2048, 32);
    goto SeqInstr_95;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} dev_err.ref.ref(in_$p4, .str.13);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} dev_err.ref.ref.i32(in_$p4, .str.12, out_$i42);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} dev_err.ref.ref.ref(in_$p4, .str.11, out_$p40);
    out_$p41 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(16, 1));
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} dev_err.ref.ref.ref(in_$p4, .str.10, out_$p38);
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(8, 1));
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} dev_err.ref.ref.i32(in_$p4, .str.9, out_$i20);
    out_$p37 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} dev_err.ref.ref.i32(in_$p4, .str.8, out_$i17);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} dev_err.ref.ref.ref(in_$p4, .str.7, out_$p15);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} dev_err.ref.ref.i32(in_$p4, .str.6, out_$i36);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} dev_err.ref.ref.ref(in_$p4, .str.5, out_$p34);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} dev_err.ref.ref.ref(in_$p4, .str.4, out_$p9);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} dev_err.ref.ref.ref(in_$p4, .str.2, .str.3);
    goto corral_source_split_3194;

  $bb7:
    assume out_$i29 == 1;
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$i32 := out_$p9, out_$i17, out_$i20;
    assume true;
    goto $bb7;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i17, 0);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p28, $0.ref);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p25, 0);
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p21, 34);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i64.i32(out_$i19);
    call {:si_unique_call 517} {:cexpr "paddrh"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i19 := $lshr.i64(out_$i18, 32);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i64.i32(out_$i16);
    call {:si_unique_call 516} {:cexpr "paddrl"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$p15 := $i2p.i64.ref(out_$i14);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$i14 := pci_map_single(out_$p11, out_$p13, 2048, 2);
    call {:si_unique_call 515} {:cexpr "tmp"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_3169;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p30, out_$i31, out_$i32, out_$i46 := slic_rcvqueue_fill_loop_$bb6(in_$p0, in_$p4, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p30, out_$i31, out_$i32, out_$i46);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_fill_loop_$bb6(in_$p0: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i46: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i46: i32);
  modifies assertsPassed, $M.0;



implementation slic_rcvqueue_free_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17 := in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb6_dummy;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, in_$p2);
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} consume_skb(out_$p7);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, out_$p13);
    goto corral_source_split_4675;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4669;

  $bb5:
    out_$p6 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4668;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17 := slic_rcvqueue_free_loop_$bb4(in_$p0, in_$p2, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_free_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1);
  modifies $M.0;



implementation slic_cmdq_free_loop_$bb4(in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p6: ref) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p6 := in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4707;

  $bb12:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p16;
    goto $bb12_dummy;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_4725;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(344, 1));
    goto corral_source_split_4724;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} dev_kfree_skb_irq(out_$p11);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, $0.ref);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_4720;

  $bb8:
    assume out_$i13 == 1;
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_4714;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_4710;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(312, 1));
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p6 := slic_cmdq_free_loop_$bb4(out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p6);
    return;

  exit:
    return;
}



procedure slic_cmdq_free_loop_$bb4(in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p6: ref) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p6: ref);
  modifies $M.0;



implementation slic_rspqueue_free_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i5 := in_$i6, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$i14, in_$p16, in_$p17, in_$p18, in_$i19, in_$p21, in_$i22, in_$i23, in_$p25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;

  $bb9:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i29;
    goto $bb9_dummy;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i31 := $ult.i32(out_$i29, out_$i30);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p2);
    goto corral_source_split_5219;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i5, 1);
    call {:si_unique_call 824} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p28, 0);
    goto corral_source_split_5217;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i5);
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref(out_$i26, 8));
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, $0.ref);
    goto corral_source_split_5215;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i5);
    out_$p25 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref(out_$i23, 8));
    goto corral_source_split_5214;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} pci_free_consistent(out_$p13, 4096, out_$p18, out_$i22);
    goto corral_source_split_5212;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i5);
    out_$p21 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(104, 1)), $mul.ref(out_$i19, 8));
    goto corral_source_split_5210;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_5209;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_5208;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i5);
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_5207;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_5206;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(200, 1));
    goto corral_source_split_5205;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_5202;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_5201;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_5200;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    out_$p8 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(776, 1)), $mul.ref(24, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i5 := slic_rspqueue_free_loop_$bb4(in_$p0, in_$p2, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i5);
    return;

  exit:
    return;
}



procedure slic_rspqueue_free_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i5: i32);
  modifies $M.0;



implementation slic_interrupt_card_up_loop_$bb13(in_$p1: ref, in_$p22: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1) returns (out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28 := in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb19_dummy;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i28 := $ule.i32(out_$i27, 239);
    goto corral_source_split_5576;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p22);
    goto corral_source_split_5575;

  $bb16:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_5571;

  SeqInstr_204:
    call {:si_unique_call 887} {:cexpr "count"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_5570;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_$i25 := slic_rcvqueue_fill(in_$p1);
    goto SeqInstr_203;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28 := slic_interrupt_card_up_loop_$bb13(in_$p1, in_$p22, out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure slic_interrupt_card_up_loop_$bb13(in_$p1: ref, in_$p22: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1) returns (out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1);
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rcv_handler_loop_$bb24(in_$p0: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i8: i32, in_$p10: ref, in_$i33: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32) returns (out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p10: ref, out_$i33: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32)
{

  entry:
    out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p10, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := in_$p9, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p10, in_$i33, in_vslice_dummy_var_74, in_vslice_dummy_var_75;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  $bb9:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p30;
    goto $bb9_dummy;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i33 := in_$i8;
    assume true;
    goto $bb9;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_6016;

  SeqInstr_225:
    goto corral_source_split_6015;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_$p30 := slic_rcvqueue_getnext(in_$p0);
    goto SeqInstr_224;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_vslice_dummy_var_74 := slic_rcvqueue_reinsert(in_$p0, out_$p10);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} slic_rcv_handle_error(in_$p0, out_$p12);
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, out_$i27);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(12188, 1));
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i26, 1);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_6008;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(12188, 1));
    goto corral_source_split_6007;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, 268435456);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p20, out_$i17);
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 1);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5990;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p10, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5989;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_vslice_dummy_var_75 := slic_rcvqueue_reinsert(in_$p0, out_$p10);
    goto corral_source_split_6033;

  $bb15:
    assume out_$i40 == 1;
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$p41, out_$p42 := out_$p10, out_$p11;
    assume true;
    goto $bb15;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_6030;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6029;

  $bb13:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := 1;
    goto $bb14;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb14;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_$i36 := slic_mac_filter(in_$p0, out_$p35);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_6022;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p12, $mul.ref(0, 2048)), $mul.ref(34, 1));
    goto corral_source_split_6021;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p10, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := slic_rcv_handler_loop_$bb24(in_$p0, out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, in_$i8, out_$p10, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75);
    return;

  exit:
    return;
}



procedure slic_rcv_handler_loop_$bb24(in_$p0: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i8: i32, in_$p10: ref, in_$i33: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32) returns (out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p10: ref, out_$i33: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32);
  modifies $M.0, $M.2, assertsPassed;



implementation slic_rcv_handler_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p54: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i16, in_$p72: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p7: ref, in_$i8: i32, in_$p10: ref, in_$i85: i32, in_$i33: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: ref, in_vslice_dummy_var_77: ref, in_vslice_dummy_var_78: i32) returns (out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p54: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i16, out_$p72: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p7: ref, out_$i8: i32, out_$p10: ref, out_$i85: i32, out_$i33: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: ref, out_vslice_dummy_var_77: ref, out_vslice_dummy_var_78: i32)
{

  entry:
    out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i74, out_$i75, out_$i76, out_$p82, out_$i83, out_$i84, out_$p7, out_$i8, out_$p10, out_$i85, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78 := in_$p9, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p45, in_$i46, in_$i47, in_$p50, in_$i51, in_$i52, in_$p54, in_$p56, in_$i57, in_$i58, in_$i59, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i74, in_$i75, in_$i76, in_$p82, in_$i83, in_$i84, in_$p7, in_$i8, in_$p10, in_$i85, in_$i33, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;

  $bb22:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p82, out_$i74;
    goto $bb22_dummy;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i74;
    assume true;
    goto $bb22;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_6082;

  SeqInstr_228:
    goto corral_source_split_6081;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_$p82 := slic_rcvqueue_getnext(in_$p0);
    goto SeqInstr_227;

  $bb19:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i74;
    assume true;
    goto $bb19;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$i75 := $ugt.i32(out_$i74, 1023);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i8, 1);
    call {:si_unique_call 928} {:cexpr "frames"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_vslice_dummy_var_78 := netif_rx(out_$p41);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p72, out_$i71);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p41, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} out_$i71 := eth_type_trans(out_$p41, out_$p70);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p41, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p68, out_$p67);
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p41, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(48, 1));
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i65);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i65 := $or.i32(out_$i64, 512);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, $sub.i32(0, 1537));
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p41, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p61, out_$i59);
    goto corral_source_split_6050;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6049;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i64(out_$i57, out_$i58);
    goto corral_source_split_6048;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i47);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.0, out_$p56);
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p54, out_$i52);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 1);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} out_vslice_dummy_var_77 := skb_put(out_$p41, out_$i47);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 65535);
    call {:si_unique_call 924} {:cexpr "rx_bytes"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p42, $mul.ref(0, 2048)), $mul.ref(20, 1));
    goto corral_source_split_6036;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} out_vslice_dummy_var_76 := skb_pull(out_$p41, 34);
    goto corral_source_split_6035;

  $bb16:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$p41, out_$p42 := out_$p10, out_$p11;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_6030;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6029;

  $bb13:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := 1;
    goto $bb14;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb14;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_$i36 := slic_mac_filter(in_$p0, out_$p35);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_6022;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p12, $mul.ref(0, 2048)), $mul.ref(34, 1));
    goto corral_source_split_6021;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, 268435456);
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p20, out_$i17);
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 1);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5990;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p10, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5989;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24:
    call out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p10, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := slic_rcv_handler_loop_$bb24(in_$p0, out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i8, out_$p10, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$p10 := out_$p7;
    goto $bb24;

  $bb9:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p30;
    assume false;
    return;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i8;
    assume true;
    goto $bb9;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_6016;

  SeqInstr_225:
    goto corral_source_split_6015;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_$p30 := slic_rcvqueue_getnext(in_$p0);
    goto SeqInstr_224;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_vslice_dummy_var_74 := slic_rcvqueue_reinsert(in_$p0, out_$p10);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} slic_rcv_handle_error(in_$p0, out_$p12);
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, out_$i27);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(12188, 1));
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i26, 1);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_6008;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(12188, 1));
    goto corral_source_split_6007;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_6006;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_vslice_dummy_var_75 := slic_rcvqueue_reinsert(in_$p0, out_$p10);
    goto corral_source_split_6033;

  $bb15:
    assume out_$i40 == 1;
    goto corral_source_split_6032;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i74, out_$i75, out_$i76, out_$p82, out_$i83, out_$i84, out_$p7, out_$i8, out_$p10, out_$i85, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78 := slic_rcv_handler_loop_$bb4(in_$p0, in_$p2, out_$p9, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i74, out_$i75, out_$i76, out_$p82, out_$i83, out_$i84, out_$p7, out_$i8, out_$p10, out_$i85, out_$i33, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78);
    return;

  exit:
    return;
}



procedure slic_rcv_handler_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p54: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i16, in_$p72: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p7: ref, in_$i8: i32, in_$p10: ref, in_$i85: i32, in_$i33: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: ref, in_vslice_dummy_var_77: ref, in_vslice_dummy_var_78: i32) returns (out_$p9: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p54: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i16, out_$p72: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p7: ref, out_$i8: i32, out_$p10: ref, out_$i85: i32, out_$i33: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: ref, out_vslice_dummy_var_77: ref, out_vslice_dummy_var_78: i32);
  modifies $M.0, $M.2, assertsPassed;



implementation slic_xmit_complete_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i32, in_$p6: ref, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i1) returns (out_$i8: i32, out_$p6: ref, out_$i7: i32, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i1)
{

  entry:
    out_$i8, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50 := in_$i8, in_$p6, in_$i7, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$p6, out_$i7 := out_$p48, out_$i47;
    goto $bb14_dummy;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i47;
    assume true;
    goto $bb14;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} out_$p48 := slic_rspqueue_getnext(in_$p0);
    goto corral_source_split_6162;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i7, 1);
    call {:si_unique_call 936} {:cexpr "frames"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, 0);
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, 0);
    goto corral_source_split_6158;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p6, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6157;

  $bb9:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} slic_cmdq_putdone_irq(in_$p0, out_$p35);
    goto corral_source_split_6155;

  $bb11:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} dev_kfree_skb_irq(out_$p44);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p35, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_6151;

  $bb10:
    assume out_$i42 == 1;
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p35, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_6145;

  $bb8:
    assume out_$i38 == 1;
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 3);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 352)), $mul.ref(292, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(1800, 1)), $mul.ref(out_$i30, 40)), $mul.ref(8, 1));
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.24, out_$p27);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, out_$p24, out_$i22);
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p20, out_$i17);
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 1);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 768)), $mul.ref(36, 1));
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(8, 1));
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p12, out_$i11);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(12224, 1));
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_6113;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(12224, 1));
    goto corral_source_split_6112;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i8, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50 := slic_xmit_complete_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p6, out_$i7, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50);
    return;

  exit:
    return;
}



procedure slic_xmit_complete_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i32, in_$p6: ref, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i64, in_$i50: i1) returns (out_$i8: i32, out_$p6: ref, out_$i7: i32, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i64, out_$i50: i1);
  modifies $M.0, $M.2, $M.24;



implementation slic_mac_filter_loop_$bb21(in_$p1: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i1, in_$i49: i8, in_$i50: i1, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p43: ref) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i1, out_$i49: i8, out_$i50: i1, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p43: ref)
{

  entry:
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p61, out_$p62, out_$i63, out_$i64, out_$p43 := in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p61, in_$p62, in_$i63, in_$i64, in_$p43;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;

  $bb26:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p62;
    goto $bb26_dummy;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_6840;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p43, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6839;

  $bb24:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i8.i1(out_$i49);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i8(out_$i48);
    call {:si_unique_call 969} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i49);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_$i48 := ether_addr_equal(out_$p45, out_$p47);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_6822;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_6820;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p61, out_$p62, out_$i63, out_$i64, out_$p43 := slic_mac_filter_loop_$bb21(in_$p1, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p61, out_$p62, out_$i63, out_$i64, out_$p43);
    return;

  exit:
    return;
}



procedure slic_mac_filter_loop_$bb21(in_$p1: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i1, in_$i49: i8, in_$i50: i1, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p43: ref) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i1, out_$i49: i8, out_$i50: i1, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p43: ref);



implementation slic_rcvqueue_getnext_loop_$bb10(in_$p0: ref, in_$p34: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1) returns (out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i37, out_$i38, out_$i39, out_$i40 := in_$i37, in_$i38, in_$i39, in_$i40;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i40 == 1;
    goto $bb16_dummy;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$i40 := $ule.i32(out_$i39, 239);
    goto corral_source_split_6920;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, in_$p34);
    goto corral_source_split_6919;

  $bb13:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_6912;

  SeqInstr_231:
    call {:si_unique_call 980} {:cexpr "count"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_6911;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_$i37 := slic_rcvqueue_fill(in_$p0);
    goto SeqInstr_230;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i37, out_$i38, out_$i39, out_$i40 := slic_rcvqueue_getnext_loop_$bb10(in_$p0, in_$p34, out_$i37, out_$i38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure slic_rcvqueue_getnext_loop_$bb10(in_$p0: ref, in_$p34: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1) returns (out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1);
  modifies $M.0, $M.2, assertsPassed;



implementation slic_entry_remove_loop_$bb17(in_$i34: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p37: ref, in_$p44: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p37: ref, out_$p44: ref)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p37, out_$p44 := in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p37, in_$p44;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7174;

  $bb19:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p39;
    goto $bb19_dummy;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p39;
    assume true;
    goto $bb19;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, in_$i34);
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_7177;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p37, out_$p44 := slic_entry_remove_loop_$bb17(in_$i34, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p37, out_$p44);
    return;

  exit:
    return;
}



procedure slic_entry_remove_loop_$bb17(in_$i34: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p37: ref, in_$p44: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p37: ref, out_$p44: ref);



implementation slic_entry_remove_loop_$bb4(in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p9: ref) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p9: ref)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p9 := in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7125;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p11;
    goto $bb6_dummy;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_7132;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} kfree(out_$p12);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_7128;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p9 := slic_entry_remove_loop_$bb4(out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p9);
    return;

  exit:
    return;
}



procedure slic_entry_remove_loop_$bb4(in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p9: ref) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p9: ref);



implementation slic_init_adapter_loop_$bb1(in_$p11: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i16, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p78: ref, in_$i79: i16) returns (out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i16, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p78: ref, out_$i79: i16)
{

  entry:
    out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p78, out_$i79 := in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p78, in_$i79;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7391;

  $bb3:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$p78, out_$i79 := out_$p92, out_$i91;
    goto $bb3_dummy;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i94 := $ule.i32(out_$i93, 255);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i91);
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p78, $mul.ref(1, 40));
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$i91 := $trunc.i32.i16(out_$i90);
    call {:si_unique_call 1087} {:cexpr "index"} boogie_si_record_i16(out_$i91);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i89, 1);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i16.i32(out_$i79);
    goto corral_source_split_7405;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p88, out_$p78);
    goto corral_source_split_7404;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p11, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p87, out_$p86);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p78, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p11, $mul.ref(0, 12592)), $mul.ref(12080, 1));
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p84, 0);
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p78, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p83, out_$i79);
    goto corral_source_split_7396;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p81);
    goto corral_source_split_7394;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p78, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7393;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p78, out_$i79 := slic_init_adapter_loop_$bb1(in_$p11, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p78, out_$i79);
    return;

  exit:
    return;
}



procedure slic_init_adapter_loop_$bb1(in_$p11: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i16, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p78: ref, in_$i79: i16) returns (out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i16, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p78: ref, out_$i79: i16);
  modifies $M.0;



implementation slic_card_locate_loop_$bb48(in_$p0: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i86: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p75: ref, in_$p100: ref, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$i132: i1, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i1) returns (out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i86: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p75: ref, out_$p100: ref, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$i132: i1, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i1)
{

  entry:
    out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i86, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p75, out_$p100, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$p139, out_$p140, out_$i141, out_$i142 := in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i86, in_$p88, in_$p89, in_$p90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p75, in_$p100, in_$p129, in_$p130, in_$i131, in_$i132, in_$p134, in_$p135, in_$i136, in_$i137, in_$p139, in_$p140, in_$i141, in_$i142;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7541;

  $bb66:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p97;
    goto $bb66_dummy;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_$p100 := out_$p97;
    assume true;
    goto $bb66;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_7578;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_7576;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7575;

  $bb64:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    out_$p95 := out_$p75;
    assume true;
    goto $bb64;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i91, out_$i93);
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_7570;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 12592)), $mul.ref(212, 1));
    goto corral_source_split_7569;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_7568;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 12592)), $mul.ref(212, 1));
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_7566;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(out_$i86, 8));
    goto corral_source_split_7565;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i82);
    goto corral_source_split_7564;

  $bb60:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p75;
    assume true;
    goto $bb60;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 4);
    goto corral_source_split_7551;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_7550;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i82 := 4;
    goto $bb55;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i81;
    goto $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7548;

  $bb86:
    assume {:verifier.code 0} true;
    assume out_$i142 == 1;
    goto $bb53;

  $bb82:
    assume {:verifier.code 0} true;
    assume out_$i137 == 1;
    goto $bb53;

  $bb78:
    assume {:verifier.code 0} true;
    assume out_$i132 == 1;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    assume out_$i80 == 1;
    goto $bb53;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$i81 := 0;
    assume true;
    goto $bb52, $bb54;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i64(out_$i79, 0);
    goto corral_source_split_7546;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_7545;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_7544;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_7543;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    out_$i81 := 1;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i64(out_$i131, 0);
    goto corral_source_split_7556;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    out_$i131 := $p2i.ref.i64(out_$p130);
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    goto corral_source_split_7554;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_7553;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    out_$i81 := 2;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i64(out_$i136, 0);
    goto corral_source_split_7626;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$i136 := $p2i.ref.i64(out_$p135);
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_7624;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(2, 8));
    goto corral_source_split_7623;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    out_$i81 := 3;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i141, 0);
    goto corral_source_split_7631;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p140);
    goto corral_source_split_7630;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_7629;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(3, 8));
    goto corral_source_split_7628;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb87:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb66_dummy:
    call {:si_unique_call 1} out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i86, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p75, out_$p100, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$p139, out_$p140, out_$i141, out_$i142 := slic_card_locate_loop_$bb48(in_$p0, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i86, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p75, out_$p100, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137, out_$p139, out_$p140, out_$i141, out_$i142);
    return;

  exit:
    return;
}



procedure slic_card_locate_loop_$bb48(in_$p0: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i86: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p75: ref, in_$p100: ref, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$i132: i1, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$i137: i1, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i1) returns (out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i86: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p75: ref, out_$p100: ref, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$i132: i1, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$i137: i1, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i1);



implementation slic_card_locate_loop_$bb30(in_$i16: i16, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p43: ref, in_$p54: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p43: ref, out_$p54: ref)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p50, out_$p51, out_$i52, out_$i53, out_$p43, out_$p54 := in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p50, in_$p51, in_$i52, in_$i53, in_$p43, in_$p54;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;

  $bb36:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p51;
    goto $bb36_dummy;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p51;
    assume true;
    goto $bb36;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_7509;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p43, $mul.ref(0, 768)), $mul.ref(328, 1));
    goto corral_source_split_7508;

  $bb33:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p43;
    assume true;
    goto $bb33;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i45, out_$i46);
    goto corral_source_split_7504;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(in_$i16);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_7502;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 768)), $mul.ref(12, 1));
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p50, out_$p51, out_$i52, out_$i53, out_$p43, out_$p54 := slic_card_locate_loop_$bb30(in_$i16, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p50, out_$p51, out_$i52, out_$i53, out_$p43, out_$p54);
    return;

  exit:
    return;
}



procedure slic_card_locate_loop_$bb30(in_$i16: i16, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p43: ref, in_$p54: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p43: ref, out_$p54: ref);



implementation slic_card_init_loop_$bb54(in_$p0: ref, in_$i102: i32, in_$p104: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$p146: ref, in_$p147: ref, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$i141: i32, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$p146: ref, out_$p147: ref, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$i141: i32, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8)
{

  entry:
    out_$p143, out_$p144, out_$i145, out_$p146, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i141, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := in_$p143, in_$p144, in_$i145, in_$p146, in_$p147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i141, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35;
    goto $bb54, exit;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7927;

  $bb56:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i141 := out_$i150;
    goto $bb56_dummy;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    out_$i151 := $ult.i32(out_$i150, in_$i102);
    goto corral_source_split_7938;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i141, 1);
    call {:si_unique_call 1135} {:cexpr "i"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_7937;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.0;
    out_cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1134} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p146, out_$p149, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_35;
    goto corral_source_split_7936;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref(out_$p147, $mul.ref(out_$i148, 1));
    goto corral_source_split_7935;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i32.i64(out_$i141);
    goto corral_source_split_7934;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(in_$p104);
    goto corral_source_split_7933;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref(out_$p144, $mul.ref(out_$i145, 1));
    goto corral_source_split_7932;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i32.i64(out_$i141);
    goto corral_source_split_7931;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_7930;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(200, 1)), $mul.ref(4, 1));
    goto corral_source_split_7929;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56_dummy:
    call {:si_unique_call 1} out_$p143, out_$p144, out_$i145, out_$p146, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i141, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := slic_card_init_loop_$bb54(in_$p0, in_$i102, in_$p104, out_$p143, out_$p144, out_$i145, out_$p146, out_$p147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i141, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35);
    return;

  exit:
    return;
}



procedure slic_card_init_loop_$bb54(in_$p0: ref, in_$i102: i32, in_$p104: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$p146: ref, in_$p147: ref, in_$i148: i64, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$i141: i32, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$p146: ref, out_$p147: ref, out_$i148: i64, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$i141: i32, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8);
  modifies $M.0;



implementation slic_card_init_loop_$bb20(in_$p1: ref, in_$p4: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$i77: i32) returns (out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$i77: i32)
{

  entry:
    out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i78, out_$i79, out_$i77 := in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i78, in_$i79, in_$i77;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7805;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i77;
    goto corral_source_split_7848_dummy;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7848;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i78;
    goto $bb27;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i51;
    goto $bb27;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} slic_reg32_write(out_$p76, 0, 1);
    goto corral_source_split_7846;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_7845;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p4, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_7844;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, 0);
    goto corral_source_split_7843;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7842;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_7841;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7840;

  $bb24:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_7818;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    out_$i61 := $and.i32(out_$i60, 268435456);
    goto corral_source_split_7817;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_7816;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7815;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_7814;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7813;

  $bb21:
    assume out_$i56 == 1;
    goto corral_source_split_7812;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_7810;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_7809;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_7808;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_7807;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12592)), $mul.ref(264, 1));
    goto corral_source_split_7806;

  $bb35:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    out_$i79 := $ugt.i32(out_$i78, 5000);
    goto corral_source_split_7856;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i51, 1);
    call {:si_unique_call 1121} {:cexpr "i"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_7855;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_7851;

  $bb28:
    assume 1 == 1;
    goto corral_source_split_7850;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb28, $bb29;

  $bb22:
    assume !(out_$i56 == 1);
    goto corral_source_split_7820;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume !(1 == 1);
    goto corral_source_split_7853;

  corral_source_split_7848_dummy:
    call {:si_unique_call 1} out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i78, out_$i79, out_$i77 := slic_card_init_loop_$bb20(in_$p1, in_$p4, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i78, out_$i79, out_$i77);
    return;

  exit:
    return;
}



procedure slic_card_init_loop_$bb20(in_$p1: ref, in_$p4: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$i77: i32) returns (out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$i77: i32);
  modifies $M.0;



implementation slic_card_download_loop_$bb59(in_$p1: ref, in_$p5: ref, in_$i130: i32, in_$i136: i32, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i168: i32) returns (out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i168: i32)
{

  entry:
    out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168 := in_$p142, in_$p143, in_$i144, in_$i145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i139, in_$i140, in_$i141, in_$i168;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  $bb61:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i139, out_$i140, out_$i141 := out_$i166, out_$i165, out_$i164;
    goto $bb61_dummy;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i165;
    assume true;
    goto $bb61;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i166, in_$i136);
    goto corral_source_split_8297;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i139, 1);
    call {:si_unique_call 1203} {:cexpr "codeaddr"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i165 := $add.i32(out_$i155, 4);
    call {:si_unique_call 1202} {:cexpr "index"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.36, out_$p163);
    call {:si_unique_call 1201} {:cexpr "instruction"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref(out_$p161, $mul.ref(out_$i162, 4));
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i162 := $sext.i32.i64(out_$i155);
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_8291;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.35, out_$p159);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p158, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} slic_reg32_write(out_$p157, out_$i154, 1);
    goto corral_source_split_8287;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8285;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i155 := $add.i32(out_$i140, 4);
    call {:si_unique_call 1199} {:cexpr "index"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.36, out_$p153);
    call {:si_unique_call 1198} {:cexpr "instruction"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref(out_$p151, $mul.ref(out_$i152, 4));
    goto corral_source_split_8282;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i140);
    goto corral_source_split_8281;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_8280;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.35, out_$p149);
    goto corral_source_split_8279;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p148, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8277;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} slic_reg32_write(out_$p147, out_$i141, 1);
    goto corral_source_split_8276;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_8275;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} slic_reg32_write(out_$p143, out_$i145, 1);
    goto corral_source_split_8273;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    out_$i145 := $or.i32(out_$i144, 1073741824);
    goto corral_source_split_8272;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(in_$i130, out_$i139);
    goto corral_source_split_8271;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_8270;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8269;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb61_dummy:
    call {:si_unique_call 1} out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168 := slic_card_download_loop_$bb59(in_$p1, in_$p5, in_$i130, in_$i136, out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168);
    return;

  exit:
    return;
}



procedure slic_card_download_loop_$bb59(in_$p1: ref, in_$p5: ref, in_$i130: i32, in_$i136: i32, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i168: i32) returns (out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i168: i32);



implementation slic_card_download_loop_$bb50(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i28: i32, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i133: i64, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i168: i32, in_$i138: i32, in_$i132: i32, in_$i169: i32, in_$i170: i1, in_$i119: i32, in_$i120: i32) returns (out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i133: i64, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i168: i32, out_$i138: i32, out_$i132: i32, out_$i169: i32, out_$i170: i1, out_$i119: i32, out_$i120: i32)
{

  entry:
    out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168, out_$i138, out_$i132, out_$i169, out_$i170, out_$i119, out_$i120 := in_$p121, in_$p122, in_$p123, in_$p124, in_$i125, in_$p126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i133, in_$p134, in_$i135, in_$i136, in_$i137, in_$p142, in_$p143, in_$i144, in_$i145, in_$p146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i139, in_$i140, in_$i141, in_$i168, in_$i138, in_$i132, in_$i169, in_$i170, in_$i119, in_$i120;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8239;

  $bb64:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    out_$i119, out_$i120 := out_$i169, out_$i132;
    goto $bb64_dummy;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    out_$i170 := $ult.i32(out_$i169, in_$i28);
    goto corral_source_split_8257;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i119, 1);
    call {:si_unique_call 1194} {:cexpr "section"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_8256;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_8255;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i138;
    goto $bb54;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i120;
    goto $bb54;

  $bb52:
    assume out_$i131 == 1;
    goto corral_source_split_8253;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    out_$i131 := $ule.i32(out_$i130, 32767);
    goto corral_source_split_8251;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.38, out_$p129);
    call {:si_unique_call 1193} {:cexpr "baseaddress"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p3, $mul.ref(0, 12)), $mul.ref(out_$i128, 4));
    goto corral_source_split_8249;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i32.i64(out_$i119);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.36, out_$p126);
    call {:si_unique_call 1192} {:cexpr "instruction"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_8247;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref(out_$p124, $mul.ref(out_$i125, 4));
    goto corral_source_split_8246;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i120);
    goto corral_source_split_8245;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(out_$p123);
    goto corral_source_split_8244;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.35, out_$p122);
    goto corral_source_split_8243;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p121, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8242;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8241;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb58;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$i138 := out_$i168;
    goto $bb58;

  $bb62:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8299;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i165;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i166, out_$i136);
    goto corral_source_split_8297;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i139, 1);
    call {:si_unique_call 1203} {:cexpr "codeaddr"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i165 := $add.i32(out_$i155, 4);
    call {:si_unique_call 1202} {:cexpr "index"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.36, out_$p163);
    call {:si_unique_call 1201} {:cexpr "instruction"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref(out_$p161, $mul.ref(out_$i162, 4));
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i162 := $sext.i32.i64(out_$i155);
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_8291;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.35, out_$p159);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p158, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} slic_reg32_write(out_$p157, out_$i154, 1);
    goto corral_source_split_8287;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8285;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i155 := $add.i32(out_$i140, 4);
    call {:si_unique_call 1199} {:cexpr "index"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.36, out_$p153);
    call {:si_unique_call 1198} {:cexpr "instruction"} boogie_si_record_i32(out_$i154);
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref(out_$p151, $mul.ref(out_$i152, 4));
    goto corral_source_split_8282;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i140);
    goto corral_source_split_8281;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_8280;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.35, out_$p149);
    goto corral_source_split_8279;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p148, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8277;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} slic_reg32_write(out_$p147, out_$i141, 1);
    goto corral_source_split_8276;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_8275;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} slic_reg32_write(out_$p143, out_$i145, 1);
    goto corral_source_split_8273;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    out_$i145 := $or.i32(out_$i144, 1073741824);
    goto corral_source_split_8272;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i130, out_$i139);
    goto corral_source_split_8271;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_8270;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8269;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    call out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168 := slic_card_download_loop_$bb59(in_$p1, in_$p5, out_$i130, out_$i136, out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168);
    goto $bb59_last;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    out_$i139, out_$i140, out_$i141 := 0, out_$i120, out_$i127;
    goto $bb59;

  $bb61:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i139, out_$i140, out_$i141 := out_$i166, out_$i165, out_$i164;
    assume false;
    return;

  $bb56:
    assume out_$i137 == 1;
    goto corral_source_split_8265;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    out_$i138 := out_$i120;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(0, out_$i136);
    goto corral_source_split_8263;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i136 := $lshr.i32(out_$i135, 3);
    call {:si_unique_call 1195} {:cexpr "thissectionsize"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_8262;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.37, out_$p134);
    goto corral_source_split_8261;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p2, $mul.ref(0, 12)), $mul.ref(out_$i133, 4));
    goto corral_source_split_8260;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i32.i64(out_$i119);
    goto corral_source_split_8259;

  $bb53:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb64_dummy:
    call {:si_unique_call 1} out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168, out_$i138, out_$i132, out_$i169, out_$i170, out_$i119, out_$i120 := slic_card_download_loop_$bb50(in_$p1, in_$p2, in_$p3, in_$p5, in_$i28, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p142, out_$p143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i139, out_$i140, out_$i141, out_$i168, out_$i138, out_$i132, out_$i169, out_$i170, out_$i119, out_$i120);
    return;

  exit:
    return;
}



procedure slic_card_download_loop_$bb50(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i28: i32, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i133: i64, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i64, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i168: i32, in_$i138: i32, in_$i132: i32, in_$i169: i32, in_$i170: i1, in_$i119: i32, in_$i120: i32) returns (out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i133: i64, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i64, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i168: i32, out_$i138: i32, out_$i132: i32, out_$i169: i32, out_$i170: i1, out_$i119: i32, out_$i120: i32);



implementation slic_card_download_loop_$bb39(in_$p1: ref, in_$p5: ref, in_$i78: i32, in_$i82: i32, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i114: i32, in_$i115: i32) returns (out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i114: i32, out_$i115: i32)
{

  entry:
    out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115 := in_$p89, in_$p90, in_$i91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i86, in_$i87, in_$i88, in_$i114, in_$i115;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  $bb41:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i86, out_$i87, out_$i88 := out_$i112, out_$i111, out_$i110;
    goto $bb41_dummy;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    out_$i114, out_$i115 := out_$i110, out_$i111;
    assume true;
    goto $bb41;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i112, in_$i82);
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i86, 1);
    call {:si_unique_call 1190} {:cexpr "codeaddr"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i101, 4);
    call {:si_unique_call 1189} {:cexpr "index"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.36, out_$p109);
    call {:si_unique_call 1188} {:cexpr "instruction"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref(out_$p107, $mul.ref(out_$i108, 4));
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i101);
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.35, out_$p105);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p104, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} slic_reg32_write(out_$p103, out_$i100, 1);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i87, 4);
    call {:si_unique_call 1186} {:cexpr "index"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.36, out_$p99);
    call {:si_unique_call 1185} {:cexpr "instruction"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p97, $mul.ref(out_$i98, 4));
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i87);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.35, out_$p95);
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} slic_reg32_write(out_$p93, out_$i88, 1);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$p93 := $bitcast.ref.ref(out_$p92);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} slic_reg32_write(out_$p90, out_$i91, 1);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(in_$i78, out_$i86);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p89);
    goto corral_source_split_8200;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115 := slic_card_download_loop_$bb39(in_$p1, in_$p5, in_$i78, in_$i82, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115);
    return;

  exit:
    return;
}



procedure slic_card_download_loop_$bb39(in_$p1: ref, in_$p5: ref, in_$i78: i32, in_$i82: i32, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i114: i32, in_$i115: i32) returns (out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i114: i32, out_$i115: i32);



implementation slic_card_download_loop_$bb34(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i28: i32, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i64, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i114: i32, in_$i115: i32, in_$i84: i32, in_$i85: i32, in_$i116: i32, in_$i117: i1, in_$i73: i32, in_$i74: i32, in_$i75: i32) returns (out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i64, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i114: i32, out_$i115: i32, out_$i84: i32, out_$i85: i32, out_$i116: i32, out_$i117: i1, out_$i73: i32, out_$i74: i32, out_$i75: i32)
{

  entry:
    out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115, out_$i84, out_$i85, out_$i116, out_$i117, out_$i73, out_$i74, out_$i75 := in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p89, in_$p90, in_$i91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$p107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i86, in_$i87, in_$i88, in_$i114, in_$i115, in_$i84, in_$i85, in_$i116, in_$i117, in_$i73, in_$i74, in_$i75;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8184;

  $bb44:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i73, out_$i74, out_$i75 := out_$i116, out_$i85, out_$i84;
    goto $bb44_dummy;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    out_$i117 := $ult.i32(out_$i116, in_$i28);
    goto corral_source_split_8231;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i73, 1);
    call {:si_unique_call 1191} {:cexpr "section"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_8230;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb38;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i84, out_$i85 := out_$i114, out_$i115;
    goto $bb38;

  $bb42:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8228;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    out_$i114, out_$i115 := out_$i110, out_$i111;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i112, out_$i82);
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i86, 1);
    call {:si_unique_call 1190} {:cexpr "codeaddr"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i101, 4);
    call {:si_unique_call 1189} {:cexpr "index"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.36, out_$p109);
    call {:si_unique_call 1188} {:cexpr "instruction"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref(out_$p107, $mul.ref(out_$i108, 4));
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i101);
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.35, out_$p105);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p104, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} slic_reg32_write(out_$p103, out_$i100, 1);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i87, 4);
    call {:si_unique_call 1186} {:cexpr "index"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.36, out_$p99);
    call {:si_unique_call 1185} {:cexpr "instruction"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p97, $mul.ref(out_$i98, 4));
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i87);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.35, out_$p95);
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} slic_reg32_write(out_$p93, out_$i88, 1);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$p93 := $bitcast.ref.ref(out_$p92);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} slic_reg32_write(out_$p90, out_$i91, 1);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i78, out_$i86);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p89);
    goto corral_source_split_8200;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p5, $mul.ref(0, 376)), $mul.ref(52, 1));
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    call out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115 := slic_card_download_loop_$bb39(in_$p1, in_$p5, out_$i78, out_$i82, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i86, out_$i87, out_$i88 := 0, out_$i74, out_$i75;
    goto $bb39;

  $bb41:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i86, out_$i87, out_$i88 := out_$i112, out_$i111, out_$i110;
    assume false;
    return;

  $bb36:
    assume out_$i83 == 1;
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i84, out_$i85 := out_$i75, out_$i74;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(0, out_$i82);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$i82 := $lshr.i32(out_$i81, 3);
    call {:si_unique_call 1182} {:cexpr "thissectionsize"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.37, out_$p80);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p2, $mul.ref(0, 12)), $mul.ref(out_$i79, 4));
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i32.i64(out_$i73);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.38, out_$p77);
    call {:si_unique_call 1181} {:cexpr "baseaddress"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p3, $mul.ref(0, 12)), $mul.ref(out_$i76, 4));
    goto corral_source_split_8187;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i73);
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115, out_$i84, out_$i85, out_$i116, out_$i117, out_$i73, out_$i74, out_$i75 := slic_card_download_loop_$bb34(in_$p1, in_$p2, in_$p3, in_$p5, in_$i28, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i86, out_$i87, out_$i88, out_$i114, out_$i115, out_$i84, out_$i85, out_$i116, out_$i117, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure slic_card_download_loop_$bb34(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i28: i32, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i64, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i114: i32, in_$i115: i32, in_$i84: i32, in_$i85: i32, in_$i116: i32, in_$i117: i1, in_$i73: i32, in_$i74: i32, in_$i75: i32) returns (out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i64, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i114: i32, out_$i115: i32, out_$i84: i32, out_$i85: i32, out_$i116: i32, out_$i117: i1, out_$i73: i32, out_$i74: i32, out_$i75: i32);



implementation slic_card_download_loop_$bb26(in_$p1: ref, in_$p3: ref, in_$i28: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i49: i32, in_$i50: i32, in_$i63: i32) returns (out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i49: i32, out_$i50: i32, out_$i63: i32)
{

  entry:
    out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i49, out_$i50, out_$i63 := in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i49, in_$i50, in_$i63;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8154;

  $bb28:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$i50 := out_$i60, out_$i61;
    goto $bb28_dummy;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i60;
    assume true;
    goto $bb28;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i61, in_$i28);
    goto corral_source_split_8168;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1178} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i49, 4);
    call {:si_unique_call 1177} {:cexpr "index"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_8166;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, out_$p59, out_$i57);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p3, $mul.ref(0, 12)), $mul.ref(out_$i58, 4));
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i50);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.36, out_$p56);
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p54, $mul.ref(out_$i55, 4));
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i49);
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_8159;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.35, out_$p52);
    goto corral_source_split_8158;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8157;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8156;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i49, out_$i50, out_$i63 := slic_card_download_loop_$bb26(in_$p1, in_$p3, in_$i28, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i49, out_$i50, out_$i63);
    return;

  exit:
    return;
}



procedure slic_card_download_loop_$bb26(in_$p1: ref, in_$p3: ref, in_$i28: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i49: i32, in_$i50: i32, in_$i63: i32) returns (out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i49: i32, out_$i50: i32, out_$i63: i32);
  modifies $M.38;



implementation slic_card_download_loop_$bb18(in_$p1: ref, in_$p2: ref, in_$i28: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i32: i32, in_$i33: i32, in_$i46: i32) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i32: i32, out_$i33: i32, out_$i46: i32)
{

  entry:
    out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i32, out_$i33, out_$i46 := in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i32, in_$i33, in_$i46;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8132;

  $bb20:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i43, out_$i44;
    goto $bb20_dummy;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i43;
    assume true;
    goto $bb20;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i44, in_$i28);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1176} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i32, 4);
    call {:si_unique_call 1175} {:cexpr "index"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_8144;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, out_$p42, out_$i40);
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 12)), $mul.ref(out_$i41, 4));
    goto corral_source_split_8142;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i33);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.36, out_$p39);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p37, $mul.ref(out_$i38, 4));
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i32);
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.35, out_$p35);
    goto corral_source_split_8136;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8135;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i32, out_$i33, out_$i46 := slic_card_download_loop_$bb18(in_$p1, in_$p2, in_$i28, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i32, out_$i33, out_$i46);
    return;

  exit:
    return;
}



procedure slic_card_download_loop_$bb18(in_$p1: ref, in_$p2: ref, in_$i28: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i32: i32, in_$i33: i32, in_$i46: i32) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i32: i32, out_$i33: i32, out_$i46: i32);
  modifies $M.37;



implementation slic_eeprom_cksum_loop_$bb15(in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i28: i32, in_$i34: i32) returns (out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i28: i32, out_$i34: i32)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i28, out_$i34 := in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i28, in_$i34;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8400;

  $bb17:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i31;
    goto $bb17_dummy;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i31;
    assume true;
    goto $bb17;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    out_$i32 := $lshr.i32(out_$i31, 16);
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i29, out_$i30);
    call {:si_unique_call 1244} {:cexpr "checksum"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_8404;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$i30 := $lshr.i32(out_$i28, 16);
    goto corral_source_split_8403;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 65535);
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i28, out_$i34 := slic_eeprom_cksum_loop_$bb15(out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i28, out_$i34);
    return;

  exit:
    return;
}



procedure slic_eeprom_cksum_loop_$bb15(in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i28: i32, in_$i34: i32) returns (out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i28: i32, out_$i34: i32);



implementation slic_eeprom_cksum_loop_$bb4(in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32) returns (out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i7, out_$i8, out_$p9, out_$p16, out_$i17, out_$i18 := in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i7, in_$i8, in_$p9, in_$p16, in_$i17, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8375;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8, out_$p9 := out_$i13, out_$i14, out_$p10;
    goto $bb6_dummy;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p10, out_$i14, out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    out_$i15 := $ugt.i32(out_$i14, 1);
    goto corral_source_split_8382;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(out_$i8, 2);
    call {:si_unique_call 1242} {:cexpr "len"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i12, out_$i7);
    call {:si_unique_call 1241} {:cexpr "checksum"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_8380;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_8379;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i16($M.0, out_$p9);
    goto corral_source_split_8378;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p9, $mul.ref(1, 2));
    goto corral_source_split_8377;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i7, out_$i8, out_$p9, out_$p16, out_$i17, out_$i18 := slic_eeprom_cksum_loop_$bb4(out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i7, out_$i8, out_$p9, out_$p16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure slic_eeprom_cksum_loop_$bb4(in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32) returns (out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32);



implementation slic_card_download_gbrcv_loop_$bb34(in_$p1: ref, in_$p3: ref, in_$i26: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i43: i32, in_$i44: i32) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i43: i32, out_$i44: i32)
{

  entry:
    out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i43, out_$i44 := in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i43, in_$i44;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8474;

  $bb36:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i64, out_$i69;
    goto $bb36_dummy;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i70 := $ult.i32(out_$i69, in_$i26);
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i44, 1);
    call {:si_unique_call 1261} {:cexpr "codeaddr"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} slic_reg32_write(out_$p66, out_$i68, 1);
    goto corral_source_split_8502;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_8501;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i32.i8(out_$i63);
    goto corral_source_split_8500;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_8499;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8498;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i54, 1);
    call {:si_unique_call 1259} {:cexpr "index"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    call {:si_unique_call 1258} {:cexpr "instruction"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.36, out_$p61);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p59, $mul.ref(out_$i60, 1));
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.35, out_$p58);
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8491;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8490;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} slic_reg32_write(out_$p56, out_$i53, 1);
    goto corral_source_split_8489;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_8488;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i43, 4);
    call {:si_unique_call 1256} {:cexpr "index"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_8486;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.36, out_$p52);
    call {:si_unique_call 1255} {:cexpr "instruction"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p50, $mul.ref(out_$i51, 4));
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i43);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.35, out_$p48);
    goto corral_source_split_8481;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.34, in_$p1);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} slic_reg32_write(out_$p46, out_$i44, 1);
    goto corral_source_split_8478;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_8477;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p3, $mul.ref(0, 376)), $mul.ref(304, 1));
    goto corral_source_split_8476;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i43, out_$i44 := slic_card_download_gbrcv_loop_$bb34(in_$p1, in_$p3, in_$i26, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure slic_card_download_gbrcv_loop_$bb34(in_$p1: ref, in_$p3: ref, in_$i26: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i43: i32, in_$i44: i32) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i43: i32, out_$i44: i32);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i174: i32, in_$i175: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: ref, in_vslice_dummy_var_101: ref, in_vslice_dummy_var_102: ref, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i174: i32, out_$i175: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: ref, out_vslice_dummy_var_101: ref, out_vslice_dummy_var_102: ref, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i175, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p91, in_$i93, in_$i94, in_$p95, in_$i97, in_$i98, in_$p99, in_$i101, in_$i102, in_$p103, in_$i105, in_$i106, in_$p107, in_$i108, in_$i110, in_$i111, in_$p112, in_$i113, in_$i115, in_$i116, in_$p117, in_$i118, in_$i120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$i132, in_$i133, in_$p134, in_$i135, in_$i137, in_$i138, in_$p139, in_$i140, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i152, in_$i153, in_$p154, in_$i156, in_$i157, in_$p158, in_$i160, in_$i161, in_$p162, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i174, in_$i175, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} out_$i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i13);
    call {:si_unique_call 1387} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i13);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb46_dummy;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb19:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $M.55 := out_$i35;
    call {:si_unique_call 1394} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_8814;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 1);
    goto corral_source_split_8813;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    out_$i34 := $M.55;
    goto corral_source_split_8812;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8811;

  $bb32:
    assume out_$i33 == 1;
    goto corral_source_split_8810;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    out_$i32 := $M.59;
    goto corral_source_split_8807;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $M.59 := out_$i31;
    call {:si_unique_call 1392} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_8806;

  SeqInstr_270:
    goto corral_source_split_8805;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} out_$i31 := slic_entry_probe(out_$p30, in_$p3);
    goto SeqInstr_269;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    out_$p30 := $M.52;
    goto corral_source_split_8804;

  $bb30:
    assume out_$i29 == 1;
    goto corral_source_split_8803;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 1);
    goto corral_source_split_8801;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    out_$i28 := $M.53;
    goto corral_source_split_8800;

  $bb28:
    assume out_$i27 == 1;
    goto corral_source_split_8799;

  $bb21:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1388} out_$i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1389} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i23);
    call {:si_unique_call 1390} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i23);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i22 == 1;
    goto corral_source_split_8789;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_8787;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    out_$i21 := $M.53;
    goto corral_source_split_8786;

  $bb16:
    assume out_$i20 == 1;
    goto corral_source_split_8785;

  $bb12:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb38:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1396} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8819;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} slic_entry_remove(out_$p38);
    goto corral_source_split_8818;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    out_$p38 := $M.52;
    goto corral_source_split_8817;

  $bb37:
    assume out_$i37 == 1;
    goto corral_source_split_8816;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 2);
    goto corral_source_split_8793;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    out_$i36 := $M.53;
    goto corral_source_split_8792;

  $bb23:
    assume out_$i25 == 1;
    goto corral_source_split_8791;

  $bb22:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb41:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8823;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} out_vslice_dummy_var_92 := ldv_shutdown_4();
    goto corral_source_split_8822;

  $bb40:
    assume out_$i40 == 1;
    goto corral_source_split_8821;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    out_$i39 := $M.53;
    goto corral_source_split_8796;

  $bb25:
    assume out_$i26 == 1;
    goto corral_source_split_8795;

  $bb24:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_stop();
    goto corral_source_split_8825;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb27;

  $bb48:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_273:
    goto corral_source_split_8828;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} choose_interrupt_1();
    goto SeqInstr_272;

  $bb47:
    assume out_$i43 == 1;
    goto corral_source_split_8827;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_8779;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    out_$i42 := $M.54;
    goto corral_source_split_8778;

  $bb14:
    assume out_$i19 == 1;
    goto corral_source_split_8777;

  $bb13:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb51:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb62;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_8842;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    out_$i52 := $M.55;
    goto corral_source_split_8841;

  $bb60:
    assume out_$i51 == 1;
    goto corral_source_split_8840;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 3);
    goto corral_source_split_8838;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    out_$i50 := $M.56;
    goto corral_source_split_8837;

  $bb58:
    assume out_$i49 == 1;
    goto corral_source_split_8836;

  $bb53:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i46, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_8830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1401} out_$i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 1402} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i46);
    call {:si_unique_call 1403} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i46);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i45 == 1;
    goto corral_source_split_8830;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_8783;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    out_$i44 := $M.56;
    goto corral_source_split_8782;

  $bb15:
    assume !(out_$i19 == 1);
    goto corral_source_split_8781;

  $bb69:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_8860;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i59 := $M.60;
    goto corral_source_split_8859;

  $bb71:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8857;

  $bb70:
    assume out_$i58 == 1;
    goto corral_source_split_8856;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 0);
    goto corral_source_split_8854;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    out_$i57 := $M.60;
    goto corral_source_split_8853;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $M.60 := out_$i56;
    call {:si_unique_call 1408} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_8852;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} out_$i56 := slic_module_init();
    goto corral_source_split_8851;

  $bb68:
    assume out_$i55 == 1;
    goto corral_source_split_8850;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 1);
    goto corral_source_split_8834;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    out_$i54 := $M.56;
    goto corral_source_split_8833;

  $bb55:
    assume out_$i48 == 1;
    goto corral_source_split_8832;

  $bb54:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i46, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} ldv_stop();
    goto corral_source_split_8865;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb57;

  $bb81:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} choose_timer_3();
    goto corral_source_split_8868;

  $bb80:
    assume out_$i62 == 1;
    goto corral_source_split_8867;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_8767;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    out_$i61 := $M.57;
    goto corral_source_split_8766;

  $bb5:
    assume out_$i15 == 1;
    goto corral_source_split_8765;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb84:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} choose_timer_2();
    goto corral_source_split_8871;

  $bb83:
    assume out_$i64 == 1;
    goto corral_source_split_8870;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_8771;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    out_$i63 := $M.58;
    goto corral_source_split_8770;

  $bb7:
    assume out_$i16 == 1;
    goto corral_source_split_8769;

  $bb6:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb87:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb121:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1422} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8938;

  SeqInstr_282:
    goto corral_source_split_8937;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} slic_mcast_set_list(out_$p88);
    goto SeqInstr_281;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    out_$p88 := $M.33;
    goto corral_source_split_8936;

  $bb120:
    assume out_$i87 == 1;
    goto corral_source_split_8935;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_8933;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i86 := $M.28;
    goto corral_source_split_8932;

  $bb118:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1420} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8930;

  SeqInstr_279:
    goto corral_source_split_8929;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} slic_mcast_set_list(out_$p85);
    goto SeqInstr_278;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    out_$p85 := $M.33;
    goto corral_source_split_8928;

  $bb117:
    assume out_$i84 == 1;
    goto corral_source_split_8927;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 3);
    goto corral_source_split_8925;

  $bb116:
    assume {:verifier.code 0} true;
    out_$i83 := $M.28;
    goto corral_source_split_8924;

  $bb115:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1418} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8922;

  SeqInstr_276:
    goto corral_source_split_8921;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} slic_mcast_set_list(out_$p82);
    goto SeqInstr_275;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    out_$p82 := $M.33;
    goto corral_source_split_8920;

  $bb114:
    assume out_$i81 == 1;
    goto corral_source_split_8919;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 1);
    goto corral_source_split_8917;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    out_$i80 := $M.28;
    goto corral_source_split_8916;

  $bb112:
    assume out_$i79 == 1;
    goto corral_source_split_8915;

  $bb110:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i67, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb104:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb89:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_8873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1414} out_$i67 := __VERIFIER_nondet_int();
    call {:si_unique_call 1415} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i67);
    call {:si_unique_call 1416} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i67);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume out_$i66 == 1;
    goto corral_source_split_8873;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_8775;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    out_$i65 := $M.28;
    goto corral_source_split_8774;

  $bb9:
    assume out_$i17 == 1;
    goto corral_source_split_8773;

  $bb8:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb125:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1424} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8943;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} out_vslice_dummy_var_93 := slic_entry_halt(out_$p91);
    goto corral_source_split_8942;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    out_$p91 := $M.33;
    goto corral_source_split_8941;

  $bb124:
    assume out_$i90 == 1;
    goto corral_source_split_8940;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 3);
    goto corral_source_split_8913;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    out_$i89 := $M.28;
    goto corral_source_split_8912;

  $bb111:
    assume !(out_$i78 == 1);
    goto corral_source_split_8911;

  $bb134:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1430} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8964;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} out_vslice_dummy_var_96 := eth_validate_addr(out_$p103);
    goto corral_source_split_8963;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    out_$p103 := $M.33;
    goto corral_source_split_8962;

  $bb133:
    assume out_$i102 == 1;
    goto corral_source_split_8961;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 2);
    goto corral_source_split_8959;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i101 := $M.28;
    goto corral_source_split_8958;

  $bb131:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} out_vslice_dummy_var_95 := eth_validate_addr(out_$p99);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$p99 := $M.33;
    goto corral_source_split_8954;

  $bb130:
    assume out_$i98 == 1;
    goto corral_source_split_8953;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 3);
    goto corral_source_split_8951;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i97 := $M.28;
    goto corral_source_split_8950;

  $bb128:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1426} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8948;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} out_vslice_dummy_var_94 := eth_validate_addr(out_$p95);
    goto corral_source_split_8947;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    out_$p95 := $M.33;
    goto corral_source_split_8946;

  $bb127:
    assume out_$i94 == 1;
    goto corral_source_split_8945;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_8901;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    out_$i93 := $M.28;
    goto corral_source_split_8900;

  $bb106:
    assume out_$i76 == 1;
    goto corral_source_split_8899;

  $bb105:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb143:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8988;

  SeqInstr_291:
    goto corral_source_split_8987;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} out_vslice_dummy_var_99 := slic_ioctl(out_$p117, in_$p6, out_$i118);
    goto SeqInstr_290;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.41, in_$p0);
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p117 := $M.33;
    goto corral_source_split_8985;

  $bb142:
    assume out_$i116 == 1;
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 2);
    goto corral_source_split_8982;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i115 := $M.28;
    goto corral_source_split_8981;

  $bb140:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8979;

  SeqInstr_288:
    goto corral_source_split_8978;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} out_vslice_dummy_var_98 := slic_ioctl(out_$p112, in_$p6, out_$i113);
    goto SeqInstr_287;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.41, in_$p0);
    goto corral_source_split_8977;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    out_$p112 := $M.33;
    goto corral_source_split_8976;

  $bb139:
    assume out_$i111 == 1;
    goto corral_source_split_8975;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 3);
    goto corral_source_split_8973;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i110 := $M.28;
    goto corral_source_split_8972;

  $bb137:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8970;

  SeqInstr_285:
    goto corral_source_split_8969;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} out_vslice_dummy_var_97 := slic_ioctl(out_$p107, in_$p6, out_$i108);
    goto SeqInstr_284;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.41, in_$p0);
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    out_$p107 := $M.33;
    goto corral_source_split_8967;

  $bb136:
    assume out_$i106 == 1;
    goto corral_source_split_8966;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_8905;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    out_$i105 := $M.28;
    goto corral_source_split_8904;

  $bb108:
    assume out_$i77 == 1;
    goto corral_source_split_8903;

  $bb107:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb152:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9009;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} out_vslice_dummy_var_102 := slic_get_stats(out_$p130);
    goto corral_source_split_9008;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    out_$p130 := $M.33;
    goto corral_source_split_9007;

  $bb151:
    assume out_$i129 == 1;
    goto corral_source_split_9006;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 2);
    goto corral_source_split_9004;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i128 := $M.28;
    goto corral_source_split_9003;

  $bb149:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9001;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} out_vslice_dummy_var_101 := slic_get_stats(out_$p126);
    goto corral_source_split_9000;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    out_$p126 := $M.33;
    goto corral_source_split_8999;

  $bb148:
    assume out_$i125 == 1;
    goto corral_source_split_8998;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 3);
    goto corral_source_split_8996;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i124 := $M.28;
    goto corral_source_split_8995;

  $bb146:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8993;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} out_vslice_dummy_var_100 := slic_get_stats(out_$p122);
    goto corral_source_split_8992;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    out_$p122 := $M.33;
    goto corral_source_split_8991;

  $bb145:
    assume out_$i121 == 1;
    goto corral_source_split_8990;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_8909;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    out_$i120 := $M.28;
    goto corral_source_split_8908;

  $bb109:
    assume !(out_$i77 == 1);
    goto corral_source_split_8907;

  $bb158:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} out_vslice_dummy_var_104 := eth_change_mtu(out_$p139, out_$i140);
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i32($M.41, in_$p1);
    goto corral_source_split_9022;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$p139 := $M.33;
    goto corral_source_split_9021;

  $bb157:
    assume out_$i138 == 1;
    goto corral_source_split_9020;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 2);
    goto corral_source_split_9018;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i137 := $M.28;
    goto corral_source_split_9017;

  $bb155:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9015;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} out_vslice_dummy_var_103 := eth_change_mtu(out_$p134, out_$i135);
    goto corral_source_split_9014;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.41, in_$p1);
    goto corral_source_split_9013;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    out_$p134 := $M.33;
    goto corral_source_split_9012;

  $bb154:
    assume out_$i133 == 1;
    goto corral_source_split_9011;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 3);
    goto corral_source_split_8889;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    out_$i132 := $M.28;
    goto corral_source_split_8888;

  $bb100:
    assume out_$i73 == 1;
    goto corral_source_split_8887;

  $bb91:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i67, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb90:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i67, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb161:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1449} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9034;

  $bb162:
    assume out_$i147 == 1;
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 0);
    goto corral_source_split_9031;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    out_$i146 := $M.61;
    goto corral_source_split_9030;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.61 := out_$i145;
    call {:si_unique_call 1448} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_9029;

  SeqInstr_294:
    goto corral_source_split_9028;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} out_$i145 := slic_entry_open(out_$p144);
    goto SeqInstr_293;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    out_$p144 := $M.33;
    goto corral_source_split_9027;

  $bb160:
    assume out_$i143 == 1;
    goto corral_source_split_9026;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_8893;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    out_$i142 := $M.28;
    goto corral_source_split_8892;

  $bb102:
    assume out_$i74 == 1;
    goto corral_source_split_8891;

  $bb101:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i67, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb167:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1451} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} out_vslice_dummy_var_105 := slic_xmit_start(in_$p8, out_$p150);
    goto corral_source_split_9038;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$p150 := $M.33;
    goto corral_source_split_9037;

  $bb166:
    assume out_$i149 == 1;
    goto corral_source_split_9036;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_8897;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    out_$i148 := $M.28;
    goto corral_source_split_8896;

  $bb103:
    assume !(out_$i74 == 1);
    goto corral_source_split_8895;

  $bb176:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1457} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9060;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} out_vslice_dummy_var_108 := slic_mac_set_address(out_$p162, in_$p4);
    goto corral_source_split_9059;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    out_$p162 := $M.33;
    goto corral_source_split_9058;

  $bb175:
    assume out_$i161 == 1;
    goto corral_source_split_9057;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_9055;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i160 := $M.28;
    goto corral_source_split_9054;

  $bb173:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1455} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9052;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} out_vslice_dummy_var_107 := slic_mac_set_address(out_$p158, in_$p4);
    goto corral_source_split_9051;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    out_$p158 := $M.33;
    goto corral_source_split_9050;

  $bb172:
    assume out_$i157 == 1;
    goto corral_source_split_9049;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 3);
    goto corral_source_split_9047;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i156 := $M.28;
    goto corral_source_split_9046;

  $bb170:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1453} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9044;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} out_vslice_dummy_var_106 := slic_mac_set_address(out_$p154, in_$p4);
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    out_$p154 := $M.33;
    goto corral_source_split_9042;

  $bb169:
    assume out_$i153 == 1;
    goto corral_source_split_9041;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$i152 := $M.28;
    goto corral_source_split_8876;

  $bb93:
    assume out_$i70 == 1;
    goto corral_source_split_8875;

  $bb92:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i67, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb179:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $M.55 := out_$i170;
    call {:si_unique_call 1461} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_9072;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    out_$i170 := $add.i32(out_$i169, 1);
    goto corral_source_split_9071;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    out_$i169 := $M.55;
    goto corral_source_split_9070;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9069;

  $bb180:
    assume out_$i168 == 1;
    goto corral_source_split_9068;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 0);
    goto corral_source_split_9066;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$i167 := $M.62;
    goto corral_source_split_9065;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.62 := out_$i166;
    call {:si_unique_call 1459} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} out_$i166 := ldv_ndo_init_5();
    goto corral_source_split_9063;

  $bb178:
    assume out_$i165 == 1;
    goto corral_source_split_9062;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_8881;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    out_$i164 := $M.28;
    goto corral_source_split_8880;

  $bb95:
    assume out_$i71 == 1;
    goto corral_source_split_8879;

  $bb94:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i67, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb185:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.55 := out_$i175;
    call {:si_unique_call 1464} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_9079;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    out_$i175 := $sub.i32(out_$i174, 1);
    goto corral_source_split_9078;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$i174 := $M.55;
    goto corral_source_split_9077;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} out_vslice_dummy_var_109 := ldv_ndo_uninit_5();
    goto corral_source_split_9075;

  $bb184:
    assume out_$i172 == 1;
    goto corral_source_split_9074;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 2);
    goto corral_source_split_8885;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    out_$i171 := $M.28;
    goto corral_source_split_8884;

  $bb97:
    assume out_$i72 == 1;
    goto corral_source_split_8883;

  $bb96:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i67, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} ldv_stop();
    goto corral_source_split_9081;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb99;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb99;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} ldv_stop();
    goto corral_source_split_9083;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb11;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i175, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$p4, in_$p6, in_$p8, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i175, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i174: i32, in_$i175: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: ref, in_vslice_dummy_var_101: ref, in_vslice_dummy_var_102: ref, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i174: i32, out_$i175: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: ref, out_vslice_dummy_var_101: ref, out_vslice_dummy_var_102: ref, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32);
  modifies $M.55, $M.53, $M.59, $M.0, $M.28, $M.30, $M.2, $M.37, $M.38, $M.33, $CurrAddr, assertsPassed, $M.3, $M.5, $M.7, $M.9, $M.11, $M.13, $M.15, $M.17, $M.24, $M.56, $M.60, $M.52, $M.42, $M.44, $M.46, $M.48, $M.61, $M.4, $M.6, $M.8, $M.10, $M.12, $M.19, $M.14, $M.20, $M.16, $M.21, $M.18, $M.22, $M.62;


