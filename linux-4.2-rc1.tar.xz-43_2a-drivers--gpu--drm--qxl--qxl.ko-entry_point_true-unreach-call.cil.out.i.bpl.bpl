var $M.2: [ref]i32;

var $M.6: [ref]i8;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]i32;

var $M.36: [ref]i64;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: i32;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: i32;

var $M.43: [ref]i32;

var $M.44: [ref]i32;

var $M.45: [ref]i8;

var $M.46: [ref]ref;

var $M.47: i32;

var $M.48: ref;

var $M.49: i32;

var $M.50: ref;

var $M.51: i32;

var $M.52: ref;

var $M.53: i32;

var $M.54: ref;

var $M.55: [ref]i8;

var $M.56: i32;

var $M.57: [ref]i64;

var $M.58: [ref]i64;

var $M.59: ref;

var $M.60: [ref]ref;

var $M.61: [ref]i32;

var $M.62: [ref]i32;

var $M.63: [ref]i32;

var $M.64: [ref]i32;

var $M.65: [ref]ref;

var $M.66: [ref]i8;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.116: i32;

var $M.117: i32;

var $M.118: i32;

var $M.119: i32;

var $M.128: ref;

var $M.129: i32;

var $M.130: i32;

var $M.132: ref;

var $M.133: ref;

var $M.134: ref;

var $M.135: ref;

var $M.136: ref;

var $M.137: ref;

var $M.138: ref;

var $M.139: ref;

var $M.140: ref;

var $M.141: ref;

var $M.142: ref;

var $M.143: ref;

var $M.144: ref;

var $M.145: ref;

var $M.146: ref;

var $M.156: [ref]i32;

var $M.157: [ref]i32;

var $M.158: [ref]ref;

var $M.159: [ref]ref;

var $M.160: [ref]i8;

var $M.211: [ref]i8;

var $M.301: [ref]i32;

var $M.302: [ref]i32;

var $M.303: [ref]i32;

var $M.304: [ref]i32;

var $M.305: [ref]i32;

var $M.306: [ref]i32;

var $M.307: [ref]i64;

var $M.309: [ref]i8;

var $M.310: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 1040892);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const qxl_num_crtc: ref;

axiom qxl_num_crtc == $sub.ref(0, 2056);

const qxl_pci_driver_group1: ref;

axiom qxl_pci_driver_group1 == $sub.ref(0, 3088);

const qxl_pm_ops_group1: ref;

axiom qxl_pm_ops_group1 == $sub.ref(0, 4120);

const qxl_fops_group1: ref;

axiom qxl_fops_group1 == $sub.ref(0, 5152);

const qxl_fops_group2: ref;

axiom qxl_fops_group2 == $sub.ref(0, 6184);

const qxl_driver_group1: ref;

axiom qxl_driver_group1 == $sub.ref(0, 7216);

const qxl_driver_group2: ref;

axiom qxl_driver_group2 == $sub.ref(0, 8248);

const qxl_driver_group0: ref;

axiom qxl_driver_group0 == $sub.ref(0, 9280);

const qxl_driver_group3: ref;

axiom qxl_driver_group3 == $sub.ref(0, 10312);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 11340);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 12368);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 13396);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 14424);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 15452);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 16480);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 17508);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 18536);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 19564);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 20592);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 21620);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 22648);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 23676);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 24704);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 25732);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 26760);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 27788);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 28816);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 29844);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 30872);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 31900);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 32928);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 33956);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 34984);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 36012);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 37040);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 38068);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 39096);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 40124);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 41152);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 42180);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 43208);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 44236);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 45264);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 46292);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 47320);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 48348);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 49376);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 50404);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 51432);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 52460);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 53488);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 54516);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 55544);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 56572);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 57600);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 58632);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 59660);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 60692);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 61720);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 62752);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 63780);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 64812);

const qxl_crtc_helper_funcs_group0: ref;

axiom qxl_crtc_helper_funcs_group0 == $sub.ref(0, 65844);

const qxl_crtc_helper_funcs_group1: ref;

axiom qxl_crtc_helper_funcs_group1 == $sub.ref(0, 66876);

const qxl_connector_helper_funcs_group0: ref;

axiom qxl_connector_helper_funcs_group0 == $sub.ref(0, 67908);

const qxl_crtc_funcs_group0: ref;

axiom qxl_crtc_funcs_group0 == $sub.ref(0, 68940);

const qxl_fb_funcs_group0: ref;

axiom qxl_fb_funcs_group0 == $sub.ref(0, 69972);

const qxl_connector_funcs_group0: ref;

axiom qxl_connector_funcs_group0 == $sub.ref(0, 71004);

const qxl_enc_helper_funcs_group0: ref;

axiom qxl_enc_helper_funcs_group0 == $sub.ref(0, 72036);

const qxl_enc_helper_funcs_group1: ref;

axiom qxl_enc_helper_funcs_group1 == $sub.ref(0, 73068);

const qxl_log_level: ref;

axiom qxl_log_level == $sub.ref(0, 74096);

const qxl_bo_driver_group2: ref;

axiom qxl_bo_driver_group2 == $sub.ref(0, 75128);

const qxl_bo_driver_group0: ref;

axiom qxl_bo_driver_group0 == $sub.ref(0, 76160);

const qxl_bo_driver_group1: ref;

axiom qxl_bo_driver_group1 == $sub.ref(0, 77192);

const qxl_bo_driver_group3: ref;

axiom qxl_bo_driver_group3 == $sub.ref(0, 78224);

const qxl_backend_func_group0: ref;

axiom qxl_backend_func_group0 == $sub.ref(0, 79256);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 80284);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 81312);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 82340);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 83368);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 84400);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 85432);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 86464);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 87496);

const qxlfb_ops_group0: ref;

axiom qxlfb_ops_group0 == $sub.ref(0, 88528);

const qxlfb_ops_group1: ref;

axiom qxlfb_ops_group1 == $sub.ref(0, 89560);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 90588);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 91616);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 92644);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 93672);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 94704);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 95736);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 96768);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 97800);

const {:count 7} qxl_ioctls: ref;

axiom qxl_ioctls == $sub.ref(0, 98992);

const {:count 10} .str.61: ref;

axiom .str.61 == $sub.ref(0, 100026);

const {:count 8} .str.62: ref;

axiom .str.62 == $sub.ref(0, 101058);

const {:count 15} .str.63: ref;

axiom .str.63 == $sub.ref(0, 102097);

const {:count 16} .str.64: ref;

axiom .str.64 == $sub.ref(0, 103137);

const {:count 13} .str.65: ref;

axiom .str.65 == $sub.ref(0, 104174);

const {:count 14} .str.66: ref;

axiom .str.66 == $sub.ref(0, 105212);

const {:count 15} .str.67: ref;

axiom .str.67 == $sub.ref(0, 106251);

const qxl_fence_ops: ref;

axiom qxl_fence_ops == $sub.ref(0, 107347);

const {:count 3} release_size_per_bo: ref;

axiom release_size_per_bo == $sub.ref(0, 108383);

const {:count 3} releases_per_bo: ref;

axiom releases_per_bo == $sub.ref(0, 109419);

const {:count 2} qxl_debugfs_list: ref;

axiom qxl_debugfs_list == $sub.ref(0, 110507);

const qxl_defio: ref;

axiom qxl_defio == $sub.ref(0, 111731);

const qxlfb_ops: ref;

axiom qxlfb_ops == $sub.ref(0, 112947);

const qxl_fb_helper_funcs: ref;

axiom qxl_fb_helper_funcs == $sub.ref(0, 114003);

const qxl_backend_func: ref;

axiom qxl_backend_func == $sub.ref(0, 115051);

const qxl_bo_driver: ref;

axiom qxl_bo_driver == $sub.ref(0, 116179);

const qxl_connector_helper_funcs: ref;

axiom qxl_connector_helper_funcs == $sub.ref(0, 117227);

const qxl_enc_helper_funcs: ref;

axiom qxl_enc_helper_funcs == $sub.ref(0, 118347);

const qxl_enc_funcs: ref;

axiom qxl_enc_funcs == $sub.ref(0, 119387);

const qxl_connector_funcs: ref;

axiom qxl_connector_funcs == $sub.ref(0, 120515);

const qxl_crtc_helper_funcs: ref;

axiom qxl_crtc_helper_funcs == $sub.ref(0, 121651);

const qxl_crtc_funcs: ref;

axiom qxl_crtc_funcs == $sub.ref(0, 122795);

const qxl_mode_funcs: ref;

axiom qxl_mode_funcs == $sub.ref(0, 123875);

const qxl_fb_funcs: ref;

axiom qxl_fb_funcs == $sub.ref(0, 124923);

const qxl_modeset: ref;

axiom qxl_modeset == $sub.ref(0, 125951);

const qxl_pm_ops: ref;

axiom qxl_pm_ops == $sub.ref(0, 127159);

const {:count 3} pciidlist: ref;

axiom pciidlist == $sub.ref(0, 128279);

const qxl_pci_driver: ref;

axiom qxl_pci_driver == $sub.ref(0, 129615);

const qxl_fops: ref;

axiom qxl_fops == $sub.ref(0, 130863);

const qxl_driver: ref;

axiom qxl_driver == $sub.ref(0, 132367);

const ttm_vm_ops: ref;

axiom ttm_vm_ops == $sub.ref(0, 133399);

const qxl_ttm_vm_ops: ref;

axiom qxl_ttm_vm_ops == $sub.ref(0, 134511);

const {:count 3} __mod_pci__pciidlist_device_table: ref;

axiom __mod_pci__pciidlist_device_table == $sub.ref(0, 135631);

const qxl_fence_ops_group0: ref;

axiom qxl_fence_ops_group0 == $sub.ref(0, 136663);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 137691);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 138719);

const qxl_max_ioctls: ref;

axiom qxl_max_ioctls == $sub.ref(0, 139747);

const {:count 33} .str.7: ref;

axiom .str.7 == $sub.ref(0, 140804);

const {:count 21} .str.186: ref;

axiom .str.186 == $sub.ref(0, 141849);

const {:count 208} .str.32: ref;

axiom .str.32 == $sub.ref(0, 143081);

const {:count 21} .str.166: ref;

axiom .str.166 == $sub.ref(0, 144126);

const {:count 48} .str.31: ref;

axiom .str.31 == $sub.ref(0, 145198);

const {:count 38} .str.25: ref;

axiom .str.25 == $sub.ref(0, 146260);

const oops_in_progress: ref;

axiom oops_in_progress == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const debug_locks_silent: ref;

axiom debug_locks_silent == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 25} .str.190: ref;

axiom .str.190 == $sub.ref(0, 147309);

const {:count 24} .str.191: ref;

axiom .str.191 == $sub.ref(0, 148357);

const {:count 14} .str.192: ref;

axiom .str.192 == $sub.ref(0, 149395);

const __tracepoint_fence_emit: ref;

axiom __tracepoint_fence_emit == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 29} .str.189: ref;

axiom .str.189 == $sub.ref(0, 150448);

const {:count 41} .str.173: ref;

axiom .str.173 == $sub.ref(0, 151513);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const debug_locks: ref;

axiom debug_locks == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const rcu_sched_lock_map: ref;

axiom rcu_sched_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 34} .str.167: ref;

axiom .str.167 == $sub.ref(0, 152571);

const {:count 208} .str.34: ref;

axiom .str.34 == $sub.ref(0, 153803);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const kgdb_active: ref;

axiom kgdb_active == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 24} .str.165: ref;

axiom .str.165 == $sub.ref(0, 154851);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 22} .str.70: ref;

axiom .str.70 == $sub.ref(0, 155897);

const {:count 21} .str.68: ref;

axiom .str.68 == $sub.ref(0, 156942);

const {:count 212} .str.69: ref;

axiom .str.69 == $sub.ref(0, 158178);

const {:count 15} .str.187: ref;

axiom .str.187 == $sub.ref(0, 159217);

const {:count 22} .str.188: ref;

axiom .str.188 == $sub.ref(0, 160263);

const {:count 39} .str.41: ref;

axiom .str.41 == $sub.ref(0, 161326);

const {:count 57} .str.42: ref;

axiom .str.42 == $sub.ref(0, 162407);

const {:count 19} .str.43: ref;

axiom .str.43 == $sub.ref(0, 163450);

const {:count 4} .str.74: ref;

axiom .str.74 == $sub.ref(0, 164478);

const {:count 7} .str.75: ref;

axiom .str.75 == $sub.ref(0, 165509);

const {:count 9} .str.76: ref;

axiom .str.76 == $sub.ref(0, 166542);

const {:count 209} .str.60: ref;

axiom .str.60 == $sub.ref(0, 167775);

const {:count 210} .str.72: ref;

axiom .str.72 == $sub.ref(0, 169009);

const {:count 16} .str.73: ref;

axiom .str.73 == $sub.ref(0, 170049);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 171101);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 172141);

const {:count 38} .str.54: ref;

axiom .str.54 == $sub.ref(0, 173203);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 27} .str.157: ref;

axiom .str.157 == $sub.ref(0, 174254);

const {:count 29} .str.168: ref;

axiom .str.168 == $sub.ref(0, 175307);

const {:count 19} .str.112: ref;

axiom .str.112 == $sub.ref(0, 176350);

const {:count 32} .str.113: ref;

axiom .str.113 == $sub.ref(0, 177406);

const {:count 28} .str.40: ref;

axiom .str.40 == $sub.ref(0, 178458);

const {:count 27} .str.20: ref;

axiom .str.20 == $sub.ref(0, 179509);

const {:count 24} .str.27: ref;

axiom .str.27 == $sub.ref(0, 180557);

const {:count 30} .str.28: ref;

axiom .str.28 == $sub.ref(0, 181611);

const {:count 36} .str.23: ref;

axiom .str.23 == $sub.ref(0, 182671);

const {:count 30} .str.24: ref;

axiom .str.24 == $sub.ref(0, 183725);

const {:count 20} .str.114: ref;

axiom .str.114 == $sub.ref(0, 184769);

const {:count 27} .str.8: ref;

axiom .str.8 == $sub.ref(0, 185820);

const {:count 15} .str.26: ref;

axiom .str.26 == $sub.ref(0, 186859);

const {:count 17} .str.78: ref;

axiom .str.78 == $sub.ref(0, 187900);

const {:count 25} .str.79: ref;

axiom .str.79 == $sub.ref(0, 188949);

const {:count 21} .str.80: ref;

axiom .str.80 == $sub.ref(0, 189994);

const {:count 24} .str.81: ref;

axiom .str.81 == $sub.ref(0, 191042);

const drm_debug: ref;

axiom drm_debug == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 6} .str.84: ref;

axiom .str.84 == $sub.ref(0, 192072);

const {:count 6} .str.85: ref;

axiom .str.85 == $sub.ref(0, 193102);

const {:count 16} .str.82: ref;

axiom .str.82 == $sub.ref(0, 194142);

const {:count 62} .str.83: ref;

axiom .str.83 == $sub.ref(0, 195228);

const {:count 24} .str.86: ref;

axiom .str.86 == $sub.ref(0, 196276);

const {:count 19} .str.87: ref;

axiom .str.87 == $sub.ref(0, 197319);

const {:count 34} .str.88: ref;

axiom .str.88 == $sub.ref(0, 198377);

const {:count 30} .str.89: ref;

axiom .str.89 == $sub.ref(0, 199431);

const {:count 34} .str.90: ref;

axiom .str.90 == $sub.ref(0, 200489);

const {:count 22} .str.91: ref;

axiom .str.91 == $sub.ref(0, 201535);

const {:count 34} .str.92: ref;

axiom .str.92 == $sub.ref(0, 202593);

const {:count 38} .str.93: ref;

axiom .str.93 == $sub.ref(0, 203655);

const {:count 13} .str.94: ref;

axiom .str.94 == $sub.ref(0, 204692);

const {:count 3} .str.95: ref;

axiom .str.95 == $sub.ref(0, 205719);

const {:count 7} .str.96: ref;

axiom .str.96 == $sub.ref(0, 206750);

const {:count 17} .str.97: ref;

axiom .str.97 == $sub.ref(0, 207791);

const {:count 17} .str.21: ref;

axiom .str.21 == $sub.ref(0, 208832);

const {:count 13} .str.35: ref;

axiom .str.35 == $sub.ref(0, 209869);

const {:count 24} .str.36: ref;

axiom .str.36 == $sub.ref(0, 210917);

const {:count 25} .str.37: ref;

axiom .str.37 == $sub.ref(0, 211966);

const {:count 8} .str.38: ref;

axiom .str.38 == $sub.ref(0, 212998);

const {:count 20} .str.39: ref;

axiom .str.39 == $sub.ref(0, 214042);

const {:count 34} .str.71: ref;

axiom .str.71 == $sub.ref(0, 215100);

const {:count 20} .str.47: ref;

axiom .str.47 == $sub.ref(0, 216144);

const {:count 21} .str.55: ref;

axiom .str.55 == $sub.ref(0, 217189);

const {:count 20} .str.56: ref;

axiom .str.56 == $sub.ref(0, 218233);

const {:count 20} .str.57: ref;

axiom .str.57 == $sub.ref(0, 219277);

const {:count 37} .str.58: ref;

axiom .str.58 == $sub.ref(0, 220338);

const {:count 27} .str.59: ref;

axiom .str.59 == $sub.ref(0, 221389);

const {:count 55} .str.2: ref;

axiom .str.2 == $sub.ref(0, 222468);

const {:count 35} .str.108: ref;

axiom .str.108 == $sub.ref(0, 223527);

const {:count 44} .str.109: ref;

axiom .str.109 == $sub.ref(0, 224595);

const {:count 49} .str.110: ref;

axiom .str.110 == $sub.ref(0, 225668);

const {:count 18} .str.111: ref;

axiom .str.111 == $sub.ref(0, 226710);

const .str: ref;

axiom .str == $sub.ref(0, 227771);

const {:count 33} .str.1: ref;

axiom .str.1 == $sub.ref(0, 228828);

const {:count 22} .str.33: ref;

axiom .str.33 == $sub.ref(0, 229874);

const {:count 47} .str.13: ref;

axiom .str.13 == $sub.ref(0, 230945);

const {:count 32} .str.14: ref;

axiom .str.14 == $sub.ref(0, 232001);

const {:count 36} .str.15: ref;

axiom .str.15 == $sub.ref(0, 233061);

const {:count 37} .str.16: ref;

axiom .str.16 == $sub.ref(0, 234122);

const {:count 57} .str.17: ref;

axiom .str.17 == $sub.ref(0, 235203);

const {:count 40} .str.18: ref;

axiom .str.18 == $sub.ref(0, 236267);

const {:count 24} .str.19: ref;

axiom .str.19 == $sub.ref(0, 237315);

const {:count 11} .str.152: ref;

axiom .str.152 == $sub.ref(0, 238350);

const {:count 12} .str.153: ref;

axiom .str.153 == $sub.ref(0, 239386);

const {:count 47} .str.50: ref;

axiom .str.50 == $sub.ref(0, 240457);

const {:count 51} .str.51: ref;

axiom .str.51 == $sub.ref(0, 241532);

const {:count 52} .str.150: ref;

axiom .str.150 == $sub.ref(0, 242608);

const {:count 37} .str.151: ref;

axiom .str.151 == $sub.ref(0, 243669);

const {:count 22} .str.98: ref;

axiom .str.98 == $sub.ref(0, 244715);

const {:count 29} .str.99: ref;

axiom .str.99 == $sub.ref(0, 245768);

const {:count 42} .str.100: ref;

axiom .str.100 == $sub.ref(0, 246834);

const {:count 47} .str.101: ref;

axiom .str.101 == $sub.ref(0, 247905);

const {:count 35} .str.102: ref;

axiom .str.102 == $sub.ref(0, 248964);

const {:count 41} .str.103: ref;

axiom .str.103 == $sub.ref(0, 250029);

const {:count 32} .str.104: ref;

axiom .str.104 == $sub.ref(0, 251085);

const {:count 43} .str.105: ref;

axiom .str.105 == $sub.ref(0, 252152);

const {:count 14} .str.106: ref;

axiom .str.106 == $sub.ref(0, 253190);

const {:count 59} .str.107: ref;

axiom .str.107 == $sub.ref(0, 254273);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 255346);

const {:count 9} .str.10: ref;

axiom .str.10 == $sub.ref(0, 256379);

const {:count 53} .str.11: ref;

axiom .str.11 == $sub.ref(0, 257456);

const {:count 52} .str.12: ref;

axiom .str.12 == $sub.ref(0, 258532);

const {:count 85} .str.77: ref;

axiom .str.77 == $sub.ref(0, 259641);

const {:count 27} .str.115: ref;

axiom .str.115 == $sub.ref(0, 260692);

const {:count 212} .str.3: ref;

axiom .str.3 == $sub.ref(0, 261928);

const {:count 18} .str.4: ref;

axiom .str.4 == $sub.ref(0, 262970);

const {:count 25} .str.5: ref;

axiom .str.5 == $sub.ref(0, 264019);

const {:count 28} .str.6: ref;

axiom .str.6 == $sub.ref(0, 265071);

const {:count 22} .str.48: ref;

axiom .str.48 == $sub.ref(0, 266117);

const {:count 23} .str.49: ref;

axiom .str.49 == $sub.ref(0, 267164);

const {:count 24} .str.118: ref;

axiom .str.118 == $sub.ref(0, 268212);

const {:count 16} .str.119: ref;

axiom .str.119 == $sub.ref(0, 269252);

const {:count 18} .str.127: ref;

axiom .str.127 == $sub.ref(0, 270294);

const {:count 13} .str.128: ref;

axiom .str.128 == $sub.ref(0, 271331);

const {:count 27} .str.129: ref;

axiom .str.129 == $sub.ref(0, 272382);

const {:count 39} .str.130: ref;

axiom .str.130 == $sub.ref(0, 273445);

const {:count 31} .str.131: ref;

axiom .str.131 == $sub.ref(0, 274500);

const {:count 59} .str.132: ref;

axiom .str.132 == $sub.ref(0, 275583);

const {:count 28} .str.44: ref;

axiom .str.44 == $sub.ref(0, 276635);

const {:count 22} .str.45: ref;

axiom .str.45 == $sub.ref(0, 277681);

const {:count 25} .str.46: ref;

axiom .str.46 == $sub.ref(0, 278730);

const {:count 24} .str.124: ref;

axiom .str.124 == $sub.ref(0, 279778);

const {:count 20} .str.125: ref;

axiom .str.125 == $sub.ref(0, 280822);

const {:count 16} .str.126: ref;

axiom .str.126 == $sub.ref(0, 281862);

const {:count 2} .str.121: ref;

axiom .str.121 == $sub.ref(0, 282888);

const {:count 17} .str.133: ref;

axiom .str.133 == $sub.ref(0, 283929);

const {:count 28} .str.134: ref;

axiom .str.134 == $sub.ref(0, 284981);

const {:count 22} .str.120: ref;

axiom .str.120 == $sub.ref(0, 286027);

const {:count 16} .str.116: ref;

axiom .str.116 == $sub.ref(0, 287067);

const {:count 19} .str.117: ref;

axiom .str.117 == $sub.ref(0, 288110);

const {:count 17} .str.123: ref;

axiom .str.123 == $sub.ref(0, 289151);

const {:count 14} .str.122: ref;

axiom .str.122 == $sub.ref(0, 290189);

const {:count 17} .str.143: ref;

axiom .str.143 == $sub.ref(0, 291230);

const {:count 15} .str.137: ref;

axiom .str.137 == $sub.ref(0, 292269);

const {:count 57} .str.138: ref;

axiom .str.138 == $sub.ref(0, 293350);

const {:count 28} .str.139: ref;

axiom .str.139 == $sub.ref(0, 294402);

const {:count 38} .str.140: ref;

axiom .str.140 == $sub.ref(0, 295464);

const {:count 46} .str.141: ref;

axiom .str.141 == $sub.ref(0, 296534);

const {:count 43} .str.142: ref;

axiom .str.142 == $sub.ref(0, 297601);

const {:count 16} .str.144: ref;

axiom .str.144 == $sub.ref(0, 298641);

const {:count 19} .str.136: ref;

axiom .str.136 == $sub.ref(0, 299684);

const {:count 13} .str.135: ref;

axiom .str.135 == $sub.ref(0, 300721);

const {:count 17} .str.149: ref;

axiom .str.149 == $sub.ref(0, 301762);

const {:count 20} .str.147: ref;

axiom .str.147 == $sub.ref(0, 302806);

const {:count 21} .str.148: ref;

axiom .str.148 == $sub.ref(0, 303851);

const {:count 19} .str.145: ref;

axiom .str.145 == $sub.ref(0, 304894);

const {:count 20} .str.146: ref;

axiom .str.146 == $sub.ref(0, 305938);

const {:count 208} .str.155: ref;

axiom .str.155 == $sub.ref(0, 307170);

const ttm_bo_manager_func: ref;

axiom ttm_bo_manager_func == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 28} .str.154: ref;

axiom .str.154 == $sub.ref(0, 308222);

const {:count 48} .str.156: ref;

axiom .str.156 == $sub.ref(0, 309294);

const {:count 14} .str.158: ref;

axiom .str.158 == $sub.ref(0, 310332);

const {:count 13} .str.159: ref;

axiom .str.159 == $sub.ref(0, 311369);

const {:count 207} .str.22: ref;

axiom .str.22 == $sub.ref(0, 312600);

const {:count 68} .str.160: ref;

axiom .str.160 == $sub.ref(0, 313692);

const {:count 9} .str.161: ref;

axiom .str.161 == $sub.ref(0, 314725);

const {:count 39} .str.162: ref;

axiom .str.162 == $sub.ref(0, 315788);

const {:count 52} .str.163: ref;

axiom .str.163 == $sub.ref(0, 316864);

const {:count 38} .str.164: ref;

axiom .str.164 == $sub.ref(0, 317926);

const {:count 13} .str.169: ref;

axiom .str.169 == $sub.ref(0, 318963);

const {:count 12} .str.170: ref;

axiom .str.170 == $sub.ref(0, 319999);

const {:count 212} .str.172: ref;

axiom .str.172 == $sub.ref(0, 321235);

const {:count 34} .str.174: ref;

axiom .str.174 == $sub.ref(0, 322293);

const {:count 25} .str.175: ref;

axiom .str.175 == $sub.ref(0, 323342);

const {:count 44} .str.177: ref;

axiom .str.177 == $sub.ref(0, 324410);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const {:count 42} .str.176: ref;

axiom .str.176 == $sub.ref(0, 325476);

const {:count 4} .str.171: ref;

axiom .str.171 == $sub.ref(0, 326504);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const {:count 59} .str.193: ref;

axiom .str.193 == $sub.ref(0, 327587);

const {:count 8} .str.194: ref;

axiom .str.194 == $sub.ref(0, 328619);

const {:count 43} .str.185: ref;

axiom .str.185 == $sub.ref(0, 329686);

const {:count 27} .str.181: ref;

axiom .str.181 == $sub.ref(0, 330737);

const {:count 35} .str.182: ref;

axiom .str.182 == $sub.ref(0, 331796);

const {:count 18} .str.183: ref;

axiom .str.183 == $sub.ref(0, 332838);

const {:count 23} .str.184: ref;

axiom .str.184 == $sub.ref(0, 333885);

const cpu_tss: ref;

axiom cpu_tss == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

const {:count 33} .str.180: ref;

axiom .str.180 == $sub.ref(0, 334942);

const {:count 17} .str.178: ref;

axiom .str.178 == $sub.ref(0, 335983);

const {:count 16} .str.179: ref;

axiom .str.179 == $sub.ref(0, 337023);

const {:count 38} .str.29: ref;

axiom .str.29 == $sub.ref(0, 338085);

const {:count 26} .str.30: ref;

axiom .str.30 == $sub.ref(0, 339135);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 340167);

const {:count 3} .str.1.404: ref;

axiom .str.1.404 == $sub.ref(0, 341194);

const {:count 14} .str.405: ref;

axiom .str.405 == $sub.ref(0, 342232);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 343260);

const qxl_alloc_ioctl: ref;

axiom qxl_alloc_ioctl == $sub.ref(0, 344292);

procedure qxl_alloc_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_map_ioctl: ref;

axiom qxl_map_ioctl == $sub.ref(0, 345324);

procedure qxl_map_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_execbuffer_ioctl: ref;

axiom qxl_execbuffer_ioctl == $sub.ref(0, 346356);

procedure qxl_execbuffer_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_update_area_ioctl: ref;

axiom qxl_update_area_ioctl == $sub.ref(0, 347388);

procedure qxl_update_area_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_getparam_ioctl: ref;

axiom qxl_getparam_ioctl == $sub.ref(0, 348420);

procedure qxl_getparam_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_clientcap_ioctl: ref;

axiom qxl_clientcap_ioctl == $sub.ref(0, 349452);

procedure qxl_clientcap_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qxl_alloc_surf_ioctl: ref;

axiom qxl_alloc_surf_ioctl == $sub.ref(0, 350484);

procedure qxl_alloc_surf_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 351516);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const qxl_gem_object_create_with_handle: ref;

axiom qxl_gem_object_create_with_handle == $sub.ref(0, 352548);

procedure qxl_gem_object_create_with_handle($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.32, $CurrAddr, $M.6, $M.46, $M.39, $M.58, $M.40, $M.35, $M.36, assertsPassed, $M.55, $M.41, $M.61, $M.62, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_gem_object_create_with_handle($p0: ref, $p1: ref, $i2: i32, $i3: i64, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1} {:cexpr "qxl_gem_object_create_with_handle:arg:domain"} boogie_si_record_i32($i2);
    call {:si_unique_call 2} {:cexpr "qxl_gem_object_create_with_handle:arg:size"} boogie_si_record_i64($i3);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p5);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 7} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i3);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i21 := qxl_gem_object_create($p0, $i20, 0, $i2, 0, 0, $p4, $p7);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 10} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.32, $p7);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i25 := drm_gem_handle_create($p1, $p24, $p6);
    call {:si_unique_call 12} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.32, $p7);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p5, $p29);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.32, $p7);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} drm_gem_object_unreference_unlocked($p30);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i23 := $i25;
    goto $bb11;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb11;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    call {:si_unique_call 8} devirtbounce(0, .str.32, 87, 12);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call qxl_gem_object_create_with_handle_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i13 == 1;
    call {:si_unique_call 5} devirtbounce(0, .str.32, 86, 12);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call qxl_gem_object_create_with_handle_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const drm_err: ref;

axiom drm_err == $sub.ref(0, 353580);

procedure drm_err.ref.ref.i32($p0: ref, p.1: ref, p.2: i32);
  free requires assertsPassed;



implementation drm_err.ref.ref.i32($p0: ref, p.1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.i32($p0: ref, p.1: i32);
  free requires assertsPassed;



implementation drm_err.ref.i32($p0: ref, p.1: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.ref($p0: ref, p.1: ref);
  free requires assertsPassed;



implementation drm_err.ref.ref($p0: ref, p.1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref($p0: ref);
  free requires assertsPassed;



implementation drm_err.ref($p0: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation drm_err.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_err.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation drm_err.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 354612);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 15} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const qxl_gem_object_create: ref;

axiom qxl_gem_object_create == $sub.ref(0, 355644);

procedure qxl_gem_object_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.6, $CurrAddr, assertsPassed;



implementation qxl_gem_object_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 17} {:cexpr "qxl_gem_object_create:arg:size"} boogie_si_record_i32($i1);
    call {:si_unique_call 18} {:cexpr "qxl_gem_object_create:arg:alignment"} boogie_si_record_i32($i2);
    call {:si_unique_call 19} {:cexpr "qxl_gem_object_create:arg:initial_domain"} boogie_si_record_i32($i3);
    call {:si_unique_call 20} {:cexpr "qxl_gem_object_create:arg:discardable"} boogie_si_record_i1($i4);
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i5);
    call {:si_unique_call 21} {:cexpr "qxl_gem_object_create:arg:kernel"} boogie_si_record_i1($i5);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p7, $0.ref);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i2, 4095);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i9);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i14 := qxl_bo_create($p0, $i12, $i13, 0, $i3, $p6, $p8);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 23} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.34, $p8);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1312)), $mul.ref(1016, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p7, $p19);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} mutex_lock_nested($p21, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.34, $p8);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(160, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} list_add_tail($p23, $p25);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} mutex_unlock($p27);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i14, $sub.i32(0, 512));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb9;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} drm_err.ref.i32.i32.i32.i32(.str.31, $i1, $i3, $i11, $i14);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i11 := 4096;
    goto $bb3;
}



const drm_gem_handle_create: ref;

axiom drm_gem_handle_create == $sub.ref(0, 356676);

procedure drm_gem_handle_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_handle_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 1} true;
    call {:si_unique_call 28} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 29} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_gem_object_unreference_unlocked: ref;

axiom drm_gem_object_unreference_unlocked == $sub.ref(0, 357708);

procedure drm_gem_object_unreference_unlocked($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation drm_gem_object_unreference_unlocked($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(96, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i7 := kref_put_mutex($p5, drm_gem_object_free, $p6);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(96, 1)), $mul.ref(112, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} lock_acquire($p11, 0, 0, 0, 1, $0.ref, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(96, 1)), $mul.ref(112, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} lock_release($p13, 0, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(96, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} mutex_unlock($p9);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_gem_object_free: ref;

axiom drm_gem_object_free == $sub.ref(0, 358740);

procedure drm_gem_object_free($p0: ref);



const kref_put_mutex: ref;

axiom kref_put_mutex == $sub.ref(0, 359772);

procedure kref_put_mutex($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation kref_put_mutex($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var vslice_dummy_var_57: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 35} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 37} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_57 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i16 := atomic_add_unless($p15, $sub.i32(0, 1), 1);
    call {:si_unique_call 41} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 43} {:cexpr "tmp___3"} boogie_si_record_i64($i20);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} mutex_lock_nested($p2, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i23 := atomic_dec_and_test($p22);
    call {:si_unique_call 46} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 48} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call {:si_unique_call 50} devirtbounce.1($p1, $p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} mutex_unlock($p2);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} warn_slowpath_null(.str.166, 138);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 360804);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 361836);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 52} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 53} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 54} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 55} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 362868);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 57} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 363900);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 364932);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 60} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 365964);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 366996);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 65} devirtbounce.2(0, $p2, $p1, $p2);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 368028);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 67} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i3 := atomic_read($p0);
    call {:si_unique_call 69} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 71} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 73} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 75} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 77} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 369060);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 370092);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 79} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 80} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 81} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 82} $i4 := devirtbounce.3(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 83} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qxl_bo_create: ref;

axiom qxl_bo_create == $sub.ref(0, 371124);

procedure qxl_bo_create($p0: ref, $i1: i64, $i2: i1, $i3: i1, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qxl_bo_create($p0: ref, $i1: i64, $i2: i1, $i3: i1, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i8;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i15: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "qxl_bo_create:arg:size"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i2);
    call {:si_unique_call 85} {:cexpr "qxl_bo_create:arg:kernel"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i3);
    call {:si_unique_call 86} {:cexpr "qxl_bo_create:arg:pinned"} boogie_si_record_i1($i3);
    call {:si_unique_call 87} {:cexpr "qxl_bo_create:arg:domain"} boogie_si_record_i32($i4);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, $0.ref);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p11 := kmalloc(1304, 208);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $add.i64(4096, $i1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i16, 1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i64($i17, 4096);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 4096);
    call {:si_unique_call 89} {:cexpr "size"} boogie_si_record_i64($i19);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1016, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i23 := drm_gem_object_init($p21, $p22, $i19);
    call {:si_unique_call 91} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 93} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, $i4);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i8);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, $i32);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} INIT_LIST_HEAD($p35);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p5);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i8);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} qxl_ttm_placement_from_domain($p12, $i4, $i41);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i7);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i49 := $xor.i1($i48, 1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i50 := ttm_bo_init($p43, $p44, $i19, $i10, $p45, 0, $i49, $0.ref, $i19, $0.ref, $0.ref, qxl_ttm_bo_destroy);
    call {:si_unique_call 99} {:cexpr "r"} boogie_si_record_i32($i50);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 101} {:cexpr "tmp___1"} boogie_si_record_i64($i54);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, $p11);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i50, $sub.i32(0, 512));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i15 := $i50;
    goto $bb6;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p57);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} dev_err.ref.ref.i64.i32($p58, .str.25, $i19, $i4);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p12, $mul.ref(0, 1312)), $mul.ref(1272, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.6;
    cmdloc_dummy_var_1 := $M.6;
    call {:si_unique_call 96} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p39, $p40, 24, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_2;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p12);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} kfree($p29);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 372156);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __list_add($p0, $p3, $p1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 373188);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 374220);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 105} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} ldv_check_alloc_flags($i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p2 := ldv_undef_ptr();
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const drm_gem_object_init: ref;

axiom drm_gem_object_init == $sub.ref(0, 375252);

procedure drm_gem_object_init($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_object_init($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} {:cexpr "drm_gem_object_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 376284);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} free_($p0);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 377316);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 378348);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const qxl_ttm_placement_from_domain: ref;

axiom qxl_ttm_placement_from_domain == $sub.ref(0, 379380);

procedure qxl_ttm_placement_from_domain($p0: ref, $i1: i32, $i2: i1);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_placement_from_domain($p0: ref, $i1: i32, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $p48: ref;
  var $i49: i1;
  var $i51: i64;
  var $p54: ref;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} {:cexpr "qxl_ttm_placement_from_domain:arg:domain"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 113} {:cexpr "qxl_ttm_placement_from_domain:arg:pinned"} boogie_si_record_i1($i2);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 2097152 else 0);
    call {:si_unique_call 114} {:cexpr "pflag"} boogie_si_record_i32($i5);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p6);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $p10);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 2);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i29;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i37;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i44);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p48, $i44);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32(0, $i44);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i49 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb16;

  $bb16:
    call $i51, $p54, $i55, $p58, $i59, $i60, $i50 := qxl_ttm_placement_from_domain_loop_$bb16($p0, $i44, $i51, $p54, $i55, $p58, $i59, $i60, $i50);
    goto $bb16_last;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i51, 12)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p54, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i50);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i55, 12)), $mul.ref(4, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i50, 1);
    call {:si_unique_call 119} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32($i59, $i44);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i50 := $i59;
    goto $bb18_dummy;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i37, 1);
    call {:si_unique_call 118} {:cexpr "c"} boogie_si_record_i32($i39);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i37);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i40, 12)), $mul.ref(8, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, 458753);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i44 := $i39;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i29, 1);
    call {:si_unique_call 117} {:cexpr "c"} boogie_si_record_i32($i31);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i5, 458753);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i29);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $i32);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i37 := $i31;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i21, 1);
    call {:si_unique_call 116} {:cexpr "c"} boogie_si_record_i32($i23);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i5, 65544);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i21);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i25, 12)), $mul.ref(8, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i24);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i29 := $i23;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i15 := $add.i32(0, 1);
    call {:si_unique_call 115} {:cexpr "c"} boogie_si_record_i32($i15);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i5, 65540);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64(0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i17, 12)), $mul.ref(8, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i16);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i21 := $i15;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;
}



const qxl_ttm_bo_destroy: ref;

axiom qxl_ttm_bo_destroy == $sub.ref(0, 380412);

procedure qxl_ttm_bo_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $CurrAddr, $M.39, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_ttm_bo_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} qxl_surface_evict($p8, $p2, 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} mutex_lock_nested($p10, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(0, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} list_del_init($p11);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} mutex_unlock($p13);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} drm_gem_object_release($p14);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} kfree($p15);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ttm_bo_init: ref;

axiom ttm_bo_init == $sub.ref(0, 381444);

procedure ttm_bo_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $i5: i32, $i6: i1, $p7: ref, $i8: i64, $p9: ref, $p10: ref, $p11: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $i5: i32, $i6: i1, $p7: ref, $i8: i64, $p9: ref, $p10: ref, $p11: ref) returns ($r: i32)
{
  var $i12: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 126} {:cexpr "ttm_bo_init:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 127} {:cexpr "ttm_bo_init:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 128} {:cexpr "ttm_bo_init:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 129} {:cexpr "ttm_bo_init:arg:arg6"} boogie_si_record_i1($i6);
    call {:si_unique_call 130} {:cexpr "ttm_bo_init:arg:arg8"} boogie_si_record_i64($i8);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 382476);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    return;
}



const qxl_surface_evict: ref;

axiom qxl_surface_evict == $sub.ref(0, 383508);

procedure qxl_surface_evict($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $CurrAddr, $M.39, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_surface_evict($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 133} {:cexpr "qxl_surface_evict:arg:do_update_area"} boogie_si_record_i1($i2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} mutex_lock_nested($p4, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i3);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} qxl_surface_evict_locked($p0, $p1, $i5);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} mutex_unlock($p6);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 384540);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} __list_del_entry($p0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} INIT_LIST_HEAD($p0);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    return;
}



const drm_gem_object_release: ref;

axiom drm_gem_object_release == $sub.ref(0, 385572);

procedure drm_gem_object_release($p0: ref);
  free requires assertsPassed;



implementation drm_gem_object_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 386604);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    return;
}



const qxl_surface_evict_locked: ref;

axiom qxl_surface_evict_locked == $sub.ref(0, 387636);

procedure qxl_surface_evict_locked($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $CurrAddr, $M.39, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_surface_evict_locked($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 139} {:cexpr "qxl_surface_evict_locked:arg:do_update_area"} boogie_si_record_i1($i2);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_59 := qxl_hw_surface_dealloc($p0, $p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_58 := qxl_update_surface($p0, $p1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_update_surface: ref;

axiom qxl_update_surface == $sub.ref(0, 388668);

procedure qxl_update_surface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_update_surface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p3, 0);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, $i6);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 0);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, $i11);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15 := qxl_update_surface_loop_$bb1($p0, $p1, $p2, $i13, $i14, $i15);
    goto $bb1_last;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 512));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2_dummy;

  $bb2_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i13 := qxl_io_update_area($p0, $p1, $p2);
    call {:si_unique_call 144} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_453;
}



const qxl_hw_surface_dealloc: ref;

axiom qxl_hw_surface_dealloc == $sub.ref(0, 389700);

procedure qxl_hw_surface_dealloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $CurrAddr, $M.39, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_hw_surface_dealloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i6: i32;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i9 := qxl_alloc_surface_release_reserved($p0, 1, $p8, $p2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 147} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, $0.ref);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} spin_lock($p12);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_60 := idr_replace($p13, $0.ref, $i15);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} spin_unlock($p17);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    call {:si_unique_call 151} {:cexpr "id"} boogie_si_record_i32($i20);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p2);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i20);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p2);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p25 := qxl_release_map($p0, $p24);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i20);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p2);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} qxl_release_unmap($p0, $p29, $p30);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p2);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vslice_dummy_var_61 := qxl_push_command_ring_release($p0, $p31, 5, 0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p2);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} qxl_release_fence_buffer_objects($p33);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const qxl_alloc_surface_release_reserved: ref;

axiom qxl_alloc_surface_release_reserved == $sub.ref(0, 390732);

procedure qxl_alloc_surface_release_reserved($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.39, $M.40, $M.46, assertsPassed, $M.41, $M.58, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.61, $M.62, $M.32, $M.63, $M.64, $M.57;



implementation qxl_alloc_surface_release_reserved($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i14: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 157} {:cexpr "qxl_alloc_surface_release_reserved:arg:surface_cmd_type"} boogie_si_record_i32($i1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i34 := qxl_alloc_release_reserved($p0, 41, 1, $p3, $0.ref);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i14 := $i34;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i12 := qxl_release_alloc($p0, 1, $p3);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 159} {:cexpr "idr_ret"} boogie_si_record_i32($i12);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p20 := qxl_bo_ref($p19);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p20);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 64);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p3);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i23);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p3);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p4);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_62 := qxl_release_list_add($p26, $p27);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p3);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p30 := qxl_release_map($p0, $p29);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i12);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p30);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p32, $i31);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p3);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} qxl_release_unmap($p0, $p33, $p30);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} qxl_bo_unref($p4);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb8;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 391764);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv_spin_lock();
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_spin_lock_75($p0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    return;
}



const idr_replace: ref;

axiom idr_replace == $sub.ref(0, 392796);

procedure idr_replace($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_replace($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "idr_replace:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p3 := external_alloc();
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 393828);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ldv_spin_unlock();
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_spin_unlock_79($p0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    return;
}



const qxl_release_map: ref;

axiom qxl_release_map == $sub.ref(0, 394860);

procedure qxl_release_map($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.40, $M.6, $CurrAddr, $M.39, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_release_map($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4096);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p14 := qxl_bo_kmap_atomic_page($p0, $p10, $i13);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, $sub.i64(0, 4097));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p14, $mul.ref($i21, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p17 := $p22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const qxl_release_unmap: ref;

axiom qxl_release_unmap == $sub.ref(0, 395892);

procedure qxl_release_unmap($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_release_unmap($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, $sub.i64(0, 4097));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, $i16);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p12, $mul.ref($i17, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} qxl_bo_kunmap_atomic_page($p0, $p11, $p18);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const qxl_push_command_ring_release: ref;

axiom qxl_push_command_ring_release == $sub.ref(0, 396924);

procedure qxl_push_command_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.6, $CurrAddr, $M.39, $M.61, $M.62, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.55, assertsPassed;



implementation qxl_push_command_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 176} {:cexpr "qxl_push_command_ring_release:arg:type"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 177} {:cexpr "qxl_push_command_ring_release:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p10, $i2);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i19 := qxl_bo_physical_address($p0, $p15, $i18);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p20, $i19);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i5);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i25 := qxl_ring_push($p22, $p23, $i24);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const qxl_release_fence_buffer_objects: ref;

axiom qxl_release_fence_buffer_objects == $sub.ref(0, 397956);

procedure qxl_release_fence_buffer_objects($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $CurrAddr, $M.61, $M.62, $M.32, $M.40, $M.63, $M.64, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.57, $M.41, $M.58, $M.55, assertsPassed;



implementation qxl_release_fence_buffer_objects($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p38: ref;
  var $p51: ref;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i2 := list_is_singular($p1);
    call {:si_unique_call 182} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i5 := list_empty($p4);
    call {:si_unique_call 184} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 232), 5336)), $mul.ref(3120, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $sub.i32(0, 268435456));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} fence_init($p17, qxl_fence_ops, $p18, $i21, $i24);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} trace_fence_emit($p25);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} spin_lock($p28);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i34, $i36);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p27, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} spin_unlock($p51);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ww_acquire_fini($p52);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p38 := $p31;
    goto $bb11;

  $bb11:
    call $p39, $p40, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $i49, $i50, $p38 := qxl_release_fence_buffer_objects_loop_$bb11($p0, $i36, $p39, $p40, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $i49, $i50, $p38);
    goto $bb11_last;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} reservation_object_add_shared_fence($p42, $p43);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} ttm_bo_add_to_lru($p40);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __ttm_bo_unreserve($p40);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i36);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p38 := $p46;
    goto $bb13_dummy;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;
}



const list_is_singular: ref;

axiom list_is_singular == $sub.ref(0, 398988);

procedure list_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i3: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i1 := list_empty($p0);
    call {:si_unique_call 194} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i3);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i6, $i9);
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 400020);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fence_init: ref;

axiom fence_init == $sub.ref(0, 401052);

procedure fence_init($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation fence_init($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "fence_init:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 196} {:cexpr "fence_init:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    return;
}



const trace_fence_emit: ref;

axiom trace_fence_emit == $sub.ref(0, 402084);

procedure trace_fence_emit($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.61, $M.62, $M.32, $M.40, $M.63, $M.64, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.57, $M.41, $M.58, $M.55, assertsPassed;



implementation trace_fence_emit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i3 := static_key_false($add.ref($add.ref(__tracepoint_fence_emit, $mul.ref(0, 40)), $mul.ref(8, 1)));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 200} {:cexpr "tmp___1"} boogie_si_record_i8($i4);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __rcu_read_lock();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} __read_once_size($add.ref($add.ref(__tracepoint_fence_emit, $mul.ref(0, 40)), $mul.ref(32, 1)), $p29, 8);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i30 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 213} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} idr_preload_end();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1(1);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i32 == 1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i33 := rcu_read_lock_sched_held();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 215} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} lockdep_rcu_suspicious(.str.189, 81, .str.173);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb22;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} __rcu_read_lock();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} __read_once_size($add.ref($add.ref(__tracepoint_fence_emit, $mul.ref(0, 40)), $mul.ref(32, 1)), $p7, 8);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p9);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} idr_preload_end();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p17 := $p9;
    goto $bb14;

  $bb14:
    call $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27 := trace_fence_emit_loop_$bb14($p0, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27);
    goto $bb14_last;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.37, $p18);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.38, $p20);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p19);
    call {:si_unique_call 208} devirtbounce.4($p22, $p21, $p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p17, $mul.ref(1, 16));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.37, $p24);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p23;
    goto $bb15_dummy;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1(1);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i13 := rcu_read_lock_sched_held();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} lockdep_rcu_suspicious(.str.189, 81, .str.173);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb5;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;
}



const reservation_object_add_shared_fence: ref;

axiom reservation_object_add_shared_fence == $sub.ref(0, 403116);

procedure reservation_object_add_shared_fence($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation reservation_object_add_shared_fence($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_add_to_lru: ref;

axiom ttm_bo_add_to_lru == $sub.ref(0, 404148);

procedure ttm_bo_add_to_lru($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_add_to_lru($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    return;
}



const __ttm_bo_unreserve: ref;

axiom __ttm_bo_unreserve == $sub.ref(0, 405180);

procedure __ttm_bo_unreserve($p0: ref);
  free requires assertsPassed;



implementation __ttm_bo_unreserve($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} ww_mutex_unlock($p3);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    return;
}



const ww_acquire_fini: ref;

axiom ww_acquire_fini == $sub.ref(0, 406212);

procedure ww_acquire_fini($p0: ref);
  free requires assertsPassed;



implementation ww_acquire_fini($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} lock_release($p1, 0, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, oops_in_progress);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 221} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i11 := debug_locks_off();
    call {:si_unique_call 223} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, debug_locks_silent);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32(1, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 225} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32(1, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_63 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} warn_slowpath_fmt.ref.i32.ref.ref(.str.190, 175, .str.191, .str.192);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const debug_locks_off: ref;

axiom debug_locks_off == $sub.ref(0, 407244);

procedure debug_locks_off() returns ($r: i32);
  free requires assertsPassed;



implementation debug_locks_off() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 228} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 408276);

procedure warn_slowpath_fmt.ref.i32.ref.i64.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: i64, p.4: ref, p.5: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i64.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: i64, p.4: ref, p.5: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    return;
}



const ww_mutex_unlock: ref;

axiom ww_mutex_unlock == $sub.ref(0, 409308);

procedure ww_mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation ww_mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    return;
}



const static_key_false: ref;

axiom static_key_false == $sub.ref(0, 410340);

procedure static_key_false($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation static_key_false($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i1 := static_key_count($p0);
    call {:si_unique_call 234} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 236} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 411372);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} __preempt_count_add(1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 238} devirtbounce.5(0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 412404);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    call {:si_unique_call 239} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 240} devirtbounce.5(0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.6;
    cmdloc_dummy_var_4 := $M.6;
    call {:si_unique_call 241} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_5;
    call {:si_unique_call 242} devirtbounce.5(0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.6, $p17);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p19, $i18);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i15);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.6, $p11);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p13, $i12);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.6, $p0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1, $i10);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 413436);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_sched_held: ref;

axiom rcu_read_lock_sched_held == $sub.ref(0, 414468);

procedure rcu_read_lock_sched_held() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.61, $M.62, $M.39, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $CurrAddr, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.35, $M.36, $M.55, assertsPassed;



implementation rcu_read_lock_sched_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i21: i32;
  var $i18: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i3 := rcu_is_watching();
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 248} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i8 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 250} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, debug_locks);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i19 := preempt_count();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 254} {:cexpr "tmp___4"} boogie_si_record_i32($i19);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i22 := arch_local_save_flags();
    call {:si_unique_call 256} {:cexpr "_flags"} boogie_si_record_i64($i22);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i23 := arch_irqs_disabled_flags($i22);
    call {:si_unique_call 258} {:cexpr "tmp___5"} boogie_si_record_i32($i23);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i2 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb28;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb25;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb22;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i15 := lock_is_held(rcu_sched_lock_map);
    call {:si_unique_call 252} {:cexpr "lockdep_opinion"} boogie_si_record_i32($i15);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb19;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 415500);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    return;
}



const idr_preload_end: ref;

axiom idr_preload_end == $sub.ref(0, 416532);

procedure idr_preload_end();
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation idr_preload_end()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} devirtbounce.5(0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __preempt_count_sub(1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 417564);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 265} devirtbounce.7(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 264} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 263} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 418596);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 266} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 267} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 419628);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 420660);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 270} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 271} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 421692);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.61, $M.62, $M.39, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $CurrAddr, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.35, $M.36, $M.55, assertsPassed;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i0 := devirtbounce.8(0, __preempt_count);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 273} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 422724);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.6, pv_irq_ops);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 275} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 277} $i7 := devirtbounce.9(0, 43, pv_irq_ops, 1);
    call {:si_unique_call 278} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 276} devirtbounce(0, .str.167, 831, 12);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 423756);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 424788);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 283} devirtbounce.7(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 282} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 281} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const static_key_count: ref;

axiom static_key_count == $sub.ref(0, 425820);

procedure static_key_count($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation static_key_count($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i2 := atomic_read($p1);
    call {:si_unique_call 285} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_bo_physical_address: ref;

axiom qxl_bo_physical_address == $sub.ref(0, 426852);

procedure qxl_bo_physical_address($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation qxl_bo_physical_address($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i9: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "qxl_bo_physical_address:arg:offset"} boogie_si_record_i64($i2);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i9);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 32)), $mul.ref(24, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.6, $p17);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(424, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.6, $p20);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, $i2);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i18, $i22);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const qxl_ring_push: ref;

axiom qxl_ring_push == $sub.ref(0, 427884);

procedure qxl_ring_push($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.61, $M.62, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.35, $M.36, $M.55, assertsPassed;



implementation qxl_ring_push($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i1;
  var $i42: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i54: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i2);
    call {:si_unique_call 289} {:cexpr "qxl_ring_push:arg:interruptible"} boogie_si_record_i1($i2);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} ldv_spin_lock();
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    $p11 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i10, $i12);
    $p14 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $p70 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.6, $p70);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, $sub.i32(0, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i71, $i74);
    call {:si_unique_call 330} {:cexpr "idx"} boogie_si_record_i32($i75);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p76);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 20)), $mul.ref(20, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.6, $p80);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i81, $i75);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p79, $mul.ref($i83, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.6;
    cmdloc_dummy_var_7 := $M.6;
    call {:si_unique_call 331} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p84, $p1, $i87, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_8;
    $p88 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    $p91 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i90);
    call {:si_unique_call 332} devirtbounce.5(0);
    $p92 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.6, $p92);
    $p94 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.6, $p94);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i93, $i95);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} spin_unlock_irqrestore($p99, $u0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb51:
    assume $i96 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.6, $p97);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} outb(0, $i98);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb1:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i19);
    call {:si_unique_call 291} devirtbounce.5(0);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i22 := drm_can_sleep();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 294} {:cexpr "tmp___6"} boogie_si_record_i8($i23);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i5);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __might_sleep(.str.34, 129, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i55 := qxl_check_header($p0);
    call {:si_unique_call 306} {:cexpr "tmp___3"} boogie_si_record_i32($i55);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} INIT_LIST_HEAD($p57);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, 0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.6, $p59);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i61 := prepare_to_wait_event($p60, $p4, 2);
    call {:si_unique_call 321} {:cexpr "tmp___4"} boogie_si_record_i64($i61);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i62 := qxl_check_header($p0);
    call {:si_unique_call 323} {:cexpr "tmp___5"} boogie_si_record_i32($i62);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i63 == 1);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    call $p64, $i65, $i66, $i67 := qxl_ring_push_loop_$bb45($p0, $p4, $p59, $p64, $i65, $i66, $i67);
    goto $bb45_last;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} schedule();
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p59);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i65 := prepare_to_wait_event($p64, $p4, 2);
    call {:si_unique_call 327} {:cexpr "tmp___4"} boogie_si_record_i64($i65);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i66 := qxl_check_header($p0);
    call {:si_unique_call 329} {:cexpr "tmp___5"} boogie_si_record_i32($i66);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb49_dummy;

  $bb46:
    assume $i67 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.6, $p68);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} finish_wait($p69, $p4);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} ldv_spin_lock();
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb43;

  $bb38:
    assume $i56 == 1;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} __might_sleep(.str.34, 124, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i32 := qxl_check_header($p0);
    call {:si_unique_call 303} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume $i53 == 1;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb35;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} INIT_LIST_HEAD($p34);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i38 := prepare_to_wait_event($p37, $p3, 1);
    call {:si_unique_call 309} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i39 := qxl_check_header($p0);
    call {:si_unique_call 311} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i40 == 1);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    goto $bb24;

  $bb24:
    call $i41, $i43, $i44, $p45, $i46, $i47, $i48 := qxl_ring_push_loop_$bb24($p0, $p3, $p36, $i41, $i43, $i44, $p45, $i46, $i47, $i48);
    goto $bb24_last;

  $bb27:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i41, 0);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i44 := $i41;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} schedule();
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p36);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i46 := prepare_to_wait_event($p45, $p3, 1);
    call {:si_unique_call 316} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i47 := qxl_check_header($p0);
    call {:si_unique_call 318} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb31;

  $bb31:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i46;
    goto $bb31_dummy;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} finish_wait($p50, $p3);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i42);
    call {:si_unique_call 313} {:cexpr "__ret"} boogie_si_record_i32($i51);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb32;

  $bb28:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i42 := $i44;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb22;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i27 := qxl_check_header($p0);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i29, $i30 := qxl_ring_push_loop_$bb11($p0, $i29, $i30);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} __const_udelay(4295);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i29 := qxl_check_header($p0);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb13_dummy;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb5;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb49_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb31_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 428916);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 335} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 429948);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.39;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ldv_spin_unlock();
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} ldv_spin_unlock_irqrestore_82($p0, $i1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    return;
}



const drm_can_sleep: ref;

axiom drm_can_sleep == $sub.ref(0, 430980);

procedure drm_can_sleep() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.61, $M.62, $M.39, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $CurrAddr, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.35, $M.36, $M.55, assertsPassed;



implementation drm_can_sleep() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i11: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i0 := preempt_count();
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __bad_size_call_parameter();
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i11 := $u1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i15 := atomic_read(kgdb_active);
    call {:si_unique_call 350} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i11, $i15);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i16 == 1);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i17 := arch_local_save_flags();
    call {:si_unique_call 353} {:cexpr "_flags"} boogie_si_record_i64($i17);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i18 := arch_irqs_disabled_flags($i17);
    call {:si_unique_call 355} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb26:
    assume $i16 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb9:
    assume $i5 == 1;
    call {:si_unique_call 341} $i14 := devirtbounce.8(0, cpu_number);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 342} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i14);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb21;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb12:
    assume $i6 == 1;
    call {:si_unique_call 343} $i13 := devirtbounce.8(0, cpu_number);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 344} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i13);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb21;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb16:
    assume $i8 == 1;
    call {:si_unique_call 345} $i12 := devirtbounce.8(0, cpu_number);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 346} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i12);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb21;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb18:
    assume $i9 == 1;
    call {:si_unique_call 347} $i10 := devirtbounce.8(0, cpu_number);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 348} {:cexpr "pfo_ret__"} boogie_si_record_i32($i10);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb21;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 432012);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    return;
}



const qxl_check_header: ref;

axiom qxl_check_header == $sub.ref(0, 433044);

procedure qxl_check_header($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6;



implementation qxl_check_header($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_spin_lock();
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i5, $i7);
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32($i8, $i10);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 358} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} spin_unlock_irqrestore($p18, $u0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i16);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 434076);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 361} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 435108);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 363} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 364} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 436140);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 437172);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 438204);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 366} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 367} devirtbounce.10(0, $i0, $i1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 439236);

procedure __bad_size_call_parameter();



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 440268);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 368} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_82: ref;

axiom ldv_spin_unlock_irqrestore_82 == $sub.ref(0, 441300);

procedure ldv_spin_unlock_irqrestore_82($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_82($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} {:cexpr "ldv_spin_unlock_irqrestore_82:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 442332);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_kunmap_atomic_page: ref;

axiom qxl_bo_kunmap_atomic_page == $sub.ref(0, 443364);

procedure qxl_bo_kunmap_atomic_page($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_bo_kunmap_atomic_page($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2592)), $mul.ref(32, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p7, $mul.ref($i12, 256));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} qxl_bo_kunmap($p1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} io_mapping_unmap_atomic($p2);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_64 := ttm_mem_io_lock($p13, 0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} ttm_mem_io_free($p27, $p29);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} ttm_mem_io_unlock($p13);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const io_mapping_unmap_atomic: ref;

axiom io_mapping_unmap_atomic == $sub.ref(0, 444396);

procedure io_mapping_unmap_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation io_mapping_unmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} pagefault_enable();
    call {:si_unique_call 378} devirtbounce.5(0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __preempt_count_sub(1);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ttm_mem_io_lock: ref;

axiom ttm_mem_io_lock == $sub.ref(0, 445428);

procedure ttm_mem_io_lock($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_io_lock($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} {:cexpr "ttm_mem_io_lock:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 381} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_mem_io_free: ref;

axiom ttm_mem_io_free == $sub.ref(0, 446460);

procedure ttm_mem_io_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ttm_mem_io_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    return;
}



const ttm_mem_io_unlock: ref;

axiom ttm_mem_io_unlock == $sub.ref(0, 447492);

procedure ttm_mem_io_unlock($p0: ref);
  free requires assertsPassed;



implementation ttm_mem_io_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_kunmap: ref;

axiom qxl_bo_kunmap == $sub.ref(0, 448524);

procedure qxl_bo_kunmap($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_kunmap($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, $0.ref);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(960, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} ttm_bo_kunmap($p6);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ttm_bo_kunmap: ref;

axiom ttm_bo_kunmap == $sub.ref(0, 449556);

procedure ttm_bo_kunmap($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_kunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 450588);

procedure pagefault_enable();
  free requires assertsPassed;
  modifies $M.6;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} devirtbounce.5(0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} pagefault_disabled_dec();
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_disabled_dec: ref;

axiom pagefault_disabled_dec == $sub.ref(0, 451620);

procedure pagefault_disabled_dec();
  free requires assertsPassed;
  modifies $M.6;



implementation pagefault_disabled_dec()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var vslice_dummy_var_65: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p0 := get_current();
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i3);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p5 := get_current();
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 388} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 390} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_65 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} warn_slowpath_null(.str.165, 15);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 452652);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p0 := devirtbounce.11(0, current_task);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const qxl_bo_kmap_atomic_page: ref;

axiom qxl_bo_kmap_atomic_page == $sub.ref(0, 453684);

procedure qxl_bo_kmap_atomic_page($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.40, $M.6, $CurrAddr, $M.39, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_bo_kmap_atomic_page($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p22: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p45: ref;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 395} {:cexpr "qxl_bo_kmap_atomic_page:arg:page_offset___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2592)), $mul.ref(32, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p8, $mul.ref($i13, 256));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i56 := qxl_bo_kmap($p1, $p3);
    call {:si_unique_call 402} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.40, $p3);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i2);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i60 := $mul.i64($i59, 4096);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p58, $mul.ref($i60, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p3, $p61);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.40, $p3);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p45 := $p62;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $r := $p45;
    return;

  $bb12:
    assume $i57 == 1;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p45 := $0.ref;
    goto $bb8;

  $bb9:
    assume $i49 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i2);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i53 := $mul.i64($i52, 4096);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p51, $mul.ref($i53, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p3, $p54);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.40, $p3);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p45 := $p55;
    goto $bb8;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_66 := ttm_mem_io_lock($p14, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i36 := ttm_mem_io_reserve($p33, $p35);
    call {:si_unique_call 398} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} ttm_mem_io_unlock($p14);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(56, 1)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.6, $p40);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i2);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i41, $i42);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p44 := io_mapping_map_atomic_wc($p22, $i43);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p45 := $p44;
    goto $bb8;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4944, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb3;
}



const ttm_mem_io_reserve: ref;

axiom ttm_mem_io_reserve == $sub.ref(0, 454716);

procedure ttm_mem_io_reserve($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_io_reserve($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 403} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const io_mapping_map_atomic_wc: ref;

axiom io_mapping_map_atomic_wc == $sub.ref(0, 455748);

procedure io_mapping_map_atomic_wc($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation io_mapping_map_atomic_wc($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "io_mapping_map_atomic_wc:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} __preempt_count_add(1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 407} devirtbounce.5(0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} pagefault_disable();
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($i1, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const qxl_bo_kmap: ref;

axiom qxl_bo_kmap == $sub.ref(0, 456780);

procedure qxl_bo_kmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.6, $M.41, $CurrAddr;



implementation qxl_bo_kmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(32, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.6, $p14);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(960, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i17 := ttm_bo_kmap($p12, 0, $i15, $p16);
    call {:si_unique_call 411} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(960, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p20 := ttm_kmap_obj_virtual($p19, $p2);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, $p20);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p1, $p25);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p1, $p10);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ttm_bo_kmap: ref;

axiom ttm_bo_kmap == $sub.ref(0, 457812);

procedure ttm_bo_kmap($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_kmap($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 413} {:cexpr "ttm_bo_kmap:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 414} {:cexpr "ttm_bo_kmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_kmap_obj_virtual: ref;

axiom ttm_kmap_obj_virtual == $sub.ref(0, 458844);

procedure ttm_kmap_obj_virtual($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ttm_kmap_obj_virtual($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 128);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, $i6);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 459876);

procedure pagefault_disable();
  free requires assertsPassed;
  modifies $M.6;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} pagefault_disabled_inc();
    call {:si_unique_call 418} devirtbounce.5(0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_disabled_inc: ref;

axiom pagefault_disabled_inc == $sub.ref(0, 460908);

procedure pagefault_disabled_inc();
  free requires assertsPassed;
  modifies $M.6;



implementation pagefault_disabled_inc()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p0 := get_current();
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i3);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_79: ref;

axiom ldv_spin_unlock_79 == $sub.ref(0, 461940);

procedure ldv_spin_unlock_79($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_79($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} _raw_spin_unlock($p2);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 462972);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 464004);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 421} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 422} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_spin_lock_75: ref;

axiom ldv_spin_lock_75 == $sub.ref(0, 465036);

procedure ldv_spin_lock_75($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_75($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} _raw_spin_lock($p2);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 466068);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    return;
}



const qxl_release_alloc: ref;

axiom qxl_release_alloc == $sub.ref(0, 467100);

procedure qxl_release_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, assertsPassed, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_release_alloc($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "qxl_release_alloc:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p3 := kmalloc(216, 208);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $0.ref);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} INIT_LIST_HEAD($p13);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} idr_preload(208);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} spin_lock($p14);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i17 := idr_alloc($p15, $p16, 1, 0, 0);
    call {:si_unique_call 431} {:cexpr "handle"} boogie_si_record_i32($i17);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3304, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3304, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i20);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3304, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i23);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} spin_unlock($p26);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} idr_preload_end();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i17, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p3);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i29 := $M.42;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i17);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} qxl_io_log.ref.ref.i32($p0, .str.188, $i17);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} kfree($p28);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $0.ref);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb3;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} drm_err.ref(.str.187);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const qxl_bo_ref: ref;

axiom qxl_bo_ref == $sub.ref(0, 468132);

procedure qxl_bo_ref($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_ref($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} drm_gem_object_reference($p1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const qxl_release_list_add: ref;

axiom qxl_release_list_add == $sub.ref(0, 469164);

procedure qxl_release_list_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qxl_release_list_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p12: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i20: i32;
  var vslice_dummy_var_67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p30 := kmalloc(32, 208);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_67 := qxl_bo_ref($p1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, $p35);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} list_add_tail($p41, $p42);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p12 := $p4;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $p17, $i18, $i19, $p23, $p24, $p25, $p27, $i28, $i29, $p12 := qxl_release_list_add_loop_$bb4($p1, $i10, $p14, $p15, $i16, $p17, $i18, $i19, $p23, $p24, $p25, $p27, $i28, $i29, $p12);
    goto $bb4_last;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i16, $i18);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i10);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p24;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;
}



const qxl_bo_unref: ref;

axiom qxl_bo_unref == $sub.ref(0, 470196);

procedure qxl_bo_unref($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_bo_unref($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.6, $p0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p0);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1312)), $mul.ref(1016, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} drm_gem_object_unreference_unlocked($p5);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p0, $0.ref);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_alloc_release_reserved: ref;

axiom qxl_alloc_release_reserved == $sub.ref(0, 471228);

procedure qxl_alloc_release_reserved($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.40, $CurrAddr, $M.46, assertsPassed, $M.58, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.61, $M.62, $M.32, $M.63, $M.64, $M.57;



implementation qxl_alloc_release_reserved($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i1;
  var $i8: i1;
  var $i10: i1;
  var $i9: i32;
  var $i7: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 442} {:cexpr "qxl_alloc_release_reserved:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 443} {:cexpr "qxl_alloc_release_reserved:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 2);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} drm_err.ref.i32(.str.70, $i2);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i12 := qxl_release_alloc($p0, $i2, $p3);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 445} {:cexpr "idr_ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} mutex_lock_nested($p16, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i7);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i17, 4));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i7);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(releases_per_bo, $mul.ref(0, 12)), $mul.ref($i22, 4));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.43, $p23);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i21, $i24);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i7);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref($i36, 8));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i7);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref($i50, 8));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p54 := qxl_bo_ref($p53);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, $p54);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i7);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i55, 4));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.6, $p57);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i7);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref(release_size_per_bo, $mul.ref(0, 12)), $mul.ref($i59, 4));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.44, $p60);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i58, $i61);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p3);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, $i62);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i7);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i65, 4));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.6, $p67);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i7);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i70, 4));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p72, $i69);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} mutex_unlock($p76);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p3);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.6, $p5);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i79 := qxl_release_list_add($p77, $p78);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 456} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} qxl_bo_unref($p5);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p3);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p83 := qxl_release_map($p0, $p82);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i12);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p83);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p85, $i84);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.6, $p3);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} qxl_release_unmap($p0, $p86, $p83);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i11 := $i79;
    goto $bb10;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.6, $p3);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} qxl_release_free($p0, $p81);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i11 := $i79;
    goto $bb10;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p5);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p75);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i7);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 8));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i46 := qxl_release_bo_alloc($p0, $p45);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 450} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} mutex_unlock($p48);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.6, $p3);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} qxl_release_free($p0, $p49);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i11 := $i46;
    goto $bb10;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i7);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 8));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} qxl_bo_unref($p29);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i7);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5144, 1)), $mul.ref($i30, 4));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, 0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i7);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref($i33, 8));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p35, $0.ref);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb10;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $0.ref);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const qxl_release_bo_alloc: ref;

axiom qxl_release_bo_alloc == $sub.ref(0, 472260);

procedure qxl_release_bo_alloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qxl_release_bo_alloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i2 := qxl_bo_create($p0, 4096, 0, 1, 1, $0.ref, $p1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 462} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const qxl_release_free: ref;

axiom qxl_release_free == $sub.ref(0, 473292);

procedure qxl_release_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $CurrAddr, $M.46, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_release_free($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_68: i64;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i2 := $M.42;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} spin_lock($p13);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} idr_remove($p14, $i16);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} spin_unlock($p17);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} qxl_release_free_list($p1);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} kfree($p39);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i24 := list_empty($p23);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 470} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i26);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 472} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_68 := ldv__builtin_expect($i34, 0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} qxl_release_free_list($p1);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_69 := fence_signal($p36);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} fence_put($p38);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} warn_slowpath_null(.str.69, 192);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(100, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} qxl_surface_id_dealloc($p0, $i12);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(88, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} qxl_io_log.ref.ref.i32.i32($p0, .str.68, $i5, $i7);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_io_log: ref;

axiom qxl_io_log == $sub.ref(0, 474324);

procedure qxl_io_log.ref.ref.i64.i64.ref.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: ref, p.5: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i64.i64.ref.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: ref, p.5: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} ldv__builtin_va_start($p2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_70 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} ldv__builtin_va_end($p2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} outb(0, $i10);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_71: i32;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} ldv__builtin_va_start($p2);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_71 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ldv__builtin_va_end($p2);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} outb(0, $i10);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_72: i32;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} ldv__builtin_va_start($p2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_72 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} ldv__builtin_va_end($p2);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} outb(0, $i10);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i64.ref($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i64.ref($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_73: i32;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ldv__builtin_va_start($p2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_73 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} ldv__builtin_va_end($p2);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} outb(0, $i10);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_74: i32;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} ldv__builtin_va_start($p2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_74 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} ldv__builtin_va_end($p2);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} outb(0, $i10);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_75: i32;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} ldv__builtin_va_start($p2);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_75 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} ldv__builtin_va_end($p2);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} outb(0, $i10);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_76: i32;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} ldv__builtin_va_start($p2);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_76 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} ldv__builtin_va_end($p2);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} outb(0, $i10);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_77: i32;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} ldv__builtin_va_start($p2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_77 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} ldv__builtin_va_end($p2);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} outb(0, $i10);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_78: i32;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} ldv__builtin_va_start($p2);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_78 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} ldv__builtin_va_end($p2);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} outb(0, $i10);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_79: i32;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ldv__builtin_va_start($p2);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_79 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} ldv__builtin_va_end($p2);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} outb(0, $i10);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_80: i32;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv__builtin_va_start($p2);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_80 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv__builtin_va_end($p2);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} outb(0, $i10);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_81: i32;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv__builtin_va_start($p2);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_81 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv__builtin_va_end($p2);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} outb(0, $i10);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_82: i32;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv__builtin_va_start($p2);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_82 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv__builtin_va_end($p2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} outb(0, $i10);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_83: i32;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv__builtin_va_start($p2);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_83 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv__builtin_va_end($p2);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} outb(0, $i10);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i64($p0: ref, $p1: ref, p.2: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_84: i32;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} ldv__builtin_va_start($p2);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_84 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} ldv__builtin_va_end($p2);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} outb(0, $i10);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_85: i32;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv__builtin_va_start($p2);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_85 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv__builtin_va_end($p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} outb(0, $i10);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    return;
}



procedure qxl_io_log.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_io_log.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_86: i32;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv__builtin_va_start($p2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5424)), $mul.ref(12, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_86 := vsnprintf($p6, 4096, $p1, $p2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ldv__builtin_va_end($p2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 7);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} outb(0, $i10);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    return;
}



const qxl_surface_id_dealloc: ref;

axiom qxl_surface_id_dealloc == $sub.ref(0, 475356);

procedure qxl_surface_id_dealloc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation qxl_surface_id_dealloc($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "qxl_surface_id_dealloc:arg:surface_id"} boogie_si_record_i32($i1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} spin_lock($p2);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} idr_remove($p3, $i1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} spin_unlock($p4);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 476388);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    return;
}



const qxl_release_free_list: ref;

axiom qxl_release_free_list == $sub.ref(0, 477420);

procedure qxl_release_free_list($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.46, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_release_free_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i3 := list_empty($p2);
    call {:si_unique_call 572} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $p10, $p11, $p12, $p13, $p15, $p16, $i17, $i18 := qxl_release_free_list_loop_$bb4($p0, $p1, $p2, $p6, $p7, $p8, $p10, $p11, $p12, $p13, $p15, $p16, $i17, $i18);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p13);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} qxl_bo_unref($p1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} list_del($p15);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p8);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} kfree($p16);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i17 := list_empty($p2);
    call {:si_unique_call 577} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6_dummy;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fence_signal: ref;

axiom fence_signal == $sub.ref(0, 478452);

procedure fence_signal($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fence_signal($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 578} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 579} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fence_put: ref;

axiom fence_put == $sub.ref(0, 479484);

procedure fence_put($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation fence_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_87 := kref_put($p3, fence_release);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const fence_release: ref;

axiom fence_release == $sub.ref(0, 480516);

procedure fence_release($p0: ref);



const kref_put: ref;

axiom kref_put == $sub.ref(0, 481548);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 482580);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_88: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 584} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 586} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_88 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 590} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 591} devirtbounce.1($p2, $p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} warn_slowpath_null(.str.166, 71);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 483612);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 593} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 594} devirtbounce.12(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.45, $p2);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 484644);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_va_start: ref;

axiom ldv__builtin_va_start == $sub.ref(0, 485676);

procedure ldv__builtin_va_start($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    return;
}



const vsnprintf: ref;

axiom vsnprintf == $sub.ref(0, 486708);

procedure vsnprintf($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);



const ldv__builtin_va_end: ref;

axiom ldv__builtin_va_end == $sub.ref(0, 487740);

procedure ldv__builtin_va_end($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_end($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    return;
}



const drm_gem_object_reference: ref;

axiom drm_gem_object_reference == $sub.ref(0, 488772);

procedure drm_gem_object_reference($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_gem_object_reference($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} kref_get($p1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 489804);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_89: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 597} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 598} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 600} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_89 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 601} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 603} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 606} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} warn_slowpath_null(.str.166, 47);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 490836);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 609} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 610} $i3 := devirtbounce.13(0, $p2, $i0, $p2);
    call {:si_unique_call 611} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const idr_preload: ref;

axiom idr_preload == $sub.ref(0, 491868);

procedure idr_preload($i0: i32);
  free requires assertsPassed;



implementation idr_preload($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "idr_preload:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 492900);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 613} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 614} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 615} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 616} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 617} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const qxl_io_update_area: ref;

axiom qxl_io_update_area == $sub.ref(0, 493932);

procedure qxl_io_update_area($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_io_update_area($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i9: i32;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i38: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} drm_err.ref(.str.41);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1264, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    call {:si_unique_call 619} {:cexpr "surface_id"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    call {:si_unique_call 620} {:cexpr "surface_width"} boogie_si_record_i32($i14);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    call {:si_unique_call 621} {:cexpr "surface_height"} boogie_si_record_i32($i17);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, $i14);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i32($i28, $i17);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4432, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} mutex_lock_nested($p39, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 5424)), $mul.ref(5264, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.6;
    cmdloc_dummy_var_10 := $M.6;
    call {:si_unique_call 624} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p43, $p44, 16, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_11;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 5424)), $mul.ref(5280, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p47, $i9);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i48 := wait_for_io_cmd_user($p0, 0, 16, 1);
    call {:si_unique_call 626} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4432, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} mutex_unlock($p49);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i38 := $i48;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0, .str.42, .str.43, $i9, $i31, $i33, $i35, $i37, $i14, $i17);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wait_for_io_cmd_user: ref;

axiom wait_for_io_cmd_user == $sub.ref(0, 494964);

procedure wait_for_io_cmd_user($p0: ref, $i1: i8, $i2: i64, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation wait_for_io_cmd_user($p0: ref, $i1: i8, $i2: i64, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i29: i1;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i42: i1;
  var $i43: i64;
  var $i44: i1;
  var $i46: i1;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $i50: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i1;
  var $i64: i64;
  var $i65: i1;
  var $i67: i1;
  var $i66: i1;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $i80: i1;
  var $i81: i64;
  var $i82: i1;
  var $i84: i1;
  var $i83: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i57: i32;
  var $i92: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i1;
  var $i109: i64;
  var $i110: i1;
  var $i112: i1;
  var $i111: i1;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i8;
  var $i124: i1;
  var $i125: i1;
  var $i126: i64;
  var $i127: i1;
  var $i129: i1;
  var $i128: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i64;
  var $i134: i1;
  var $i135: i64;
  var $i136: i64;
  var $i133: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $i144: i8;
  var $i145: i1;
  var $i146: i1;
  var $i147: i64;
  var $i148: i1;
  var $i150: i1;
  var $i149: i1;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i8;
  var $i162: i1;
  var $i163: i1;
  var $i164: i64;
  var $i165: i1;
  var $i167: i1;
  var $i166: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i64;
  var $i171: i64;
  var $p172: ref;
  var $i173: i64;
  var $i174: i32;
  var $i140: i32;
  var $i93: i32;
  var $i175: i1;
  var $i176: i32;
  var $p177: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 632} {:cexpr "wait_for_io_cmd_user:arg:val"} boogie_si_record_i8($i1);
    call {:si_unique_call 633} {:cexpr "wait_for_io_cmd_user:arg:port"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i3);
    call {:si_unique_call 634} {:cexpr "wait_for_io_cmd_user:arg:intr"} boogie_si_record_i1($i3);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i2);
    call {:si_unique_call 635} {:cexpr "addr"} boogie_si_record_i64($i12);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3384, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} mutex_lock_nested($p13, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i15 := atomic_read($p14);
    call {:si_unique_call 638} {:cexpr "irq_num"} boogie_si_record_i32($i15);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3544, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, $i15);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i15;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i64.i32($i12);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} outb($i98, $i99);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i96, 1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3544, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p101, $i100);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i8);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i102 == 1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} __might_sleep(.str.34, 308, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i142 := atomic_read($p141);
    call {:si_unique_call 676} {:cexpr "tmp___10"} boogie_si_record_i32($i142);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i143 := $sgt.i32($i142, $i96);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i8($i143);
    call {:si_unique_call 677} {:cexpr "__cond___6"} boogie_si_record_i8($i144);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i147 := 1250;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i8.i1($i144);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i149 := 1;
    assume {:branchcond $i148} true;
    goto $bb104, $bb106;

  $bb106:
    assume !($i148 == 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i147, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i149 := $i150;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i149);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i173 := $i147;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i64.i32($i173);
    call {:si_unique_call 697} {:cexpr "ret"} boogie_si_record_i32($i174);
    assume {:verifier.code 0} true;
    $i140 := $i174;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i93 := $i140;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i175 := $sgt.i32($i93, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    $i176 := $i93;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3384, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} mutex_unlock($p177);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $r := $i176;
    return;

  $bb124:
    assume $i175 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i176 := 0;
    goto $bb126;

  $bb107:
    assume $i152 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} INIT_LIST_HEAD($p153);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p154, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i155 := 1250;
    goto $bb109;

  $bb109:
    call $i155, $p156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i167, $i166, $i168, $i169, $i170, $i171 := wait_for_io_cmd_user_loop_$bb109($p0, $p7, $i96, $i155, $p156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i167, $i166, $i168, $i169, $i170, $i171);
    goto $bb109_last;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i157 := prepare_to_wait_event($p156, $p7, 2);
    call {:si_unique_call 690} {:cexpr "tmp___8"} boogie_si_record_i64($i157);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i159 := atomic_read($p158);
    call {:si_unique_call 692} {:cexpr "tmp___9"} boogie_si_record_i32($i159);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, $i96);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i8($i160);
    call {:si_unique_call 693} {:cexpr "__cond___5"} boogie_si_record_i8($i161);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i8.i1($i161);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i164 := $i155;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i161);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i166 := 1;
    assume true;
    goto $bb116, $bb118;

  $bb118:
    assume !($i165 == 1);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i164, 0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i166 := $i167;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i168 := $zext.i1.i32($i166);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i170 := $i164;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i171 := schedule_timeout($i164);
    call {:si_unique_call 696} {:cexpr "__ret___6"} boogie_si_record_i64($i171);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i155 := $i171;
    goto corral_source_split_2549_dummy;

  $bb119:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} finish_wait($p172, $p7);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i173 := $i170;
    goto $bb123;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb117;

  $bb110:
    assume $i162 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i155, 0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb112;

  $bb113:
    assume $i163 == 1;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i164 := 1;
    goto $bb115;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb105;

  $bb98:
    assume $i145 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64(1250, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb100;

  $bb101:
    assume $i146 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i147 := 1;
    goto $bb103;

  $bb66:
    assume $i102 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} __might_sleep(.str.34, 305, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i104 := atomic_read($p103);
    call {:si_unique_call 672} {:cexpr "tmp___7"} boogie_si_record_i32($i104);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i105 := $sgt.i32($i104, $i96);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    call {:si_unique_call 673} {:cexpr "__cond___4"} boogie_si_record_i8($i106);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i109 := 1250;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i106);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i111 := 1;
    assume true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i110 == 1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i109, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i111 := $i112;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i111);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i109;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i64.i32($i138);
    call {:si_unique_call 687} {:cexpr "ret"} boogie_si_record_i32($i139);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb97;

  $bb77:
    assume $i114 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} INIT_LIST_HEAD($p115);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p116, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i117 := 1250;
    goto $bb79;

  $bb79:
    call $i117, $p118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i128, $i130, $i131, $i132, $i134, $i135, $i136 := wait_for_io_cmd_user_loop_$bb79($p0, $p6, $i96, $i117, $p118, $i119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i128, $i130, $i131, $i132, $i134, $i135, $i136);
    goto $bb79_last;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i119 := prepare_to_wait_event($p118, $p6, 1);
    call {:si_unique_call 680} {:cexpr "tmp___5"} boogie_si_record_i64($i119);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i121 := atomic_read($p120);
    call {:si_unique_call 682} {:cexpr "tmp___6"} boogie_si_record_i32($i121);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i122 := $sgt.i32($i121, $i96);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i8($i122);
    call {:si_unique_call 683} {:cexpr "__cond___3"} boogie_si_record_i8($i123);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i8.i1($i123);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i126 := $i117;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i8.i1($i123);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i128 := 1;
    assume true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i127 == 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i126, 0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i128 := $i129;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i32($i128);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i132 := $i126;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i119, 0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i135 := $i119;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i136 := schedule_timeout($i126);
    call {:si_unique_call 686} {:cexpr "__ret___4"} boogie_si_record_i64($i136);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i117 := $i136;
    goto corral_source_split_2492_dummy;

  $bb93:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i133 := $i135;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} finish_wait($p137, $p6);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i138 := $i133;
    goto $bb96;

  $bb89:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb91;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb87;

  $bb80:
    assume $i124 == 1;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i117, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb82;

  $bb83:
    assume $i125 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i126 := 1;
    goto $bb85;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb75;

  $bb68:
    assume $i107 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64(1250, 0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb70;

  $bb71:
    assume $i108 == 1;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i109 := 1;
    goto $bb73;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i8);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __might_sleep(.str.34, 295, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i59 := atomic_read($p58);
    call {:si_unique_call 645} {:cexpr "tmp___4"} boogie_si_record_i32($i59);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, $i15);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    call {:si_unique_call 646} {:cexpr "__cond___2"} boogie_si_record_i8($i61);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i64 := 1250;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i61);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i66 := 1;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i65 == 1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i64, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i66);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i64;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    call {:si_unique_call 666} {:cexpr "ret"} boogie_si_record_i32($i91);
    assume {:verifier.code 0} true;
    $i57 := $i91;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i92 := $sle.i32($i57, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i95 := atomic_read($p94);
    call {:si_unique_call 668} {:cexpr "irq_num"} boogie_si_record_i32($i95);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb65;

  $bb61:
    assume $i92 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i93 := $i57;
    goto $bb63;

  $bb44:
    assume $i69 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} INIT_LIST_HEAD($p70);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p71, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i72 := 1250;
    goto $bb46;

  $bb46:
    call $i72, $p73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i84, $i83, $i85, $i86, $i87, $i88 := wait_for_io_cmd_user_loop_$bb46($p0, $p5, $i15, $i72, $p73, $i74, $p75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i84, $i83, $i85, $i86, $i87, $i88);
    goto $bb46_last;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i74 := prepare_to_wait_event($p73, $p5, 2);
    call {:si_unique_call 659} {:cexpr "tmp___2"} boogie_si_record_i64($i74);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i76 := atomic_read($p75);
    call {:si_unique_call 661} {:cexpr "tmp___3"} boogie_si_record_i32($i76);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i15);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    call {:si_unique_call 662} {:cexpr "__cond___1"} boogie_si_record_i8($i78);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i81 := $i72;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i78);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i83 := 1;
    assume true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i82 == 1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i81, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i83 := $i84;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i83);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i87 := $i81;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i88 := schedule_timeout($i81);
    call {:si_unique_call 665} {:cexpr "__ret___2"} boogie_si_record_i64($i88);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i72 := $i88;
    goto corral_source_split_2399_dummy;

  $bb56:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} finish_wait($p89, $p5);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i90 := $i87;
    goto $bb60;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb54;

  $bb47:
    assume $i79 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i72, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb49;

  $bb50:
    assume $i80 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i81 := 1;
    goto $bb52;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb42;

  $bb35:
    assume $i62 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64(1250, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb37;

  $bb38:
    assume $i63 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i64 := 1;
    goto $bb40;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __might_sleep(.str.34, 292, 0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i21 := atomic_read($p20);
    call {:si_unique_call 641} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, $i15);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 642} {:cexpr "__cond___0"} boogie_si_record_i8($i23);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := 1250;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i23);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i28 := 1;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i26, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i28);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i26;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb34;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} INIT_LIST_HEAD($p32);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i34 := 1250;
    goto $bb16;

  $bb16:
    call $i34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i51, $i52, $i53 := wait_for_io_cmd_user_loop_$bb16($p0, $p4, $i15, $i34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i51, $i52, $i53);
    goto $bb16_last;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i36 := prepare_to_wait_event($p35, $p4, 1);
    call {:si_unique_call 649} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i38 := atomic_read($p37);
    call {:si_unique_call 651} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, $i15);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 652} {:cexpr "__cond"} boogie_si_record_i8($i40);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i43 := $i34;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i40);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i45 := 1;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i44 == 1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i43, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i45);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i49 := $i43;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i36, 0);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i52 := $i36;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i53 := schedule_timeout($i43);
    call {:si_unique_call 655} {:cexpr "__ret___0"} boogie_si_record_i64($i53);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i34 := $i53;
    goto corral_source_split_2341_dummy;

  $bb30:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i50 := $i52;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} finish_wait($p54, $p4);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i55 := $i50;
    goto $bb33;

  $bb26:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb24;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i34, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64(1250, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  corral_source_split_2549_dummy:
    assume false;
    return;

  $bb109_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2492_dummy:
    assume false;
    return;

  $bb79_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  corral_source_split_2399_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  corral_source_split_2341_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 495996);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 699} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 701} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 497028);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 702} $free($p0);
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 498060);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i1 := $M.39;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} ldv_error();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 499092);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 705} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 706} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 500124);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 707} __VERIFIER_error();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const qxl_driver_load: ref;

axiom qxl_driver_load == $sub.ref(0, 501156);

procedure qxl_driver_load($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.40, assertsPassed, $CurrAddr, $M.57, $M.41, $M.46, $M.47, $M.49, $M.51, $M.53, $M.39, $M.58, $M.35, $M.36, $M.55, $M.61, $M.62, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54;



implementation qxl_driver_load($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i18: i32;
  var $i15: i32;
  var $p24: ref;
  var $i4: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} {:cexpr "qxl_driver_load:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i2 := drm_core_check_feature($p0, 8192);
    call {:si_unique_call 710} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p5 := kmalloc(5336, 208);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $p5);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(1144, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i13 := qxl_device_init($p6, $p0, $p12, $i1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 713} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i16 := drm_vblank_init($p0, 1);
    call {:si_unique_call 716} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i19 := qxl_modeset_init($p6);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 719} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} drm_kms_helper_poll_init($p22);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_90 := qxl_driver_unload($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p6);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} kfree($p24);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i4 := $i15;
    goto $bb3;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb14;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb10;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const qxl_driver_unload: ref;

axiom qxl_driver_unload == $sub.ref(0, 502188);

procedure qxl_driver_unload($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.47, $M.49, $M.51, $M.53, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation qxl_driver_unload($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} drm_vblank_cleanup($p0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} qxl_modeset_fini($p3);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} qxl_device_fini($p3);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} kfree($p6);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, $0.ref);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_pci_set_busid: ref;

axiom drm_pci_set_busid == $sub.ref(0, 503220);

procedure drm_pci_set_busid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_pci_set_busid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 725} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_noop_get_vblank_counter: ref;

axiom qxl_noop_get_vblank_counter == $sub.ref(0, 504252);

procedure qxl_noop_get_vblank_counter($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_noop_get_vblank_counter($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "qxl_noop_get_vblank_counter:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_noop_enable_vblank: ref;

axiom qxl_noop_enable_vblank == $sub.ref(0, 505284);

procedure qxl_noop_enable_vblank($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_noop_enable_vblank($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} {:cexpr "qxl_noop_enable_vblank:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_noop_disable_vblank: ref;

axiom qxl_noop_disable_vblank == $sub.ref(0, 506316);

procedure qxl_noop_disable_vblank($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_noop_disable_vblank($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "qxl_noop_disable_vblank:arg:crtc"} boogie_si_record_i32($i1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    return;
}



const qxl_irq_handler: ref;

axiom qxl_irq_handler == $sub.ref(0, 507348);

procedure qxl_irq_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.35, $M.36, $M.40, $M.55, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57;



implementation qxl_irq_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i11: i32;
  var vslice_dummy_var_91: i1;
  var vslice_dummy_var_92: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "qxl_irq_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 5424)), $mul.ref(4, 1));
    call {:si_unique_call 731} $i9 := devirtbounce.13(0, $p8, 0, $p8);
    call {:si_unique_call 732} {:cexpr "__ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3548, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} atomic_inc($p12);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i9, 1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i9, 2);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i9, 4);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i9, 8);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i9, 32);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 5424)), $mul.ref(8, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, 39);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 3);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} outb(0, $i41);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} qxl_io_log.ref.ref($p5, .str.54);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3832, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_92 := schedule_work___0($p34);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i30);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} qxl_io_log.ref.ref.ref($p5, .str.52, .str.53);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} atomic_inc($p24);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} __wake_up($p25, 3, 0, $0.ref);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3556, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} atomic_inc($p20);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3656, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} __wake_up($p21, 3, 0, $0.ref);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3552, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} atomic_inc($p15);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3568, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __wake_up($p16, 3, 0, $0.ref);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_91 := qxl_queue_garbage_collect($p5, 0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i10 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb4;
}



const qxl_debugfs_init: ref;

axiom qxl_debugfs_init == $sub.ref(0, 508380);

procedure qxl_debugfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_debugfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_93 := drm_debugfs_create_files(qxl_debugfs_list, 2, $p2, $p0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_debugfs_takedown: ref;

axiom qxl_debugfs_takedown == $sub.ref(0, 509412);

procedure qxl_debugfs_takedown($p0: ref);
  free requires assertsPassed;



implementation qxl_debugfs_takedown($p0: ref)
{
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_94 := drm_debugfs_remove_files(qxl_debugfs_list, 2, $p0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    return;
}



const qxl_gem_object_free: ref;

axiom qxl_gem_object_free == $sub.ref(0, 510444);

procedure qxl_gem_object_free($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $CurrAddr, $M.6, $M.35, $M.36, $M.39, $M.40, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_gem_object_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} qxl_surface_evict($p8, $p3, 0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(88, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p1, $p9);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} ttm_bo_unref($p1);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const qxl_gem_object_open: ref;

axiom qxl_gem_object_open == $sub.ref(0, 511476);

procedure qxl_gem_object_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_gem_object_open($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_gem_object_close: ref;

axiom qxl_gem_object_close == $sub.ref(0, 512508);

procedure qxl_gem_object_close($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_gem_object_close($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    return;
}



const drm_gem_prime_handle_to_fd: ref;

axiom drm_gem_prime_handle_to_fd == $sub.ref(0, 513540);

procedure drm_gem_prime_handle_to_fd($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_prime_handle_to_fd($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} {:cexpr "drm_gem_prime_handle_to_fd:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 751} {:cexpr "drm_gem_prime_handle_to_fd:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const drm_gem_prime_fd_to_handle: ref;

axiom drm_gem_prime_fd_to_handle == $sub.ref(0, 514572);

procedure drm_gem_prime_fd_to_handle($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_prime_fd_to_handle($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 754} {:cexpr "drm_gem_prime_fd_to_handle:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 755} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 756} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_gem_prime_export: ref;

axiom drm_gem_prime_export == $sub.ref(0, 515604);

procedure drm_gem_prime_export($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation drm_gem_prime_export($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} {:cexpr "drm_gem_prime_export:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p3 := external_alloc();
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const drm_gem_prime_import: ref;

axiom drm_gem_prime_import == $sub.ref(0, 516636);

procedure drm_gem_prime_import($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation drm_gem_prime_import($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p2 := external_alloc();
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const qxl_gem_prime_pin: ref;

axiom qxl_gem_prime_pin == $sub.ref(0, 517668);

procedure qxl_gem_prime_pin($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_gem_prime_pin($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var vslice_dummy_var_95: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 761} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_95 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 762} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 764} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 767} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} warn_slowpath_fmt.ref.i32.ref(.str.72, 32, .str.73);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_unpin: ref;

axiom qxl_gem_prime_unpin == $sub.ref(0, 518700);

procedure qxl_gem_prime_unpin($p0: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_unpin($p0: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var vslice_dummy_var_96: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 770} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_96 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 771} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 773} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 776} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} warn_slowpath_fmt.ref.i32.ref(.str.72, 38, .str.73);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_get_sg_table: ref;

axiom qxl_gem_prime_get_sg_table == $sub.ref(0, 519732);

procedure qxl_gem_prime_get_sg_table($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_get_sg_table($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_97: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 779} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_97 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p23 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 780} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 782} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 785} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} warn_slowpath_fmt.ref.i32.ref(.str.72, 44, .str.73);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_import_sg_table: ref;

axiom qxl_gem_prime_import_sg_table == $sub.ref(0, 520764);

procedure qxl_gem_prime_import_sg_table($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_import_sg_table($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_98: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32(1, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 789} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32(1, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_98 := ldv__builtin_expect($i23, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p25 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $r := $p26;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 790} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 792} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 795} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} warn_slowpath_fmt.ref.i32.ref(.str.72, 52, .str.73);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_vmap: ref;

axiom qxl_gem_prime_vmap == $sub.ref(0, 521796);

procedure qxl_gem_prime_vmap($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_vmap($p0: ref) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var vslice_dummy_var_99: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32(1, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 799} {:cexpr "tmp___1"} boogie_si_record_i64($i4);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32(1, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_99 := ldv__builtin_expect($i21, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p23 := ERR_PTR($sub.i64(0, 38));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 800} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 802} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 805} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} warn_slowpath_fmt.ref.i32.ref(.str.72, 58, .str.73);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_vunmap: ref;

axiom qxl_gem_prime_vunmap == $sub.ref(0, 522828);

procedure qxl_gem_prime_vunmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_gem_prime_vunmap($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32(1, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 809} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32(1, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_100 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 810} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 812} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} warn_slowpath_fmt.ref.i32.ref(.str.72, 64, .str.73);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_gem_prime_mmap: ref;

axiom qxl_gem_prime_mmap == $sub.ref(0, 523860);

procedure qxl_gem_prime_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_gem_prime_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var vslice_dummy_var_101: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32(1, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 818} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32(1, 0);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_101 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $r := 38;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i8 := $xor.i1($i7, 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 819} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 824} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} warn_slowpath_fmt.ref.i32.ref(.str.72, 70, .str.73);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_mode_dumb_create: ref;

axiom qxl_mode_dumb_create == $sub.ref(0, 524892);

procedure qxl_mode_dumb_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.33, $M.32, $CurrAddr, $M.46, $M.39, $M.58, $M.40, $M.35, $M.36, assertsPassed, $M.55, $M.41, $M.61, $M.62, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_mode_dumb_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 8);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i10, $i14);
    call {:si_unique_call 829} {:cexpr "pitch"} boogie_si_record_i32($i15);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, $i15);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p20, $i19);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.6, $p21);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 4095);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, $sub.i64(0, 4096));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p25, $i24);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i27, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i31 := 32;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i34);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $i37);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $i15);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, $i31);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.6, $p41);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i43 := qxl_gem_object_create_with_handle($p8, $p0, 1, $i42, $p5, $p3, $p4);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 831} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p45, $i15);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.2, $p4);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p47, $i46);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb11;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i32 := $i43;
    goto $bb11;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb6;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i31 := 80;
    goto $bb9;
}



const qxl_mode_dumb_mmap: ref;

axiom qxl_mode_dumb_mmap == $sub.ref(0, 525924);

procedure qxl_mode_dumb_mmap($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_mode_dumb_mmap($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "qxl_mode_dumb_mmap:arg:handle"} boogie_si_record_i32($i2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p10 := drm_gem_object_lookup($p1, $p0, $i2);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p10);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i16 := qxl_bo_mmap_offset($p15);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p3, $i16);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} drm_gem_object_unreference_unlocked($p10);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 2);
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 835} devirtbounce(0, .str.60, 78, 12);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call qxl_mode_dumb_mmap_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const drm_gem_dumb_destroy: ref;

axiom drm_gem_dumb_destroy == $sub.ref(0, 526956);

procedure drm_gem_dumb_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_gem_dumb_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} {:cexpr "drm_gem_dumb_destroy:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 840} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_gem_object_lookup: ref;

axiom drm_gem_object_lookup == $sub.ref(0, 527988);

procedure drm_gem_object_lookup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation drm_gem_object_lookup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} {:cexpr "drm_gem_object_lookup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p3 := external_alloc();
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const qxl_bo_mmap_offset: ref;

axiom qxl_bo_mmap_offset == $sub.ref(0, 529020);

procedure qxl_bo_mmap_offset($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation qxl_bo_mmap_offset($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(248, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i3 := drm_vma_node_offset_addr($p2);
    call {:si_unique_call 845} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_vma_node_offset_addr: ref;

axiom drm_vma_node_offset_addr == $sub.ref(0, 530052);

procedure drm_vma_node_offset_addr($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation drm_vma_node_offset_addr($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(72, 1)), $mul.ref(48, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 531084);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 532116);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ttm_bo_unref: ref;

axiom ttm_bo_unref == $sub.ref(0, 533148);

procedure ttm_bo_unref($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    return;
}



const drm_debugfs_remove_files: ref;

axiom drm_debugfs_remove_files == $sub.ref(0, 534180);

procedure drm_debugfs_remove_files($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_debugfs_remove_files($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} {:cexpr "drm_debugfs_remove_files:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_debugfs_create_files: ref;

axiom drm_debugfs_create_files == $sub.ref(0, 535212);

procedure drm_debugfs_create_files($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_debugfs_create_files($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} {:cexpr "drm_debugfs_create_files:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 536244);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 855} devirtbounce.6(0, $p1, $p1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 537276);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 857} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    return;
}



const qxl_queue_garbage_collect: ref;

axiom qxl_queue_garbage_collect == $sub.ref(0, 538308);

procedure qxl_queue_garbage_collect($p0: ref, $i1: i1) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.39, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_queue_garbage_collect($p0: ref, $i1: i1) returns ($r: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i1;
  var $p12: ref;
  var $i14: i1;
  var vslice_dummy_var_102: i1;
  var vslice_dummy_var_103: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 858} {:cexpr "qxl_queue_garbage_collect:arg:flush"} boogie_si_record_i1($i1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i5 := qxl_check_idle($p4);
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_102 := queue_work___0($p8, $p9);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_103 := ldv_flush_work_265($p12);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const schedule_work___0: ref;

axiom schedule_work___0 == $sub.ref(0, 539340);

procedure schedule_work___0($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation schedule_work___0($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.6, system_wq);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i2 := queue_work___1($p1, $p0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 864} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work___1: ref;

axiom queue_work___1 == $sub.ref(0, 540372);

procedure queue_work___1($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation queue_work___1($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i2 := ldv_queue_work_on_385(8192, $p0, $p1);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 866} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_385: ref;

axiom ldv_queue_work_on_385 == $sub.ref(0, 541404);

procedure ldv_queue_work_on_385($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_queue_work_on_385($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} {:cexpr "ldv_queue_work_on_385:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 869} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 870} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} activate_work_2($p2, 2);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 542436);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 873} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 874} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_2: ref;

axiom activate_work_2 == $sub.ref(0, 543468);

procedure activate_work_2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation activate_work_2($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} {:cexpr "activate_work_2:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i2 := $M.47;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.49;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.51;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.53;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.53 := $i1;
    call {:si_unique_call 879} {:cexpr "ldv_work_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $M.51 := $i1;
    call {:si_unique_call 878} {:cexpr "ldv_work_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.49 := $i1;
    call {:si_unique_call 877} {:cexpr "ldv_work_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.48 := $p0;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.47 := $i1;
    call {:si_unique_call 876} {:cexpr "ldv_work_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_check_idle: ref;

axiom qxl_check_idle == $sub.ref(0, 544500);

procedure qxl_check_idle($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation qxl_check_idle($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_spin_lock();
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, $i7);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 881} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_work___0: ref;

axiom queue_work___0 == $sub.ref(0, 545532);

procedure queue_work___0($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation queue_work___0($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i2 := ldv_queue_work_on_251(8192, $p0, $p1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 884} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_flush_work_265: ref;

axiom ldv_flush_work_265 == $sub.ref(0, 546564);

procedure ldv_flush_work_265($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53, $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation ldv_flush_work_265($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i1 := flush_work($p0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 886} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 887} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} call_and_disable_work_2($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const flush_work: ref;

axiom flush_work == $sub.ref(0, 547596);

procedure flush_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const call_and_disable_work_2: ref;

axiom call_and_disable_work_2 == $sub.ref(0, 548628);

procedure call_and_disable_work_2($p0: ref);
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53, $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation call_and_disable_work_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i1 := $M.47;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i3 := $M.47;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.49;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i11 := $M.49;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.51;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i19 := $M.51;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.53;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i27 := $M.53;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p30 := $M.54;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} qxl_fb_work($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p22 := $M.52;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} qxl_fb_work($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p14 := $M.50;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} qxl_fb_work($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 894} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p6 := $M.48;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} qxl_fb_work($p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const qxl_fb_work: ref;

axiom qxl_fb_work == $sub.ref(0, 549660);

procedure qxl_fb_work($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_fb_work($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 5248), 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 552)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} qxl_fb_dirty_flush($p8);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const qxl_fb_dirty_flush: ref;

axiom qxl_fb_dirty_flush == $sub.ref(0, 550692);

procedure qxl_fb_dirty_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_fb_dirty_flush($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p1 := $alloc($mul.ref(160, $zext.i32.i64(1)));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 901} {:cexpr "stride"} boogie_si_record_i32($i12);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_spin_lock();
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(72, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    call {:si_unique_call 903} {:cexpr "x1"} boogie_si_record_i32($i15);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(80, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    call {:si_unique_call 904} {:cexpr "x2"} boogie_si_record_i32($i18);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(76, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    call {:si_unique_call 905} {:cexpr "y1"} boogie_si_record_i32($i21);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(84, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    call {:si_unique_call 906} {:cexpr "y2"} boogie_si_record_i32($i24);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(72, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(80, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(76, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(84, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} qxl_io_log.ref.ref.i32.i32.i32.i32($p6, .str.157, $i15, $i18, $i21, $i24);
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i15);
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(4, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $i21);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i18, $i15);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $i38);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i24, $i21);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(12, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p42, $i41);
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, $sub.i32(0, 1));
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(20, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, 0);
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(24, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p45, 32);
    $p47 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p47, 0);
    $p49 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(4, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p49, 0);
    $p51 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p51, $0.ref);
    $p53 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, $0.ref);
    $p55 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p55, $0.ref);
    $p57 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p57, $0.ref);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i15, 4);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i12, $i21);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i61, $i63);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p59, $mul.ref($i64, 1));
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p66, $p65);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} qxl_fb_image_init($p1, $p6, $p0, $0.ref);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} qxl_draw_opaque_fb($p1, $i12);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const qxl_fb_image_init: ref;

axiom qxl_fb_image_init == $sub.ref(0, 551724);

procedure qxl_fb_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_fb_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p1);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, 4);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p3);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.6;
    cmdloc_dummy_var_16 := $M.6;
    call {:si_unique_call 912} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p30, $p31, 80, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_17;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 1);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i9);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 4);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.6;
    cmdloc_dummy_var_13 := $M.6;
    call {:si_unique_call 911} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p18, $p20, 64, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_14;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;
}



const qxl_draw_opaque_fb: ref;

axiom qxl_draw_opaque_fb == $sub.ref(0, 552756);

procedure qxl_draw_opaque_fb($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $M.35, $M.36, $M.39, $M.55, $CurrAddr, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_draw_opaque_fb($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $i40: i32;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $i36: i32;
  var $p133: ref;
  var $i31: i32;
  var $i134: i1;
  var $p135: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 917} {:cexpr "qxl_draw_opaque_fb:arg:stride"} boogie_si_record_i32($i1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    call {:si_unique_call 918} {:cexpr "x"} boogie_si_record_i32($i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(4, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 919} {:cexpr "y"} boogie_si_record_i32($i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    call {:si_unique_call 920} {:cexpr "width"} boogie_si_record_i32($i14);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(12, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    call {:si_unique_call 921} {:cexpr "height"} boogie_si_record_i32($i16);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(24, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 922} {:cexpr "depth"} boogie_si_record_i32($i21);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, $0.ref);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i26 := alloc_drawable($p7, $p3);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 925} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p3);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i29 := qxl_image_alloc_objects($p7, $p28, $p4, $i16, $i25);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 927} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i21, 1);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p3);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i38 := qxl_release_reserve_list($p37, 1);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 932} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, $i10);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i10, $i14);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, $i42);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, $i12);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i12, $i16);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i45);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p3);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i48 := make_drawable($p7, 0, 3, $p2, $p47);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 934} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p3);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p4);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i53 := qxl_image_init($p7, $p51, $p52, $p18, 0, 0, $i14, $i16, $i21, $i25);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 937} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i21, 1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i53;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p3);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p76 := qxl_release_map($p7, $p75);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, 0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p85, $i16);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p87, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p91, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p93, $i14);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p96, 8);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 56)), $mul.ref(26, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p99, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p101, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 0);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p105, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p108, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p110, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p115, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p117, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p4);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p119);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i121 := qxl_bo_physical_address($p7, $p120, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p124, $i121);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.6, $p3);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p77, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} qxl_release_unmap($p7, $p125, $p126);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.6, $p3);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_104 := qxl_push_command_ring_release($p7, $p127, 1, 0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.6, $p3);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} qxl_release_fence_buffer_objects($p129);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i40 := $i74;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.6, $p5);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.6, $p4);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} qxl_image_free_objects($p7, $p133);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i31, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i134 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.6, $p3);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} free_drawable($p7, $p135);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i132 == 1;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} qxl_bo_unref($p5);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p5);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p3);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i60 := qxl_palette_create_1bit($p58, $p59, $p0);
    call {:si_unique_call 941} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p4);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p64 := qxl_bo_kmap_atomic_page($p7, $p63, 0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p5);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i67 := qxl_bo_physical_address($p7, $p66, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p70, $i67);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p4);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} qxl_bo_kunmap_atomic_page($p7, $p73, $p64);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i74 := $i60;
    goto $bb31;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p3);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} qxl_release_backoff_reserve_list($p55);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p3);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} qxl_release_free($p7, $p56);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p3);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} qxl_release_backoff_reserve_list($p50);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i40 := $i48;
    goto $bb21;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb21;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p3);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i34 := alloc_palette_object($p7, $p33, $p5);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 929} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb16;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb10;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i21, $i14);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i24 := $sdiv.i32($i23, 8);
    call {:si_unique_call 923} {:cexpr "stride"} boogie_si_record_i32($i24);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;
}



const alloc_drawable: ref;

axiom alloc_drawable == $sub.ref(0, 553788);

procedure alloc_drawable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.40, $CurrAddr, $M.46, assertsPassed, $M.58, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.61, $M.62, $M.32, $M.63, $M.64, $M.57;



implementation alloc_drawable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i2 := qxl_alloc_release_reserved($p0, 191, 0, $p1, $0.ref);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 953} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const qxl_image_alloc_objects: ref;

axiom qxl_image_alloc_objects == $sub.ref(0, 554820);

procedure qxl_image_alloc_objects($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, assertsPassed, $CurrAddr, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_image_alloc_objects($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} {:cexpr "qxl_image_alloc_objects:arg:height"} boogie_si_record_i32($i3);
    call {:si_unique_call 955} {:cexpr "qxl_image_alloc_objects:arg:stride"} boogie_si_record_i32($i4);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p5 := kmalloc(24, 208);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD($p10);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i12 := qxl_alloc_bo_reserved($p0, $p1, 48, $p11);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 959} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i4, $i3);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 20);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i17 := qxl_allocate_chunk($p0, $p1, $p6, $i16);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 962} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p5);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} qxl_bo_unref($p19);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} kfree($p20);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p6);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} kfree($p14);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const alloc_palette_object: ref;

axiom alloc_palette_object == $sub.ref(0, 555852);

procedure alloc_palette_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.46, assertsPassed, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation alloc_palette_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i3 := qxl_alloc_bo_reserved($p0, $p1, 18, $p2);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 966} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const qxl_release_reserve_list: ref;

axiom qxl_release_reserve_list == $sub.ref(0, 556884);

procedure qxl_release_reserve_list($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $M.39, $M.40, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_release_reserve_list($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p25: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 967} {:cexpr "qxl_release_reserve_list:arg:no_intr"} boogie_si_record_i1($i1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i4 := list_is_singular($p3);
    call {:si_unique_call 969} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i2);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i13 := ttm_eu_reserve_buffers($p7, $p8, $i12, $0.ref);
    call {:si_unique_call 971} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p25 := $p17;
    goto $bb11;

  $bb11:
    call $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p38, $p39, $p40, $p42, $i43, $i44, $p25 := qxl_release_reserve_list_loop_$bb11($i23, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p38, $p39, $p40, $p42, $i43, $i44, $p25);
    goto $bb11_last;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i31 := qxl_release_validate_bo($p30);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 973} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i23);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p39;
    goto $bb16_dummy;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ttm_eu_backoff_reservation($p34, $p35);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i6 := $i33;
    goto $bb3;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;
}



const make_drawable: ref;

axiom make_drawable == $sub.ref(0, 557916);

procedure make_drawable($p0: ref, $i1: i32, $i2: i8, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $CurrAddr, $M.39, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation make_drawable($p0: ref, $i1: i32, $i2: i8, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i9: i32;
  var $p38: ref;
  var $p40: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} {:cexpr "make_drawable:arg:surface"} boogie_si_record_i32($i1);
    call {:si_unique_call 976} {:cexpr "make_drawable:arg:type"} boogie_si_record_i8($i2);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p5 := qxl_release_map($p0, $p4);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(13, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p10, $i2);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, $i1);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(12, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(14, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $sub.i32(0, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(68, 1)), $mul.ref(1, 4));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $sub.i32(0, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(68, 1)), $mul.ref(2, 4));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p3);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1160)), $mul.ref(48, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i34);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} qxl_release_unmap($p0, $p4, $p36);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.6;
    cmdloc_dummy_var_19 := $M.6;
    call {:si_unique_call 978} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p29, $p30, 16, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_20;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const qxl_release_backoff_reserve_list: ref;

axiom qxl_release_backoff_reserve_list == $sub.ref(0, 558948);

procedure qxl_release_backoff_reserve_list($p0: ref);
  free requires assertsPassed;



implementation qxl_release_backoff_reserve_list($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i2 := list_is_singular($p1);
    call {:si_unique_call 981} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(104, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(200, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ttm_eu_backoff_reservation($p4, $p5);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_image_init: ref;

axiom qxl_image_init == $sub.ref(0, 559980);

procedure qxl_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $i9: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.6, $CurrAddr, $M.39, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_image_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $i9: i32) returns ($r: i32)
{
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} {:cexpr "qxl_image_init:arg:x"} boogie_si_record_i32($i4);
    call {:si_unique_call 984} {:cexpr "qxl_image_init:arg:y"} boogie_si_record_i32($i5);
    call {:si_unique_call 985} {:cexpr "qxl_image_init:arg:width"} boogie_si_record_i32($i6);
    call {:si_unique_call 986} {:cexpr "qxl_image_init:arg:height"} boogie_si_record_i32($i7);
    call {:si_unique_call 987} {:cexpr "qxl_image_init:arg:depth"} boogie_si_record_i32($i8);
    call {:si_unique_call 988} {:cexpr "qxl_image_init:arg:stride"} boogie_si_record_i32($i9);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i5, $i9);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i11 := $sdiv.i32($i8, 8);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, $i4);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i12);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p3, $mul.ref($i14, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i16 := qxl_image_init_helper($p0, $p1, $p2, $p15, $i6, $i7, $i8, 0, $i9);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 990} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const qxl_palette_create_1bit: ref;

axiom qxl_palette_create_1bit == $sub.ref(0, 561012);

procedure qxl_palette_create_1bit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.6, $M.55, $M.41, $CurrAddr;



implementation qxl_palette_create_1bit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i27: i32;
  var $i28: i32;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    call {:si_unique_call 992} {:cexpr "visual"} boogie_si_record_i32($i6);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i10 := qxl_bo_kmap($p0, $p9);
    call {:si_unique_call 994} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.40, $p3);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.55 := $store.i16($M.55, $p12, 2);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.40, $p3);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.55 := $store.i64($M.55, $p14, $u0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 2);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 4);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    call {:si_unique_call 997} {:cexpr "fgcolor"} boogie_si_record_i32($i30);
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(20, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    call {:si_unique_call 998} {:cexpr "bgcolor"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    $i27, $i28 := $i30, $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.40, $p3);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(12, 1)), $mul.ref(0, 4));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p35, $i28);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.40, $p3);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(12, 1)), $mul.ref(1, 4));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p38, $i27);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} qxl_bo_kunmap($p0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p8, $mul.ref($i19, 4));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    call {:si_unique_call 995} {:cexpr "fgcolor"} boogie_si_record_i32($i21);
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(20, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p8, $mul.ref($i24, 4));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    call {:si_unique_call 996} {:cexpr "bgcolor"} boogie_si_record_i32($i26);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i21, $i26;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;
}



const qxl_image_free_objects: ref;

axiom qxl_image_free_objects == $sub.ref(0, 562044);

procedure qxl_image_free_objects($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_image_free_objects($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p15: ref;
  var $p16: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} qxl_bo_unref($p26);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} kfree($p27);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p15, $p16 := qxl_image_free_objects_loop_$bb4($i13, $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p15, $p16);
    goto $bb4_last;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} qxl_bo_unref($p17);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} kfree($p18);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i13);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p21, $p15;
    goto $bb6_dummy;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;
}



const free_drawable: ref;

axiom free_drawable == $sub.ref(0, 563076);

procedure free_drawable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $CurrAddr, $M.46, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation free_drawable($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} qxl_release_free($p0, $p1);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const qxl_image_init_helper: ref;

axiom qxl_image_init_helper == $sub.ref(0, 564108);

procedure qxl_image_init_helper($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.6, $CurrAddr, $M.39, $M.41, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_image_init_helper($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i46: i1;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i71: i32;
  var $i72: i1;
  var $i47: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i101: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} {:cexpr "qxl_image_init_helper:arg:width"} boogie_si_record_i32($i4);
    call {:si_unique_call 1006} {:cexpr "qxl_image_init_helper:arg:height"} boogie_si_record_i32($i5);
    call {:si_unique_call 1007} {:cexpr "qxl_image_init_helper:arg:depth"} boogie_si_record_i32($i6);
    call {:si_unique_call 1008} {:cexpr "qxl_image_init_helper:arg:hash"} boogie_si_record_i32($i7);
    call {:si_unique_call 1009} {:cexpr "qxl_image_init_helper:arg:stride"} boogie_si_record_i32($i8);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i4, $i6);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i32($i9, 8);
    call {:si_unique_call 1010} {:cexpr "linesize"} boogie_si_record_i32($i10);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    call {:si_unique_call 1011} {:cexpr "qxl_image_init_helper:arg:chunk_stride"} boogie_si_record_i32($i8);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p17 := qxl_bo_kmap_atomic_page($p0, $p16, 0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i5, $i8);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i19);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p21, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p22, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} qxl_bo_kunmap_atomic_page($p0, $p16, $p17);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i8, $i10);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32(0, $i5);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} qxl_bo_kunmap($p16);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p75 := qxl_bo_kmap_atomic_page($p0, $p74, 0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p78, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p80, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p84, $i4);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p86, $i5);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} drm_err.ref(.str.168);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32(0, 22);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $r := $i101;
    return;

  $bb45:
    assume $i89 == 1;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p100, 8);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p104, 4);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p107, $i4);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p110, $i5);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, $i8);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p116, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i117 := qxl_bo_physical_address($p0, $p16, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p120, $i117);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} qxl_bo_kunmap_atomic_page($p0, $p74, $p75);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb54;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb47;

  $bb48:
    assume $i90 == 1;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p97, 7);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb47;

  $bb50:
    assume $i91 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p76, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p94, 2);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb24;

  $bb24:
    call $i48, $i49, $p50, $i51, $i52, $i53, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, $i71, $i72, $i47, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26 := qxl_image_init_helper_loop_$bb24($p0, $p3, $i5, $i8, $i10, $p16, $i48, $i49, $p50, $i51, $i52, $i53, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, $i71, $i72, $i47, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26);
    goto $bb24_last;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i47, $i8);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p3, $mul.ref($i49, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i47, $i8);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 20);
    call {:si_unique_call 1022} {:cexpr "out_offset"} boogie_si_record_i32($i52);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i10, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i47, 1);
    call {:si_unique_call 1031} {:cexpr "i"} boogie_si_record_i32($i71);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, $i5);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i72 == 1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb37:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i71;
    goto $bb37_dummy;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i54, $i55, $p56 := $i52, $i10, $p50;
    goto $bb29;

  $bb29:
    call $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26 := qxl_image_init_helper_loop_$bb29($p0, $p16, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i54, $i55, $p56, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26);
    goto $bb29_last;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i54, $sub.i32(0, 4096));
    call {:si_unique_call 1023} {:cexpr "page_base"} boogie_si_record_i32($i57);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i54, 4095);
    call {:si_unique_call 1024} {:cexpr "page_offset___0"} boogie_si_record_i32($i58);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(4096, $i58);
    call {:si_unique_call 1025} {:cexpr "_min1___0"} boogie_si_record_i32($i59);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, $i55);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i61 := $i55;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p62 := qxl_bo_kmap_atomic_page($p0, $p16, $i57);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i58);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i61);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.6;
    cmdloc_dummy_var_25 := $M.6;
    call {:si_unique_call 1027} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p64, $p56, $i65, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_26;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} qxl_bo_kunmap_atomic_page($p0, $p16, $p62);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i55, $i61);
    call {:si_unique_call 1029} {:cexpr "remain"} boogie_si_record_i32($i66);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i61);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p56, $mul.ref($i67, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i54, $i61);
    call {:si_unique_call 1030} {:cexpr "out_offset"} boogie_si_record_i32($i69);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i66, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb34:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i54, $i55, $p56 := $i69, $i66, $p68;
    goto $bb34_dummy;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb33;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i8, $i8);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i10, $i5);
    call {:si_unique_call 1014} {:cexpr "remain"} boogie_si_record_i32($i25);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := 0, $i25, $p3;
    goto $bb9;

  $bb9:
    call $i30, $p31, $i32, $p33, $p34, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i27, $i28, $p29, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23 := qxl_image_init_helper_loop_$bb9($p0, $p16, $i30, $p31, $i32, $p33, $p34, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i27, $i28, $p29, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23);
    goto $bb9_last;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i27, 12);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $p31 := qxl_bo_kmap_atomic_page($p0, $p16, $i30);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $p36, $i37 := $p31, 4096;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, $i28);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i39 := $i28;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.6;
    cmdloc_dummy_var_22 := $M.6;
    call {:si_unique_call 1016} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p36, $p29, $i40, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_23;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} qxl_bo_kunmap_atomic_page($p0, $p16, $p31);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i39);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p29, $mul.ref($i41, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i28, $i39);
    call {:si_unique_call 1018} {:cexpr "remain"} boogie_si_record_i32($i43);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i27, 1);
    call {:si_unique_call 1019} {:cexpr "page"} boogie_si_record_i32($i44);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i43, 0);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := $i44, $i43, $p42;
    goto $bb17_dummy;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb16;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p34, 4076;
    goto $bb13;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  $bb37_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3895;

  $bb17_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3848;
}



const ttm_eu_backoff_reservation: ref;

axiom ttm_eu_backoff_reservation == $sub.ref(0, 565140);

procedure ttm_eu_backoff_reservation($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ttm_eu_backoff_reservation($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    return;
}



const ttm_eu_reserve_buffers: ref;

axiom ttm_eu_reserve_buffers == $sub.ref(0, 566172);

procedure ttm_eu_reserve_buffers($p0: ref, $p1: ref, $i2: i1, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_eu_reserve_buffers($p0: ref, $p1: ref, $i2: i1, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1035} {:cexpr "ttm_eu_reserve_buffers:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qxl_release_validate_bo: ref;

axiom qxl_release_validate_bo == $sub.ref(0, 567204);

procedure qxl_release_validate_bo($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $M.39, $M.40, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_release_validate_bo($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(448, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i14 := reservation_object_reserve_shared($p13);
    call {:si_unique_call 1042} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i22 := qxl_bo_check_id($p21, $p0);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 1044} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb5;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} qxl_ttm_placement_from_domain($p0, $i5, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i8 := ttm_bo_validate($p6, $p7, 1, 0);
    call {:si_unique_call 1040} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb5;
}



const ttm_bo_validate: ref;

axiom ttm_bo_validate == $sub.ref(0, 568236);

procedure ttm_bo_validate($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_validate($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1045} {:cexpr "ttm_bo_validate:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1046} {:cexpr "ttm_bo_validate:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1047} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1048} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const reservation_object_reserve_shared: ref;

axiom reservation_object_reserve_shared == $sub.ref(0, 569268);

procedure reservation_object_reserve_shared($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reservation_object_reserve_shared($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1049} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1050} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_bo_check_id: ref;

axiom qxl_bo_check_id == $sub.ref(0, 570300);

procedure qxl_bo_check_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $M.39, $M.40, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_bo_check_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i8 := qxl_surface_id_alloc($p0, $p1);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1052} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i11 := qxl_hw_surface_alloc($p0, $p1, $0.ref);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 1054} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb8;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb8;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const qxl_surface_id_alloc: ref;

axiom qxl_surface_id_alloc == $sub.ref(0, 571332);

procedure qxl_surface_id_alloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $CurrAddr, $M.35, $M.36, $M.40, $M.46, $M.41, $M.61, $M.62, $M.55, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57;



implementation qxl_surface_id_alloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i15: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i9: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $i2, $p3, $p4, $i5, $p6, $i7, $i8, $p10, $p11, $p12, $i13, $i14, $i16, $p17, $p18, $p19, $i15, vslice_dummy_var_105 := qxl_surface_id_alloc_loop_$bb1($p0, $i2, $p3, $p4, $i5, $p6, $i7, $i8, $p10, $p11, $p12, $i13, $i14, $i16, $p17, $p18, $p19, $i15, vslice_dummy_var_105);
    goto $bb1_last;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} idr_preload(32);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} spin_lock($p3);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i5 := idr_alloc($p4, $0.ref, 1, 0, 0);
    call {:si_unique_call 1058} {:cexpr "idr_ret"} boogie_si_record_i32($i5);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} spin_unlock($p6);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} idr_preload_end();
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, $i5);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i15 := $i5;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i15);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} spin_lock($p22);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4776, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i15);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} spin_unlock($p24);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, 1);
    call {:si_unique_call 1061} {:cexpr "count"} boogie_si_record_i32($i16);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} spin_lock($p17);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} idr_remove($p18, $i5);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} spin_unlock($p19);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_105 := qxl_reap_surface_id($p0, 2);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i2 := $i16;
    goto corral_source_split_4086_dummy;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb4;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  corral_source_split_4086_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;
}



const qxl_hw_surface_alloc: ref;

axiom qxl_hw_surface_alloc == $sub.ref(0, 572364);

procedure qxl_hw_surface_alloc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $M.40, $M.39, $CurrAddr, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_hw_surface_alloc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i50: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;
  var $i7: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p4);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i8 := qxl_alloc_surface_release_reserved($p0, 0, $0.ref, $p3);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 1070} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p3);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i11 := qxl_release_reserve_list($p10, 1);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1072} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p3);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p14 := qxl_release_map($p0, $p13);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i20);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p29, $i26);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i32);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, $i38);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p2);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i85 := qxl_bo_physical_address($p0, $p1, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p88, $i85);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i90);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.6, $p3);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} qxl_release_unmap($p0, $p92, $p93);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.6, $p3);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p95, $p94);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.6, $p3);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_106 := qxl_push_command_ring_release($p0, $p96, 5, 0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.6, $p3);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} qxl_release_fence_buffer_objects($p98);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1265, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p99, 1);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} spin_lock($p100);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.6, $p103);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_107 := idr_replace($p101, $p102, $i104);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} spin_unlock($p106);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(1008, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.6, $p51);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i50 := $i53;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p54);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i50);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 32)), $mul.ref(24, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.6, $p58);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p62, $i59);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.6, $p65);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.6, $p67);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i69 := $shl.i64($i68, 12);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.6, $p70);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p74);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p75, $mul.ref(0, 2592)), $mul.ref(32, 1)), $mul.ref($i72, 256)), $mul.ref(16, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.6, $p78);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i69, $i79);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i81 := $or.i64($i66, $i80);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p84, $i81);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb15;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const qxl_reap_surface_id: ref;

axiom qxl_reap_surface_id == $sub.ref(0, 573396);

procedure qxl_reap_surface_id($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $CurrAddr, $M.35, $M.36, $M.40, $M.46, $M.41, $M.61, $M.62, $M.55, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57;



implementation qxl_reap_surface_id($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i30: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i17: i32;
  var $i18: i32;
  var $i46: i32;
  var $i16: i32;
  var $i39: i32;
  var $i47: i1;
  var $i49: i1;
  var $i48: i32;
  var $p50: ref;
  var $i51: i1;
  var vslice_dummy_var_108: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} {:cexpr "qxl_reap_surface_id:arg:max_to_reap"} boogie_si_record_i32($i1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} mutex_lock_nested($p2, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, 0;
    goto $bb1;

  $bb1:
    call $i3, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46, $i16, $i39, $i47, $i49, $i48 := qxl_reap_surface_id_loop_$bb1($p0, $i1, $i3, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46, $i16, $i39, $i47, $i49, $i48);
    goto $bb1_last;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} spin_lock($p5);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4776, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    call {:si_unique_call 1084} {:cexpr "start"} boogie_si_record_i32($i8);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} spin_unlock($p9);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $i8);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i8, $i14);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i39 := $i16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i39, 0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} mutex_unlock($p50);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i48, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} usleep_range(500, 1000);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_108 := qxl_queue_garbage_collect($p0, 1);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i4);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i3, $i4 := $i39, 1;
    goto $bb25_dummy;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb23;

  $bb2:
    assume $i15 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i3, $i8;
    goto $bb5;

  $bb5:
    call $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46 := qxl_reap_surface_id_loop_$bb5($p0, $i1, $i4, $i8, $p10, $p19, $p20, $p21, $i22, $i23, $p24, $p25, $p26, $p27, $i28, $i29, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i30, $i40, $p41, $p42, $i43, $i44, $i45, $i17, $i18, $i46);
    goto $bb5_last;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i23 := $urem.i32($i18, $i22);
    call {:si_unique_call 1086} {:cexpr "surfid"} boogie_si_record_i32($i23);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} spin_lock($p24);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p26 := idr_find($p25, $i23);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} spin_unlock($p27);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p26);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p26);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i4);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i33 := qxl_reap_surf($p0, $p31, $i32);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 1092} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i17;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i36, $i1);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i18, 1);
    call {:si_unique_call 1090} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p10);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i8);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32($i40, $i44);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i46 := $i30;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i16 := $i46;
    goto $bb4;

  $bb18:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i30, $i40;
    goto $bb18_dummy;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb16;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i17, 1);
    call {:si_unique_call 1093} {:cexpr "num_reaped"} boogie_si_record_i32($i35);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb13;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i30 := $i17;
    goto $bb9;

  $bb18_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  $bb25_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 574428);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1099} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __read_once_size($p5, $p7, 8);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1102} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __read_once_size($p21, $p23, 8);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1105} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const qxl_reap_surf: ref;

axiom qxl_reap_surf == $sub.ref(0, 575460);

procedure qxl_reap_surf($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $M.39, $CurrAddr, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_reap_surf($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1107} {:cexpr "qxl_reap_surf:arg:stall"} boogie_si_record_i1($i2);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i4 := qxl_bo_reserve($p1, 0);
    call {:si_unique_call 1109} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i3);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i3);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i14 := ttm_bo_wait($p9, 1, 1, $i13);
    call {:si_unique_call 1112} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i3);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i14, 0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} qxl_surface_evict_locked($p0, $p1, 1);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} qxl_bo_unreserve___1($p1);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} qxl_bo_unreserve___1($p1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} mutex_lock_nested($p16, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} mutex_unlock($p8);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 576492);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1118} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_reserve: ref;

axiom qxl_bo_reserve == $sub.ref(0, 577524);

procedure qxl_bo_reserve($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_bo_reserve($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1119} {:cexpr "qxl_bo_reserve:arg:no_wait"} boogie_si_record_i1($i1);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i2);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i5 := ttm_bo_reserve($p3, 1, $i4, 0, $0.ref);
    call {:si_unique_call 1121} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1123} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, $sub.i32(0, 512));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $i5;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} dev_err.ref.ref.ref($p19, .str.112, $p0);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ttm_bo_wait: ref;

axiom ttm_bo_wait == $sub.ref(0, 578556);

procedure ttm_bo_wait($p0: ref, $i1: i1, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_wait($p0: ref, $i1: i1, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} {:cexpr "ttm_bo_wait:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 1126} {:cexpr "ttm_bo_wait:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 1127} {:cexpr "ttm_bo_wait:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1128} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qxl_bo_unreserve___1: ref;

axiom qxl_bo_unreserve___1 == $sub.ref(0, 579588);

procedure qxl_bo_unreserve___1($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation qxl_bo_unreserve___1($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} ttm_bo_unreserve___1($p1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_unreserve___1: ref;

axiom ttm_bo_unreserve___1 == $sub.ref(0, 580620);

procedure ttm_bo_unreserve___1($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ttm_bo_unreserve___1($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2097152);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} __ttm_bo_unreserve($p0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} spin_lock($p8);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} ttm_bo_add_to_lru($p0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} spin_unlock($p11);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ttm_bo_reserve: ref;

axiom ttm_bo_reserve == $sub.ref(0, 581652);

procedure ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var vslice_dummy_var_109: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1135} {:cexpr "ttm_bo_reserve:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1136} {:cexpr "ttm_bo_reserve:arg:no_wait"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i3);
    call {:si_unique_call 1137} {:cexpr "ttm_bo_reserve:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i10 := atomic_read($p9);
    call {:si_unique_call 1139} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1140} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1142} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_109 := ldv__builtin_expect($i20, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i5);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i6);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i7);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i25 := __ttm_bo_reserve($p0, $i22, $i23, $i24, $p4);
    call {:si_unique_call 1146} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i29 := ldv__builtin_expect($i28, 1);
    call {:si_unique_call 1148} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} ttm_bo_del_sub_from_lru($p0);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} warn_slowpath_null(.str.113, 855);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __ttm_bo_reserve: ref;

axiom __ttm_bo_reserve == $sub.ref(0, 582684);

procedure __ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ttm_bo_reserve($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i35: i32;
  var $i40: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1150} {:cexpr "__ttm_bo_reserve:arg:interruptible"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1151} {:cexpr "__ttm_bo_reserve:arg:no_wait"} boogie_si_record_i1($i2);
    call {:si_unique_call 1152} {:cexpr "__ttm_bo_reserve:arg:use_ticket"} boogie_si_record_i1($i3);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i5);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i39 := ww_mutex_lock($p38, $p4);
    call {:si_unique_call 1165} {:cexpr "ret"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i35 := $i39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, $sub.i32(0, 4));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 512);
    goto $bb8;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i34 := ww_mutex_lock_interruptible($p33, $p4);
    call {:si_unique_call 1163} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb13;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1153} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 1155} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1158} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i25 := ww_mutex_trylock($p24);
    call {:si_unique_call 1160} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1161} {:cexpr "success"} boogie_si_record_i8($i27);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else $sub.i32(0, 16));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i21 := $i29;
    goto $bb8;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 16);
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} warn_slowpath_null(.str.113, 787);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ttm_bo_del_sub_from_lru: ref;

axiom ttm_bo_del_sub_from_lru == $sub.ref(0, 583716);

procedure ttm_bo_del_sub_from_lru($p0: ref);
  free requires assertsPassed;



implementation ttm_bo_del_sub_from_lru($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    return;
}



const ww_mutex_trylock: ref;

axiom ww_mutex_trylock == $sub.ref(0, 584748);

procedure ww_mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ww_mutex_trylock($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i2 := mutex_trylock($p1);
    call {:si_unique_call 1167} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ww_mutex_lock_interruptible: ref;

axiom ww_mutex_lock_interruptible == $sub.ref(0, 585780);

procedure ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i7: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i7 := mutex_lock_interruptible_nested($p6, 0);
    call {:si_unique_call 1171} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i4 := __ww_mutex_lock_interruptible($p0, $p1);
    call {:si_unique_call 1169} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ww_mutex_lock: ref;

axiom ww_mutex_lock == $sub.ref(0, 586812);

procedure ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} mutex_lock_nested($p6, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i4 := __ww_mutex_lock($p0, $p1);
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const __ww_mutex_lock: ref;

axiom __ww_mutex_lock == $sub.ref(0, 587844);

procedure __ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ww_mutex_lock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1175} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __ww_mutex_lock_interruptible: ref;

axiom __ww_mutex_lock_interruptible == $sub.ref(0, 588876);

procedure __ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ww_mutex_lock_interruptible($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 589908);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1179} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_trylock: ref;

axiom mutex_trylock == $sub.ref(0, 590940);

procedure mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1182} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 591972);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p2 := external_alloc();
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const qxl_alloc_bo_reserved: ref;

axiom qxl_alloc_bo_reserved == $sub.ref(0, 593004);

procedure qxl_alloc_bo_reserved($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.46, assertsPassed, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_alloc_bo_reserved($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1187} {:cexpr "qxl_alloc_bo_reserved:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i5 := qxl_bo_create($p0, $i2, 0, 0, 1, $0.ref, $p4);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 1189} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p4);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i9 := qxl_release_list_add($p1, $p8);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 1192} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p4);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p11);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} qxl_bo_unref($p4);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} drm_err.ref(.str.40);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const qxl_allocate_chunk: ref;

axiom qxl_allocate_chunk == $sub.ref(0, 594036);

procedure qxl_allocate_chunk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.46, assertsPassed, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_allocate_chunk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} {:cexpr "qxl_allocate_chunk:arg:chunk_size"} boogie_si_record_i32($i3);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p4 := kmalloc(24, 208);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i3);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i11 := qxl_alloc_bo_reserved($p0, $p1, $i9, $p10);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    call {:si_unique_call 1197} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} list_add_tail($p14, $p15);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} kfree($p13);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_queue_work_on_251: ref;

axiom ldv_queue_work_on_251 == $sub.ref(0, 595068);

procedure ldv_queue_work_on_251($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_queue_work_on_251($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} {:cexpr "ldv_queue_work_on_251:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1202} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1203} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} activate_work_2($p2, 2);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const drm_vblank_cleanup: ref;

axiom drm_vblank_cleanup == $sub.ref(0, 596100);

procedure drm_vblank_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_vblank_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    return;
}



const qxl_modeset_fini: ref;

axiom qxl_modeset_fini == $sub.ref(0, 597132);

procedure qxl_modeset_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_modeset_fini($p0: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} qxl_fbdev_fini($p0);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_110 := qxl_destroy_monitors_object($p0);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(16, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} drm_mode_config_cleanup($p7);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(16, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p9, 0);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const qxl_device_fini: ref;

axiom qxl_device_fini == $sub.ref(0, 598164);

procedure qxl_device_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.47, $M.49, $M.51, $M.53, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation qxl_device_fini($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref(0, 8));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1)), $mul.ref(1, 8));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} ldv_flush_workqueue_62($p17);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} ldv_destroy_workqueue_63($p19);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, $0.ref);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} qxl_ring_free($p22);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3072, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} qxl_ring_free($p24);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} qxl_ring_free($p26);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} qxl_bo_fini($p0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} io_mapping_free($p28);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4944, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} io_mapping_free($p30);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} iounmap($p33);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} iounmap($p36);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, $0.ref);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, $0.ref);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, 0);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} qxl_debugfs_remove_files($p0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1, 8));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} qxl_bo_unref($p15);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5120, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} qxl_bo_unref($p7);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_62: ref;

axiom ldv_flush_workqueue_62 == $sub.ref(0, 599196);

procedure ldv_flush_workqueue_62($p0: ref);
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53, $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation ldv_flush_workqueue_62($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} flush_workqueue($p0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} call_and_disable_all_2(2);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_63: ref;

axiom ldv_destroy_workqueue_63 == $sub.ref(0, 600228);

procedure ldv_destroy_workqueue_63($p0: ref);
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53, $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation ldv_destroy_workqueue_63($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} destroy_workqueue($p0);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} call_and_disable_all_2(2);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const qxl_ring_free: ref;

axiom qxl_ring_free == $sub.ref(0, 601260);

procedure qxl_ring_free($p0: ref);
  free requires assertsPassed;



implementation qxl_ring_free($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} kfree($p1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_fini: ref;

axiom qxl_bo_fini == $sub.ref(0, 602292);

procedure qxl_bo_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} qxl_ttm_fini($p0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    return;
}



const io_mapping_free: ref;

axiom io_mapping_free == $sub.ref(0, 603324);

procedure io_mapping_free($p0: ref);
  free requires assertsPassed;



implementation io_mapping_free($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} iounmap($p1);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 604356);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    return;
}



const qxl_debugfs_remove_files: ref;

axiom qxl_debugfs_remove_files == $sub.ref(0, 605388);

procedure qxl_debugfs_remove_files($p0: ref);
  free requires assertsPassed;



implementation qxl_debugfs_remove_files($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i20: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i4: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p8, $p9, $i10, $p13, $i14, $p15, $p16, $p17, $p18, $i20, $p23, $p24, $i25, $p28, $i29, $p30, $p31, $p32, $p33, $i35, $i36, $i37, $i4, vslice_dummy_var_111, vslice_dummy_var_112 := qxl_debugfs_remove_files_loop_$bb4($p0, $p1, $i5, $p8, $p9, $i10, $p13, $i14, $p15, $p16, $p17, $p18, $i20, $p23, $p24, $i25, $p28, $i29, $p30, $p31, $p32, $p33, $i35, $i36, $i37, $i4, vslice_dummy_var_111, vslice_dummy_var_112);
    goto $bb4_last;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i5, 16)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i4);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i10, 16)), $mul.ref(8, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3320)), $mul.ref(48, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_111 := drm_debugfs_remove_files($p9, $i14, $p18);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i4);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i4);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i25, 16)), $mul.ref(8, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 3320)), $mul.ref(56, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_112 := drm_debugfs_remove_files($p24, $i29, $p33);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i4, 1);
    call {:si_unique_call 1230} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p1);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, $i35);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i35;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4716;
}



const qxl_ttm_fini: ref;

axiom qxl_ttm_fini == $sub.ref(0, 606420);

procedure qxl_ttm_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_fini($p0: ref)
{
  var $p2: ref;
  var $p5: ref;
  var $p8: ref;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} vslice_dummy_var_113 := ttm_bo_clean_mm($p2, 2);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vslice_dummy_var_114 := ttm_bo_clean_mm($p5, 3);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_115 := ttm_bo_device_release($p8);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} qxl_ttm_global_fini($p0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_116 := printk.ref(.str.20);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_clean_mm: ref;

axiom ttm_bo_clean_mm == $sub.ref(0, 607452);

procedure ttm_bo_clean_mm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_clean_mm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1236} {:cexpr "ttm_bo_clean_mm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1237} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_bo_device_release: ref;

axiom ttm_bo_device_release == $sub.ref(0, 608484);

procedure ttm_bo_device_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_device_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1239} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_ttm_global_fini: ref;

axiom qxl_ttm_global_fini == $sub.ref(0, 609516);

procedure qxl_ttm_global_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_global_fini($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} drm_global_item_unref($p7);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} drm_global_item_unref($p9);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 610548);

procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1243} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1245} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1247} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1249} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1251} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1252} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1253} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1254} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1255} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1256} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i32($p0: ref, p.1: i32, p.2: i64, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i32($p0: ref, p.1: i32, p.2: i64, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1257} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1259} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1260} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_global_item_unref: ref;

axiom drm_global_item_unref == $sub.ref(0, 611580);

procedure drm_global_item_unref($p0: ref);
  free requires assertsPassed;



implementation drm_global_item_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 612612);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_2: ref;

axiom call_and_disable_all_2 == $sub.ref(0, 613644);

procedure call_and_disable_all_2($i0: i32);
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53, $M.39, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.50, $M.52, $M.54, $M.57;



implementation call_and_disable_all_2($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} {:cexpr "call_and_disable_all_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i1 := $M.47;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.49;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.51;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.53;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p12 := $M.54;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} call_and_disable_work_2($p12);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p9 := $M.52;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} call_and_disable_work_2($p9);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p6 := $M.50;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} call_and_disable_work_2($p6);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p3 := $M.48;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} call_and_disable_work_2($p3);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 614676);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fbdev_fini: ref;

axiom qxl_fbdev_fini == $sub.ref(0, 615708);

procedure qxl_fbdev_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_fbdev_fini($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} vslice_dummy_var_117 := qxl_fbdev_destroy($p7, $p10);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} kfree($p15);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, $0.ref);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_destroy_monitors_object: ref;

axiom qxl_destroy_monitors_object == $sub.ref(0, 616740);

procedure qxl_destroy_monitors_object($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_destroy_monitors_object($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i11: i32;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $0.ref);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5424)), $mul.ref(5352, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, 0);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} qxl_bo_kunmap($p6);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i9 := qxl_bo_reserve($p8, 0);
    call {:si_unique_call 1270} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_118 := qxl_bo_unpin($p13);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} qxl_bo_unreserve($p16);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} qxl_bo_unref($p17);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const drm_mode_config_cleanup: ref;

axiom drm_mode_config_cleanup == $sub.ref(0, 617772);

procedure drm_mode_config_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_mode_config_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_unpin: ref;

axiom qxl_bo_unpin == $sub.ref(0, 618804);

procedure qxl_bo_unpin($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_unpin($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i24: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i15);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(0, $i22);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i40 := ttm_bo_validate($p38, $p39, 0, 0);
    call {:si_unique_call 1277} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 1279} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} dev_err.ref.ref.ref($p47, .str.28, $p0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb11;

  $bb11:
    call $i25, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $i24 := qxl_bo_unpin_loop_$bb11($p0, $p21, $i25, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $i24);
    goto $bb11_last;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i25, 12)), $mul.ref(8, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $sub.i32(0, 2097153));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i24);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref($i31, 12)), $mul.ref(8, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, $i30);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i24, 1);
    call {:si_unique_call 1275} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p21);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32($i35, $i36);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb13_dummy;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} dev_warn.ref.ref.ref($p11, .str.27, $p0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4921;
}



const qxl_bo_unreserve: ref;

axiom qxl_bo_unreserve == $sub.ref(0, 619836);

procedure qxl_bo_unreserve($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation qxl_bo_unreserve($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} ttm_bo_unreserve($p1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_unreserve: ref;

axiom ttm_bo_unreserve == $sub.ref(0, 620868);

procedure ttm_bo_unreserve($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ttm_bo_unreserve($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2097152);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} __ttm_bo_unreserve($p0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} spin_lock($p8);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} ttm_bo_add_to_lru($p0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} spin_unlock($p11);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 621900);

procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fbdev_destroy: ref;

axiom qxl_fbdev_destroy == $sub.ref(0, 622932);

procedure qxl_fbdev_destroy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_fbdev_destroy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(168, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} drm_fb_helper_fini($p19);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vfree($p21);
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} drm_framebuffer_cleanup($p22);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i15 == 1;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(168, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} qxlfb_destroy_pinned_object($p17);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(168, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $0.ref);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 552)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_119 := unregister_framebuffer($p10);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} framebuffer_release($p10);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_framebuffer: ref;

axiom unregister_framebuffer == $sub.ref(0, 623964);

procedure unregister_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1292} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1293} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const framebuffer_release: ref;

axiom framebuffer_release == $sub.ref(0, 624996);

procedure framebuffer_release($p0: ref);
  free requires assertsPassed;



implementation framebuffer_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    return;
}



const qxlfb_destroy_pinned_object: ref;

axiom qxlfb_destroy_pinned_object == $sub.ref(0, 626028);

procedure qxlfb_destroy_pinned_object($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxlfb_destroy_pinned_object($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i3 := qxl_bo_reserve($p2, 0);
    call {:si_unique_call 1295} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i7 := ldv__builtin_expect($i6, 1);
    call {:si_unique_call 1297} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} drm_gem_object_unreference_unlocked($p0);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} qxl_bo_kunmap($p2);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_120 := qxl_bo_unpin($p2);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} qxl_bo_unreserve___0($p2);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_fb_helper_fini: ref;

axiom drm_fb_helper_fini == $sub.ref(0, 627060);

procedure drm_fb_helper_fini($p0: ref);
  free requires assertsPassed;



implementation drm_fb_helper_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 628092);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    return;
}



const drm_framebuffer_cleanup: ref;

axiom drm_framebuffer_cleanup == $sub.ref(0, 629124);

procedure drm_framebuffer_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_framebuffer_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    return;
}



const qxl_bo_unreserve___0: ref;

axiom qxl_bo_unreserve___0 == $sub.ref(0, 630156);

procedure qxl_bo_unreserve___0($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation qxl_bo_unreserve___0($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ttm_bo_unreserve___0($p1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    return;
}



const ttm_bo_unreserve___0: ref;

axiom ttm_bo_unreserve___0 == $sub.ref(0, 631188);

procedure ttm_bo_unreserve___0($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ttm_bo_unreserve___0($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(40, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2097152);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} __ttm_bo_unreserve($p0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} spin_lock($p8);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} ttm_bo_add_to_lru($p0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 592)), $mul.ref(480, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} spin_unlock($p11);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_core_check_feature: ref;

axiom drm_core_check_feature == $sub.ref(0, 632220);

procedure drm_core_check_feature($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_core_check_feature($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} {:cexpr "drm_core_check_feature:arg:feature"} boogie_si_record_i32($i1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(32, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 480)), $mul.ref(432, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $i1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const qxl_device_init: ref;

axiom qxl_device_init == $sub.ref(0, 633252);

procedure qxl_device_init($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_device_init($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $i40: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $i79: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p87: ref;
  var $i88: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p105: ref;
  var $i106: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p114: ref;
  var $i115: i64;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $i122: i64;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $i134: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $i145: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $i169: i64;
  var $p172: ref;
  var $i173: i64;
  var $p174: ref;
  var $i175: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $i181: i64;
  var $p184: ref;
  var $i185: i64;
  var $i186: i64;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $i192: i64;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $p200: ref;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i64;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $i221: i64;
  var $p224: ref;
  var $i225: i64;
  var $p228: ref;
  var $i229: i64;
  var $i230: i1;
  var $p233: ref;
  var $i234: i64;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p242: ref;
  var $i243: i64;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $i249: i64;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $p255: ref;
  var $i256: i64;
  var $i257: i1;
  var $p260: ref;
  var $i261: i64;
  var $p264: ref;
  var $i265: i64;
  var $i266: i1;
  var $p269: ref;
  var $i270: i64;
  var $p273: ref;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $p280: ref;
  var $i281: i64;
  var $i282: i64;
  var $p285: ref;
  var $i286: i64;
  var $p287: ref;
  var $i288: i64;
  var $i289: i32;
  var $i290: i32;
  var $p291: ref;
  var $i292: i64;
  var $i293: i32;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $p299: ref;
  var $i300: i64;
  var $p301: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $i306: i64;
  var $i307: i1;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i64;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i32;
  var $i319: i64;
  var $i320: i64;
  var $p321: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $i348: i8;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $i353: i8;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $i358: i8;
  var $p359: ref;
  var $p360: ref;
  var $i361: i8;
  var $i362: i32;
  var $p363: ref;
  var $i364: i8;
  var $i365: i32;
  var $i366: i32;
  var $i367: i64;
  var $i368: i64;
  var $p369: ref;
  var $p370: ref;
  var $i371: i8;
  var $i372: i64;
  var $i373: i64;
  var $p374: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i398: i64;
  var $p399: ref;
  var $i400: i64;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $i406: i64;
  var $i407: i8;
  var $p408: ref;
  var $p409: ref;
  var $i410: i64;
  var $p411: ref;
  var $i412: i64;
  var $p413: ref;
  var $i414: i64;
  var $i415: i64;
  var $i416: i8;
  var $p417: ref;
  var $p418: ref;
  var $i419: i8;
  var $i420: i32;
  var $p421: ref;
  var $i422: i64;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $i426: i32;
  var $p428: ref;
  var $i429: i8;
  var $i430: i32;
  var $p431: ref;
  var $i432: i64;
  var $p433: ref;
  var $i434: i64;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p447: ref;
  var $p449: ref;
  var $i450: i32;
  var $i451: i1;
  var $i309: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i1;
  var vslice_dummy_var_123: ref;
  var vslice_dummy_var_124: ref;
  var vslice_dummy_var_125: ref;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1319} {:cexpr "qxl_device_init:arg:flags"} boogie_si_record_i64($i3);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, $p15);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, $p1);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(16, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $p2);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(24, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p19, $i3);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(0, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} __mutex_init($p21, .str.78, $p4);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4432, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} __mutex_init($p22, .str.79, $p5);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4960, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} __mutex_init($p23, .str.80, $p6);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4784, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} __mutex_init($p24, .str.81, $p7);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(2824, 1)), $mul.ref(160, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} INIT_LIST_HEAD($p26);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.6, $p29);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(64, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p31, $i30);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.6, $p34);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i36 == 1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.6, $p39);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.6, $p43);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i40, $i44);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(72, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p57, $i56);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.6, $p60);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p62, $i61);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.6, $p65);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i66);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p68, $i67);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.6, $p69);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.6, $p73);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i75 == 1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.6, $p78);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.6, $p82);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i79, $i83);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i84 == 1);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p96 := io_mapping_create_wc($i70, $i95);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4944, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p97, $p96);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.6, $p100);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i102 == 1);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(4, 56)), $mul.ref(8, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.6, $p105);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.6, $p109);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i106, $i110);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.6, $p165);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i212 := 4;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.6, drm_debug);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 4);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i216 := $zext.i1.i32($i215);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i218 := ldv__builtin_expect($i217, 0);
    call {:si_unique_call 1329} {:cexpr "tmp"} boogie_si_record_i64($i218);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, 0);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(64, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i298 := $load.i64($M.6, $p297);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(72, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i300 := $load.i64($M.6, $p299);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $p301 := ioremap($i298, $i300);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p303, $p301);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.6, $p304);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i307 := $eq.i64($i306, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_122 := qxl_check_device($p0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i311 := qxl_bo_init($p0);
    call {:si_unique_call 1335} {:cexpr "r"} boogie_si_record_i32($i311);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i314 := $load.i64($M.6, $p313);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.6, $p315);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p316, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.6, $p317);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i319 := $zext.i32.i64($i318);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i320 := $add.i64($i314, $i319);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p321 := ioremap($i320, 5412);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p323, $p321);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.6, $p324);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 5424)), $mul.ref(4108, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.6, $p327);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3568, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p330 := qxl_ring_create($p326, 16, 32, $i328, 0, $p329);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p331, $p330);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.6, $p332);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p333, $mul.ref(0, 5424)), $mul.ref(4640, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.6, $p335);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3656, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p338 := qxl_ring_create($p334, 16, 32, $i336, 0, $p337);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3072, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p339, $p338);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.6, $p340);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p341, $mul.ref(0, 5424)), $mul.ref(5176, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p343 := qxl_ring_create($p342, 8, 8, 0, 1, $0.ref);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p344, $p343);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.6, $p345);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p346, $mul.ref(0, 1160)), $mul.ref(65, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i348 := $load.i8($M.6, $p347);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3104, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p349, $i348);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.6, $p350);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p351, $mul.ref(0, 1160)), $mul.ref(66, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.6, $p352);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p354, $i353);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.6, $p355);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p356, $mul.ref(0, 1160)), $mul.ref(67, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.6, $p357);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3107, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p359, $i358);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3107, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i361 := $load.i8($M.6, $p360);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i362 := $zext.i8.i32($i361);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i364 := $load.i8($M.6, $p363);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i365 := $zext.i8.i32($i364);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i366 := $add.i32($i362, $i365);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i367 := $zext.i32.i64($i366);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i368 := $lshr.i64($sub.i64(0, 1), $i367);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3112, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p369, $i368);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3104, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.6, $p370);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i64($i371);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i373 := $mul.i64($i372, 32);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p374 := kmalloc($i373, 208);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p376, $p374);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} idr_init($p377);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_123 := spinlock_check($p378);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1)), $mul.ref(0, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} __raw_spin_lock_init($p382, .str.88, $p8);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3120, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_124 := spinlock_check($p383);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3120, 1)), $mul.ref(0, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} __raw_spin_lock_init($p387, .str.89, $p9);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} idr_init($p388);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} vslice_dummy_var_125 := spinlock_check($p389);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} __raw_spin_lock_init($p393, .str.90, $p10);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3384, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} __mutex_init($p394, .str.91, $p11);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} qxl_io_reset($p0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i395 := qxl_irq_init($p0);
    call {:si_unique_call 1353} {:cexpr "r"} boogie_si_record_i32($i395);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i398 := $load.i64($M.6, $p397);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i400 := $load.i64($M.6, $p399);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.6, $p401);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.6, $p403);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i405 := $zext.i32.i64($i404);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i406 := $add.i64($i400, $i405);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i407 := setup_slot($p0, 0, $i398, $i406);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p408, $i407);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i410 := $load.i64($M.6, $p409);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i412 := $load.i64($M.6, $p411);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i414 := $load.i64($M.6, $p413);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i415 := $add.i64($i412, $i414);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i416 := setup_slot($p0, 1, $i410, $i415);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p417, $i416);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.6, $p418);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i422 := $load.i64($M.6, $p421);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.6, $p423);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p424, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i426 := $load.i32($M.6, $p425);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_126 := printk.ref.i32.i64.i32(.str.92, $i420, $i422, $i426);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.6, $p428);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i432 := $load.i64($M.6, $p431);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i434 := $load.i64($M.6, $p433);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_127 := printk.ref.i32.i64.i64(.str.93, $i430, $i432, $i434);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p436 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.95, 131082, 1, $p12, .str.94, .str.96);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5160, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p437, $p436);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} __init_work($p438, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p439, 137438953408);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(0, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p442 := $bitcast.ref.ref($p441);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p443 := $bitcast.ref.ref($p14);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.6;
    cmdloc_dummy_var_28 := $M.6;
    call {:si_unique_call 1360} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p442, $p443, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_29;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(32, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} lockdep_init_map($p445, .str.97, $p13, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(8, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} INIT_LIST_HEAD($p447);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5168, 1)), $mul.ref(24, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p449, qxl_gc_work);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i450 := qxl_fb_init($p0);
    call {:si_unique_call 1364} {:cexpr "r"} boogie_si_record_i32($i450);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i451 := $ne.i32($i450, 0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i309 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $r := $i309;
    return;

  $bb62:
    assume $i451 == 1;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i309 := $i450;
    goto $bb54;

  $bb59:
    assume $i396 == 1;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i309 := $i395;
    goto $bb54;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i312 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} drm_err.ref.i32(.str.87, $i311);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i309 := $i311;
    goto $bb54;

  $bb52:
    assume $i307 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_121 := printk.ref(.str.86);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i309 := $sub.i32(0, 12);
    goto $bb54;

  $bb37:
    assume $i219 == 1;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i221 := $load.i64($M.6, $p220);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i225 := $load.i64($M.6, $p224);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i229 := $load.i64($M.6, $p228);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i230 := $ne.i64($i229, 0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i230 == 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i234 := $load.i64($M.6, $p233);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i238 := $load.i64($M.6, $p237);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i239 := $ne.i64($i234, $i238);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i239 == 1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i252 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i256 := $load.i64($M.6, $p255);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i256, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i257 == 1);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i261 := $load.i64($M.6, $p260);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i265 := $load.i64($M.6, $p264);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i266 := $ne.i64($i261, $i265);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i266 == 1);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i279 := 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i281 := $load.i64($M.6, $p280);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i212);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i282, 56)), $mul.ref(8, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i286 := $load.i64($M.6, $p285);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i288 := $load.i64($M.6, $p287);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i64.i32($i288);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i290 := $sdiv.i32($i289, 1048576);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i292 := $load.i64($M.6, $p291);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i64.i32($i292);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i294 := $sdiv.i32($i293, 1024);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i212, 4);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p296 := (if $i295 == 1 then .str.84 else .str.85);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} drm_ut_debug_printk.ref.ref.i64.i64.i32.i32.i64.i64.i32.i32.ref(.str.82, .str.83, $i221, $i225, $i252, $i279, $i281, $i286, $i290, $i294, $p296);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i270 := $load.i64($M.6, $p269);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.6, $p273);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i275 := $sub.i64($i270, $i274);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i276 := $add.i64($i275, 1);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i64.i32($i276);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i278 := $sdiv.i32($i277, 1024);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i279 := $i278;
    goto $bb50;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.6, $p242);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i247 := $load.i64($M.6, $p246);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i248 := $sub.i64($i243, $i247);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i249 := $add.i64($i248, 1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i64.i32($i249);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i251 := $sdiv.i32($i250, 1048576);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i252 := $i251;
    goto $bb44;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb40;

  $bb28:
    assume $i168 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64(1);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i169, 56)), $mul.ref(0, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.6, $p172);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p174, $i173);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64(1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i175, 56)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i179 := $load.i64($M.6, $p178);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i180 == 1);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i181 := $sext.i32.i64(1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i181, 56)), $mul.ref(8, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i185 := $load.i64($M.6, $p184);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i186 := $sext.i32.i64(1);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i186, 56)), $mul.ref(0, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.6, $p189);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i185, $i190);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i191 == 1);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i204 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p205, $i204);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.6, $p206);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.6, $p208);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p210 := io_mapping_create_wc($i207, $i209);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p211, $p210);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i212 := 1;
    goto $bb36;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64(1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i192, 56)), $mul.ref(8, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i196 := $load.i64($M.6, $p195);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64(1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i197, 56)), $mul.ref(0, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.6, $p200);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i202 := $sub.i64($i196, $i201);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i203 := $add.i64($i202, 1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i204 := $i203;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb31;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(4, 56)), $mul.ref(8, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.6, $p114);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(4, 56)), $mul.ref(0, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.6, $p118);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i120 := $sub.i64($i115, $i119);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, $sub.i64(0, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb18;

  $bb19:
    assume $i121 == 1;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64(4);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i122, 56)), $mul.ref(0, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.6, $p125);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p127, $i126);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64(4);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i128, 56)), $mul.ref(0, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.6, $p131);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i133 == 1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64(4);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i134, 56)), $mul.ref(8, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.6, $p137);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64(4);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i139, 56)), $mul.ref(0, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.6, $p142);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i138, $i143);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i144 == 1);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i157 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p158, $i157);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.6, $p159);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.6, $p161);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p163 := io_mapping_create_wc($i160, $i162);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4952, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p164, $p163);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64(4);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i145, 56)), $mul.ref(8, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.6, $p148);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64(4);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref($i150, 56)), $mul.ref(0, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.6, $p153);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i155 := $sub.i64($i149, $i154);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i156 := $add.i64($i155, 1);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i157 := $i156;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.6, $p87);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.6, $p91);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i93 := $sub.i64($i88, $i92);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.6, $p48);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.6, $p52);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i49, $i53);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 1);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb2;
}



const drm_vblank_init: ref;

axiom drm_vblank_init == $sub.ref(0, 634284);

procedure drm_vblank_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vblank_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1365} {:cexpr "drm_vblank_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1366} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_modeset_init: ref;

axiom qxl_modeset_init == $sub.ref(0, 635316);

procedure qxl_modeset_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.40, $M.57, $M.41, $CurrAddr, $M.39, assertsPassed;



implementation qxl_modeset_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i38: i32;
  var $p49: ref;
  var $i5: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} drm_mode_config_init($p2);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $i3 := qxl_create_monitors_object($p0);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 1370} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1056, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, qxl_mode_funcs);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1040, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 320);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1044, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 200);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1048, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 8192);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1052, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 8192);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.6, $p26);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1064, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p31, $i27);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_128 := drm_mode_create_suggested_offset_properties($p33);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_129 := qxl_mode_create_hotplug_mode_update_property($p0);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i36 := $M.56;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i36);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(16, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 1);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_132 := qxl_fbdev_init($p0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb8;

  $bb8:
    call $p39, $p40, $p42, $p43, $i45, $i46, $i47, $i38, vslice_dummy_var_130, vslice_dummy_var_131 := qxl_modeset_init_loop_$bb8($p0, $p39, $p40, $p42, $p43, $i45, $i46, $i47, $i38, vslice_dummy_var_130, vslice_dummy_var_131);
    goto $bb8_last;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_130 := qdev_crtc_init($p40, $i38);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.6, $p42);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_131 := qdev_output_init($p43, $i38);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i38, 1);
    call {:si_unique_call 1375} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i46 := $M.56;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, $i46);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb10_dummy;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;
}



const drm_kms_helper_poll_init: ref;

axiom drm_kms_helper_poll_init == $sub.ref(0, 636348);

procedure drm_kms_helper_poll_init($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_poll_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    return;
}



const drm_mode_config_init: ref;

axiom drm_mode_config_init == $sub.ref(0, 637380);

procedure drm_mode_config_init($p0: ref);
  free requires assertsPassed;



implementation drm_mode_config_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    return;
}



const qxl_create_monitors_object: ref;

axiom qxl_create_monitors_object == $sub.ref(0, 638412);

procedure qxl_create_monitors_object($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.6, $M.40, $M.57, $M.41, $CurrAddr, $M.39, assertsPassed;



implementation qxl_create_monitors_object($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i16;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i9: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i2 := $M.56;
    call {:si_unique_call 1378} {:cexpr "max_allowed"} boogie_si_record_i32($i2);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 28);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 4);
    call {:si_unique_call 1379} {:cexpr "monitors_config_size"} boogie_si_record_i32($i6);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i7 := qxl_gem_object_create($p0, $i6, 0, 1, 0, 0, $0.ref, $p1);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 1381} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.32, $p1);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $p12);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i16 := qxl_bo_reserve($p15, 0);
    call {:si_unique_call 1384} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i20 := qxl_bo_pin($p19, 1, $0.ref);
    call {:si_unique_call 1386} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} qxl_bo_unreserve($p25);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_133 := qxl_bo_kmap($p27, $0.ref);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, $p32);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i37 := qxl_bo_physical_address($p0, $p36, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 5424)), $mul.ref(5352, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p40, $i37);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i6);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.6;
    call {:si_unique_call 1391} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p43, 0, $i44, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_31;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i2);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p48, $i45);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(96, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} qxl_bo_unreserve($p23);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} drm_err.ref.ref.i32(.str.7, .str.8, $i7);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const drm_mode_create_suggested_offset_properties: ref;

axiom drm_mode_create_suggested_offset_properties == $sub.ref(0, 639444);

procedure drm_mode_create_suggested_offset_properties($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_create_suggested_offset_properties($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1392} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1393} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_mode_create_hotplug_mode_update_property: ref;

axiom qxl_mode_create_hotplug_mode_update_property == $sub.ref(0, 640476);

procedure qxl_mode_create_hotplug_mode_update_property($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_mode_create_hotplug_mode_update_property($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5328, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p7 := drm_property_create_range($p6, 4, .str.114, 0, 1);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5328, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p7);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qdev_crtc_init: ref;

axiom qdev_crtc_init == $sub.ref(0, 641508);

procedure qdev_crtc_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qdev_crtc_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i6: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "qdev_crtc_init:arg:crtc_id"} boogie_si_record_i32($i1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p2 := kmalloc(1176, 208);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(0, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_134 := drm_crtc_init($p0, $p7, qxl_crtc_funcs);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, $i1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(0, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_135 := drm_mode_crtc_set_gamma_size($p10, 256);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} drm_crtc_helper_add($p12, qxl_crtc_helper_funcs);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const qdev_output_init: ref;

axiom qdev_output_init == $sub.ref(0, 642540);

procedure qdev_output_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qdev_output_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i9: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} {:cexpr "qdev_output_init:arg:num_output"} boogie_si_record_i32($i1);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p5 := kmalloc(1040, 208);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i1);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(944, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_136 := drm_connector_init($p0, $p13, qxl_connector_funcs, 15);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(944, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} vslice_dummy_var_137 := drm_encoder_init($p0, $p15, qxl_enc_funcs, 5);
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1)), $mul.ref(632, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i1);
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(944, 1)), $mul.ref(52, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, $i18);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(944, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vslice_dummy_var_138 := drm_mode_connector_attach_encoder($p20, $p21);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} drm_encoder_helper_add($p12, qxl_enc_helper_funcs);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} drm_connector_helper_add($p11, qxl_connector_helper_funcs);
    $p23 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 5336)), $mul.ref(5328, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} drm_object_attach_property($p23, $p25, 0);
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1768, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} drm_object_attach_property($p26, $p29, 0);
    $p30 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1040)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1776, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} drm_object_attach_property($p30, $p33, 0);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_139 := drm_connector_register($p11);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const qxl_fbdev_init: ref;

axiom qxl_fbdev_init == $sub.ref(0, 643572);

procedure qxl_fbdev_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_fbdev_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i37: i32;
  var $p41: ref;
  var $i33: i32;
  var $p42: ref;
  var $i7: i32;
  var vslice_dummy_var_140: ref;
  var vslice_dummy_var_141: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p3 := kmalloc(552, 208);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p0);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $p3);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(360, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_140 := spinlock_check($p11);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} __raw_spin_lock_init($p15, .str.23, $p1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_141 := spinlock_check($p17);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} __raw_spin_lock_init($p22, .str.24, $p2);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(432, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} INIT_LIST_HEAD($p23);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} drm_fb_helper_prepare($p25, $p26, qxl_fb_helper_funcs);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i30 := $M.56;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $i31 := drm_fb_helper_init($p28, $p29, $i30, 1);
    call {:si_unique_call 1421} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i35 := drm_fb_helper_single_add_all_connectors($p34);
    call {:si_unique_call 1424} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i39 := drm_fb_helper_initial_config($p38, 32);
    call {:si_unique_call 1427} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i37 := $i39;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} drm_fb_helper_fini($p41);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i33 := $i37;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p4);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} kfree($p42);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb11;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 644604);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 645636);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_prepare: ref;

axiom drm_fb_helper_prepare == $sub.ref(0, 646668);

procedure drm_fb_helper_prepare($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation drm_fb_helper_prepare($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_init: ref;

axiom drm_fb_helper_init == $sub.ref(0, 647700);

procedure drm_fb_helper_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1428} {:cexpr "drm_fb_helper_init:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1429} {:cexpr "drm_fb_helper_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_fb_helper_single_add_all_connectors: ref;

axiom drm_fb_helper_single_add_all_connectors == $sub.ref(0, 648732);

procedure drm_fb_helper_single_add_all_connectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_single_add_all_connectors($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1432} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1433} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_fb_helper_initial_config: ref;

axiom drm_fb_helper_initial_config == $sub.ref(0, 649764);

procedure drm_fb_helper_initial_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_initial_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1434} {:cexpr "drm_fb_helper_initial_config:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1435} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1436} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_connector_init: ref;

axiom drm_connector_init == $sub.ref(0, 650796);

procedure drm_connector_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_connector_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1437} {:cexpr "drm_connector_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1438} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1439} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_encoder_init: ref;

axiom drm_encoder_init == $sub.ref(0, 651828);

procedure drm_encoder_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_encoder_init($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1440} {:cexpr "drm_encoder_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1441} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1442} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_mode_connector_attach_encoder: ref;

axiom drm_mode_connector_attach_encoder == $sub.ref(0, 652860);

procedure drm_mode_connector_attach_encoder($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_connector_attach_encoder($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1443} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1444} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_encoder_helper_add: ref;

axiom drm_encoder_helper_add == $sub.ref(0, 653892);

procedure drm_encoder_helper_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_encoder_helper_add($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p1);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_helper_add: ref;

axiom drm_connector_helper_add == $sub.ref(0, 654924);

procedure drm_connector_helper_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_connector_helper_add($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 936)), $mul.ref(640, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p1);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    return;
}



const drm_object_attach_property: ref;

axiom drm_object_attach_property == $sub.ref(0, 655956);

procedure drm_object_attach_property($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation drm_object_attach_property($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} {:cexpr "drm_object_attach_property:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_register: ref;

axiom drm_connector_register == $sub.ref(0, 656988);

procedure drm_connector_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_connector_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1446} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1447} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_crtc_init: ref;

axiom drm_crtc_init == $sub.ref(0, 658020);

procedure drm_crtc_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_crtc_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1448} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1449} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_mode_crtc_set_gamma_size: ref;

axiom drm_mode_crtc_set_gamma_size == $sub.ref(0, 659052);

procedure drm_mode_crtc_set_gamma_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_crtc_set_gamma_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} {:cexpr "drm_mode_crtc_set_gamma_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1451} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_crtc_helper_add: ref;

axiom drm_crtc_helper_add == $sub.ref(0, 660084);

procedure drm_crtc_helper_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation drm_crtc_helper_add($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(744, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, $p1);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    return;
}



const drm_property_create_range: ref;

axiom drm_property_create_range == $sub.ref(0, 661116);

procedure drm_property_create_range($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation drm_property_create_range($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} {:cexpr "drm_property_create_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1454} {:cexpr "drm_property_create_range:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1455} {:cexpr "drm_property_create_range:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p5 := external_alloc();
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const qxl_bo_pin: ref;

axiom qxl_bo_pin == $sub.ref(0, 662148);

procedure qxl_bo_pin($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.57;



implementation qxl_bo_pin($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} {:cexpr "qxl_bo_pin:arg:domain"} boogie_si_record_i32($i1);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} qxl_ttm_placement_from_domain($p0, $i1, 1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(56, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $i22 := ttm_bo_validate($p20, $p21, 0, 0);
    call {:si_unique_call 1461} {:cexpr "r"} boogie_si_record_i32($i22);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $i26 := ldv__builtin_expect($i25, 1);
    call {:si_unique_call 1463} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i22, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1466} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(0, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} dev_err.ref.ref.ref($p38, .str.26, $p0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, 1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p2);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i31 := qxl_bo_gpu_offset($p0);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p2, $i31);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(992, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i14);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $i18 := qxl_bo_gpu_offset($p0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p2, $i18);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 663180);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const qxl_bo_gpu_offset: ref;

axiom qxl_bo_gpu_offset == $sub.ref(0, 664212);

procedure qxl_bo_gpu_offset($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation qxl_bo_gpu_offset($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(88, 1)), $mul.ref(424, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 665244);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    return;
}



const io_mapping_create_wc: ref;

axiom io_mapping_create_wc == $sub.ref(0, 666276);

procedure io_mapping_create_wc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation io_mapping_create_wc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} {:cexpr "io_mapping_create_wc:arg:base"} boogie_si_record_i64($i0);
    call {:si_unique_call 1469} {:cexpr "io_mapping_create_wc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p2 := ioremap_wc($i0, $i1);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const drm_ut_debug_printk: ref;

axiom drm_ut_debug_printk == $sub.ref(0, 667308);

procedure drm_ut_debug_printk.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure drm_ut_debug_printk.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    return;
}



procedure drm_ut_debug_printk.ref.ref.i64.i64.i32.i32.i64.i64.i32.i32.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32, p.5: i32, p.6: i64, p.7: i64, p.8: i32, p.9: i32, p.10: ref);
  free requires assertsPassed;



implementation drm_ut_debug_printk.ref.ref.i64.i64.i32.i32.i64.i64.i32.i32.ref($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i32, p.5: i32, p.6: i64, p.7: i64, p.8: i32, p.9: i32, p.10: ref)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 668340);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 1472} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const qxl_check_device: ref;

axiom qxl_check_device == $sub.ref(0, 669372);

procedure qxl_check_device($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_check_device($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i66: i32;
  var $i8: i1;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1330796625);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(4, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(8, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_142 := printk.ref.i32.i32(.str.99, $i10, $i12);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(12, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(16, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} vslice_dummy_var_143 := printk.ref.i32.i32(.str.100, $i15, $i17);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(20, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(24, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_144 := printk.ref.i32.i32(.str.101, $i20, $i22);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(28, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(32, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vslice_dummy_var_145 := printk.ref.i32.i32(.str.102, $i25, $i27);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(40, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(36, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_146 := printk.ref.i32.i32(.str.103, $i30, $i32);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(40, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p37, $i36);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_147 := printk.ref.i32(.str.104, $i39);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(24, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i42, 4);
    call {:si_unique_call 1481} {:cexpr "mode_offset"} boogie_si_record_i32($i43);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i43);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 4));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p49, $i47);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(24, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_148 := printk.ref.i32.i32(.str.105, $i51, $i54);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i43);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p56, $mul.ref($i58, 32));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p61, $p59);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(0, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.6, $p63);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i65 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb8;

  $bb8:
    call $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i66 := qxl_check_device_loop_$bb8($p0, $p63, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i66);
    goto $bb8_last;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.6, $p68);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i66);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p70, $mul.ref($i71, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} qxl_dump_mode($p0, $p72);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i66, 1);
    call {:si_unique_call 1484} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p63);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, $i73);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i75 == 1);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i66 := $i73;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} drm_err.ref.i32(.str.98, $i7);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6008;
}



const qxl_bo_init: ref;

axiom qxl_bo_init == $sub.ref(0, 670404);

procedure qxl_bo_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_bo_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i1 := qxl_ttm_init($p0);
    call {:si_unique_call 1486} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_ring_create: ref;

axiom qxl_ring_create == $sub.ref(0, 671436);

procedure qxl_ring_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $p5: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_ring_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p12: ref;
  var vslice_dummy_var_149: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1488} {:cexpr "qxl_ring_create:arg:element_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 1489} {:cexpr "qxl_ring_create:arg:n_elements"} boogie_si_record_i32($i2);
    call {:si_unique_call 1490} {:cexpr "qxl_ring_create:arg:prod_notify"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i4);
    call {:si_unique_call 1491} {:cexpr "qxl_ring_create:arg:set_prod_notify"} boogie_si_record_i1($i4);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p8 := kmalloc(104, 208);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, $p0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i2);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i3);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, $p5);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i7);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_149 := spinlock_check($p20);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} __raw_spin_lock_init($p24, .str.33, $p6);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} qxl_ring_init_hdr($p9);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const idr_init: ref;

axiom idr_init == $sub.ref(0, 672468);

procedure idr_init($p0: ref);
  free requires assertsPassed;



implementation idr_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    return;
}



const qxl_io_reset: ref;

axiom qxl_io_reset == $sub.ref(0, 673500);

procedure qxl_io_reset($p0: ref);
  free requires assertsPassed;



implementation qxl_io_reset($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 5);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} outb(0, $i3);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    return;
}



const qxl_irq_init: ref;

axiom qxl_irq_init == $sub.ref(0, 674532);

procedure qxl_irq_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_irq_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3568, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} __init_waitqueue_head($p6, .str.55, $p1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3656, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} __init_waitqueue_head($p7, .str.56, $p2);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} __init_waitqueue_head($p8, .str.57, $p3);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} __init_work($p9, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p10, 137438953408);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(0, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p5);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.6;
    cmdloc_dummy_var_33 := $M.6;
    call {:si_unique_call 1506} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p13, $p14, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_34;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(32, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} lockdep_init_map($p16, .str.58, $p4, 0);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(8, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} INIT_LIST_HEAD($p18);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3832, 1)), $mul.ref(24, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, qxl_client_monitors_config_work_func);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3548, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} atomic_set($p21, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3552, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} atomic_set($p22, 0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3556, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} atomic_set($p23, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} atomic_set($p24, 0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3564, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 0);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 3320)), $mul.ref(1144, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $i34 := drm_irq_install($p27, $i33);
    call {:si_unique_call 1514} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 5424)), $mul.ref(8, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, 39);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i34, 0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1516} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb1:
    assume $i42 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} drm_err.ref.i32(.str.59, $i34);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb3;
}



const setup_slot: ref;

axiom setup_slot == $sub.ref(0, 675564);

procedure setup_slot($p0: ref, $i1: i8, $i2: i64, $i3: i64) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation setup_slot($p0: ref, $i1: i8, $i2: i64, $i3: i64) returns ($r: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} {:cexpr "setup_slot:arg:slot_index_offset"} boogie_si_record_i8($i1);
    call {:si_unique_call 1519} {:cexpr "setup_slot:arg:start_phys_addr"} boogie_si_record_i64($i2);
    call {:si_unique_call 1520} {:cexpr "setup_slot:arg:end_phys_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1160)), $mul.ref(64, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 1521} {:cexpr "slot_index"} boogie_si_record_i8($i11);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i11);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 32));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(8, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p16, $i2);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(16, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p17, $i3);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i11);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} setup_hw_slot($p0, $i18, $p15);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1160)), $mul.ref(68, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(0, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, $i22);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i11);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i24, $i27);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    call {:si_unique_call 1523} {:cexpr "high_bits"} boogie_si_record_i64($i29);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(0, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i32, $i29);
    call {:si_unique_call 1524} {:cexpr "high_bits"} boogie_si_record_i64($i33);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3108, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3107, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i36, $i39);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(64, $i40);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i43 := $shl.i64($i33, $i42);
    call {:si_unique_call 1525} {:cexpr "high_bits"} boogie_si_record_i64($i43);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(24, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p44, $i43);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 676596);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1527} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $p5 := external_alloc();
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 677628);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 678660);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    return;
}



const qxl_gc_work: ref;

axiom qxl_gc_work == $sub.ref(0, 679692);

procedure qxl_gc_work($p0: ref);
  free requires assertsPassed;
  modifies $M.58, $M.39, $M.6, $M.40, $CurrAddr, $M.41, $M.46, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_gc_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 5168), 5336));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_150 := qxl_garbage_collect($p2);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;
}



const qxl_fb_init: ref;

axiom qxl_fb_init == $sub.ref(0, 680724);

procedure qxl_fb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_fb_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} __init_work($p3, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, 137438953408);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(0, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.6;
    cmdloc_dummy_var_36 := $M.6;
    call {:si_unique_call 1535} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_37;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(32, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} lockdep_init_map($p10, .str.21, $p1, 0);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(8, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} INIT_LIST_HEAD($p12);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(5248, 1)), $mul.ref(24, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, qxl_fb_work);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_garbage_collect: ref;

axiom qxl_garbage_collect == $sub.ref(0, 681756);

procedure qxl_garbage_collect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $M.39, $M.6, $M.40, $CurrAddr, $M.41, $M.46, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_garbage_collect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i1;
  var $i16: i32;
  var $i38: i32;
  var $i15: i32;
  var $i22: i32;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $i9: i32;
  var $i43: i32;
  var $i8: i32;
  var $i44: i32;
  var $i45: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $i5 := qxl_ring_pop($p3, $p4);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1540} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i44 := $M.42;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb41:
    assume $i45 == 1;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} qxl_io_log.ref.ref.ref.i32($p0, .str.38, .str.39, $i8);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $i14, $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i16, $i38, $i15, $i22, $p39, $i40, $i41, $i42, $i9, $i43 := qxl_garbage_collect_loop_$bb4($p0, $p1, $p2, $p4, $i10, $i11, $i12, $i13, $i14, $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i16, $i38, $i15, $i22, $p39, $i40, $i41, $i42, $i9, $i43);
    goto $bb4_last;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $M.42;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.58, $p1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i15 := $i9;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i22 := $i15;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p2);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $i40 := qxl_ring_pop($p39, $p4);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1544} {:cexpr "tmp"} boogie_si_record_i8($i41);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i43 := $i22;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i8 := $i43;
    goto $bb3;

  $bb38:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb38_dummy;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i16 := $i9;
    goto $bb12;

  $bb12:
    call $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i16, $i38 := qxl_garbage_collect_loop_$bb12($p0, $p1, $i17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i16, $i38);
    goto $bb12_last;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.58, $p1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p18 := qxl_release_from_id_locked($p0, $i17);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i21 := $i16;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $p23 := qxl_release_map($p0, $p18);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.6, $p24);
    call {:si_unique_call 1546} {:cexpr "next_id"} boogie_si_record_i64($i25);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} qxl_release_unmap($p0, $p18, $p23);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i26 := $M.42;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 0);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} drm_err.ref(.str.37);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p1, $i25);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} qxl_release_free($p0, $p18);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i16, 1);
    call {:si_unique_call 1550} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.58, $p1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i15 := $i38;
    goto $bb11;

  $bb35:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i35;
    goto $bb35_dummy;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb30;

  $bb31:
    assume $i34 == 1;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.58, $p1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} qxl_io_log.ref.ref.i64.i64($p0, .str.36, $i28, $i25);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb16;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.58, $p1);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} qxl_io_log.ref.ref.i64($p0, .str.35, $i12);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb35_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  $bb38_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6207;
}



const qxl_release_from_id_locked: ref;

axiom qxl_release_from_id_locked == $sub.ref(0, 682788);

procedure qxl_release_from_id_locked($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $CurrAddr;



implementation qxl_release_from_id_locked($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} {:cexpr "qxl_release_from_id_locked:arg:id"} boogie_si_record_i64($i1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} spin_lock($p2);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3192, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i1);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p5 := idr_find___0($p3, $i4);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3312, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} spin_unlock($p7);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} drm_err.ref(.str.71);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;
}



const qxl_ring_pop: ref;

axiom qxl_ring_pop == $sub.ref(0, 683820);

procedure qxl_ring_pop($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.39, $M.6;



implementation qxl_ring_pop($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i15: i1;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ldv_spin_lock();
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, $i8);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $sub.i32(0, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i17, $i20);
    call {:si_unique_call 1560} {:cexpr "idx"} boogie_si_record_i32($i21);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(20, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, $i21);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p25, $mul.ref($i29, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.6;
    cmdloc_dummy_var_39 := $M.6;
    call {:si_unique_call 1561} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p1, $p30, $i33, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_40;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i36);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} spin_unlock_irqrestore($p38, $u0);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i9 == 1;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, $i12);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const idr_find___0: ref;

axiom idr_find___0 == $sub.ref(0, 684852);

procedure idr_find___0($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation idr_find___0($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1565} {:cexpr "idr_find___0:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} __read_once_size($p5, $p7, 8);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1568} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} __read_once_size($p21, $p23, 8);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1571} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const setup_hw_slot: ref;

axiom setup_hw_slot == $sub.ref(0, 685884);

procedure setup_hw_slot($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation setup_hw_slot($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} {:cexpr "setup_hw_slot:arg:slot_index"} boogie_si_record_i32($i1);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5424)), $mul.ref(5288, 1)), $mul.ref(0, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p8, $i4);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.6, $p9);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 5424)), $mul.ref(5288, 1)), $mul.ref(8, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p14, $i10);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} qxl_io_memslot_add($p0, $i17);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    return;
}



const qxl_io_memslot_add: ref;

axiom qxl_io_memslot_add == $sub.ref(0, 686916);

procedure qxl_io_memslot_add($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_io_memslot_add($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} {:cexpr "qxl_io_memslot_add:arg:id"} boogie_si_record_i8($i1);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i2 := $M.42;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} wait_for_io_cmd($p0, $i6, 17);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} qxl_io_log.ref.ref.i32($p0, .str.47, $i4);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wait_for_io_cmd: ref;

axiom wait_for_io_cmd == $sub.ref(0, 687948);

procedure wait_for_io_cmd($p0: ref, $i1: i8, $i2: i64);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation wait_for_io_cmd($p0: ref, $i1: i8, $i2: i64)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} {:cexpr "wait_for_io_cmd:arg:val"} boogie_si_record_i8($i1);
    call {:si_unique_call 1579} {:cexpr "wait_for_io_cmd:arg:port"} boogie_si_record_i64($i2);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i6 := wait_for_io_cmd_loop_$bb1($p0, $i1, $i2, $i3, $i4, $i5, $i6);
    goto $bb1_last;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i5 := wait_for_io_cmd_user($p0, $i4, $i2, 0);
    call {:si_unique_call 1581} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 512));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2_dummy;

  $bb2_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_6397;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 688980);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    return;
}



const qxl_client_monitors_config_work_func: ref;

axiom qxl_client_monitors_config_work_func == $sub.ref(0, 690012);

procedure qxl_client_monitors_config_work_func($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_client_monitors_config_work_func($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 3832), 5336));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} qxl_display_read_client_monitors_config($p2);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 691044);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p2, $i1);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    return;
}



const drm_irq_install: ref;

axiom drm_irq_install == $sub.ref(0, 692076);

procedure drm_irq_install($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_irq_install($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1584} {:cexpr "drm_irq_install:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_display_read_client_monitors_config: ref;

axiom qxl_display_read_client_monitors_config == $sub.ref(0, 693108);

procedure qxl_display_read_client_monitors_config($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_display_read_client_monitors_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i3 := qxl_display_copy_rom_client_monitors_config($p0);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    call {:si_unique_call 1588} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} drm_modeset_lock_all($p2);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} qxl_update_offset_props($p0);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} drm_modeset_unlock_all($p2);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i9 := drm_helper_hpd_irq_event($p8);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1596} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} drm_kms_helper_hotplug_event($p15);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := qxl_display_read_client_monitors_config_loop_$bb4($p0, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} qxl_io_log.ref.ref($p0, .str.2);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i5 := qxl_display_copy_rom_client_monitors_config($p0);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    call {:si_unique_call 1591} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_display_copy_rom_client_monitors_config: ref;

axiom qxl_display_copy_rom_client_monitors_config == $sub.ref(0, 694140);

procedure qxl_display_copy_rom_client_monitors_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_display_copy_rom_client_monitors_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i45: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i1;
  var $i65: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(0, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.6, $p4);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 1598} {:cexpr "num_monitors"} boogie_si_record_i32($i6);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1160)), $mul.ref(132, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i11 := crc32_le(0, $p10, 1028);
    call {:si_unique_call 1600} {:cexpr "crc"} boogie_si_record_i32($i11);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1160)), $mul.ref(128, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $i11);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.6, $p24);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, $i6);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(0, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.6, $p49);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    call {:si_unique_call 1604} {:cexpr "num_monitors"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    $i45 := $i51;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} qxl_alloc_client_monitors_config($p0, $i45);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.6, $p54);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p58, $i55);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.6, $p59);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.6, $p61);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, 0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb14;

  $bb14:
    call $p66, $p67, $p69, $p70, $i71, $p73, $p74, $p75, $p76, $i77, $p79, $i80, $p81, $p82, $i83, $p84, $p85, $i86, $p87, $i88, $i89, $p90, $p91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $p109, $i110, $p111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i65 := qxl_display_copy_rom_client_monitors_config_loop_$bb14($p0, $p59, $p66, $p67, $p69, $p70, $i71, $p73, $p74, $p75, $p76, $i77, $p79, $i80, $p81, $p82, $i83, $p84, $p85, $i86, $p87, $i88, $i89, $p90, $p91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $p109, $i110, $p111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $i65);
    goto $bb14_last;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p67, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(4, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i65);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i65);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, $i80);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.6, $p82);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p84, $i83);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(12, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i86, $i88);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, $i89);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(8, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p91);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p70, $mul.ref($i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.6, $p93);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i92, $i94);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p96, $i95);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(4, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p97, 0);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(0, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p98, $i65);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(24, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p99, 0);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.6, drm_debug);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 4);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 1609} {:cexpr "tmp___0"} boogie_si_record_i64($i105);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i65, 1);
    call {:si_unique_call 1611} {:cexpr "i"} boogie_si_record_i32($i115);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p59);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.6, $p117);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i119, $i115);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i120 == 1);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i115;
    goto $bb19_dummy;

  $bb16:
    assume $i106 == 1;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.6, $p107);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.6, $p109);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.6, $p111);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p76, $mul.ref($i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.6, $p113);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32(.str.109, .str.111, $i108, $i110, $i112, $i114);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, drm_debug);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 4);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1603} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.6, $p42);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    call {:si_unique_call 1606} {:cexpr "num_monitors"} boogie_si_record_i32($i44);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.6, $p37);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} drm_ut_debug_printk.ref.ref.i32.i32(.str.109, .str.110, $i39, $i6);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(128, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} qxl_io_log.ref.ref.i32.i64.i32($p0, .str.108, $i11, 1028, $i20);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6530;
}



const drm_modeset_lock_all: ref;

axiom drm_modeset_lock_all == $sub.ref(0, 695172);

procedure drm_modeset_lock_all($p0: ref);
  free requires assertsPassed;



implementation drm_modeset_lock_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    return;
}



const qxl_update_offset_props: ref;

axiom qxl_update_offset_props == $sub.ref(0, 696204);

procedure qxl_update_offset_props($p0: ref);
  free requires assertsPassed;



implementation qxl_update_offset_props($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p15: ref;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(936, 1)), $mul.ref(0, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 936));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 936)), $mul.ref(24, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(936, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i10, $i13);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p15 := $p8;
    goto $bb4;

  $bb4:
    call $p16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p26, $p28, $p29, $p30, $i31, $i32, $p34, $p36, $p37, $p38, $i39, $i40, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p15, vslice_dummy_var_151, vslice_dummy_var_152 := qxl_update_offset_props_loop_$bb4($p0, $p2, $i13, $p16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p26, $p28, $p29, $p30, $i31, $i32, $p34, $p36, $p37, $p38, $i39, $i40, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p15, vslice_dummy_var_151, vslice_dummy_var_152);
    goto $bb4_last;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 936)), $mul.ref(40, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1768, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref($i24, 28)), $mul.ref(16, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_151 := drm_object_property_set_value($p26, $p29, $i32);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 936)), $mul.ref(40, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1776, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p21, $mul.ref($i24, 28)), $mul.ref(20, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_152 := drm_object_property_set_value($p34, $p37, $i40);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 936)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 24), 936));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 24), 936)), $mul.ref(24, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i13);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i49 == 1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p46;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6617;
}



const drm_modeset_unlock_all: ref;

axiom drm_modeset_unlock_all == $sub.ref(0, 697236);

procedure drm_modeset_unlock_all($p0: ref);
  free requires assertsPassed;



implementation drm_modeset_unlock_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    return;
}



const drm_helper_hpd_irq_event: ref;

axiom drm_helper_hpd_irq_event == $sub.ref(0, 698268);

procedure drm_helper_hpd_irq_event($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation drm_helper_hpd_irq_event($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1614} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1615} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_kms_helper_hotplug_event: ref;

axiom drm_kms_helper_hotplug_event == $sub.ref(0, 699300);

procedure drm_kms_helper_hotplug_event($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_hotplug_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    return;
}



const drm_object_property_set_value: ref;

axiom drm_object_property_set_value == $sub.ref(0, 700332);

procedure drm_object_property_set_value($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation drm_object_property_set_value($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1616} {:cexpr "drm_object_property_set_value:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1617} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 701364);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1619} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1620} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1622} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_alloc_client_monitors_config: ref;

axiom qxl_alloc_client_monitors_config == $sub.ref(0, 702396);

procedure qxl_alloc_client_monitors_config($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_alloc_client_monitors_config($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} {:cexpr "qxl_alloc_client_monitors_config:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p33, $i30);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i1);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 28);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 4);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p23 := kmalloc($i22, 208);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, $p23);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} qxl_io_log.ref.ref.ref.i32($p0, .str, .str.1, $i1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.6, $p8);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32($i10, $i1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} kfree($p14);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, $0.ref);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const qxl_ring_init_hdr: ref;

axiom qxl_ring_init_hdr == $sub.ref(0, 703428);

procedure qxl_ring_init_hdr($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ring_init_hdr($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p6, $i2);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    return;
}



const qxl_ttm_init: ref;

axiom qxl_ttm_init == $sub.ref(0, 704460);

procedure qxl_ttm_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_ttm_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i51: i32;
  var $i52: i1;
  var $i3: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $i1 := qxl_ttm_global_init($p0);
    call {:si_unique_call 1628} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 3320)), $mul.ref(80, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1000)), $mul.ref(48, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $i18 := ttm_bo_device_init($p5, $p11, qxl_bo_driver, $p17, 1048576, 0);
    call {:si_unique_call 1630} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1160)), $mul.ref(44, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 4096);
    call {:si_unique_call 1632} {:cexpr "num_io_pages"} boogie_si_record_i32($i24);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i24);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i28 := ttm_bo_init_mm($p26, 2, $i27);
    call {:si_unique_call 1634} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.6, $p32);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i34 := $udiv.i64($i33, 4096);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $i35 := ttm_bo_init_mm($p31, 3, $i34);
    call {:si_unique_call 1637} {:cexpr "r"} boogie_si_record_i32($i35);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.6, $p37);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i40 := $udiv.i32($i39, 1048576);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_153 := printk.ref.i32(.str.16, $i40);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i24);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i43 := $mul.i64($i42, 4096);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i44 := $udiv.i64($i43, 1048576);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_154 := printk.ref.i64(.str.17, $i44);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(56, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.6, $p46);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i49 := $udiv.i32($i48, 1048576);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} vslice_dummy_var_155 := printk.ref.i32(.str.18, $i49);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i51 := qxl_ttm_debugfs_init($p0);
    call {:si_unique_call 1643} {:cexpr "r"} boogie_si_record_i32($i51);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} drm_err.ref(.str.19);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i3 := $i51;
    goto $bb3;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} drm_err.ref(.str.15);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i3 := $i35;
    goto $bb3;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} drm_err.ref(.str.14);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i3 := $i28;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} drm_err.ref.i32(.str.13, $i18);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i3 := $i18;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const qxl_ttm_global_init: ref;

axiom qxl_ttm_global_init == $sub.ref(0, 705492);

procedure qxl_ttm_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_global_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p32: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p2, 0);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1));
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, 0);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p6, 504);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, qxl_ttm_mem_global_init);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, qxl_ttm_mem_global_release);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $i9 := drm_global_item_ref($p4);
    call {:si_unique_call 1646} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p19, $p15);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, 1);
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p24, 592);
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, ttm_bo_global_init);
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, ttm_bo_global_release);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i27 := drm_global_item_ref($p22);
    call {:si_unique_call 1649} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(88, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 1);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} drm_err.ref(.str.151);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} drm_global_item_unref($p30);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} drm_err.ref(.str.150);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const ttm_bo_device_init: ref;

axiom ttm_bo_device_init == $sub.ref(0, 706524);

procedure ttm_bo_device_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i1) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_device_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i1) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1652} {:cexpr "ttm_bo_device_init:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 1653} {:cexpr "ttm_bo_device_init:arg:arg5"} boogie_si_record_i1($i5);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1654} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1655} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ttm_bo_init_mm: ref;

axiom ttm_bo_init_mm == $sub.ref(0, 707556);

procedure ttm_bo_init_mm($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_init_mm($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} {:cexpr "ttm_bo_init_mm:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1657} {:cexpr "ttm_bo_init_mm:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1658} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1659} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_ttm_debugfs_init: ref;

axiom qxl_ttm_debugfs_init == $sub.ref(0, 708588);

procedure qxl_ttm_debugfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_ttm_debugfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} vslice_dummy_var_157 := sprintf.ref.ref($p5, .str.153);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p2);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, qxl_mm_dump_table);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 0);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(1 == 1);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(3, 256)), $mul.ref(48, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, $p27);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(1, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} vslice_dummy_var_159 := sprintf.ref.ref($p33, .str.153);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p41, $p39);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, qxl_mm_dump_table);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p45, 0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb14, $bb15;

  $bb15:
    assume !(0 == 1);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(3, 256)), $mul.ref(48, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, $p51);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $i31 := qxl_debugfs_add_files($p0, $p30, 2);
    call {:si_unique_call 1665} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb14:
    assume 0 == 1;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(2, 256)), $mul.ref(48, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p61, $p59);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume 0 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_158 := sprintf.ref.ref($p36, .str.152);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1)), $mul.ref(32, 1)), $mul.ref(2, 256)), $mul.ref(48, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, $p19);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} vslice_dummy_var_156 := sprintf.ref.ref($p3, .str.152);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 709620);

procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const qxl_mm_dump_table: ref;

axiom qxl_mm_dump_table == $sub.ref(0, 710652);

procedure qxl_mm_dump_table($p0: ref, $p1: ref) returns ($r: i32);



const qxl_debugfs_add_files: ref;

axiom qxl_debugfs_add_files == $sub.ref(0, 711684);

procedure qxl_debugfs_add_files($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_debugfs_add_files($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i6: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i15: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} {:cexpr "qxl_debugfs_add_files:arg:nfiles"} boogie_si_record_i32($i2);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    call {:si_unique_call 1670} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 32);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i25, 16)), $mul.ref(0, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p28, $p1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i31, 16)), $mul.ref(8, 1));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, $i2);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(4424, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i21);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 3320)), $mul.ref(48, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.6, $p42);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 3320)), $mul.ref(48, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} vslice_dummy_var_160 := drm_debugfs_create_files($p1, $i2, $p41, $p45);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 3320)), $mul.ref(56, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 3320)), $mul.ref(56, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_161 := drm_debugfs_create_files($p1, $i2, $p52, $p56);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} drm_err.ref(.str.50);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} drm_err.ref(.str.51);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p10, $p11, $i12, $i13, $i14, $i16, $i17, $i18, $i6 := qxl_debugfs_add_files_loop_$bb4($p0, $p1, $p3, $i7, $p10, $p11, $i12, $i13, $i14, $i16, $i17, $i18, $i6);
    goto $bb4_last;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref($i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i12, $i13);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i6, 1);
    call {:si_unique_call 1669} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p3);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, $i16);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6900;
}



const drm_mm_dump_table: ref;

axiom drm_mm_dump_table == $sub.ref(0, 712716);

procedure drm_mm_dump_table($p0: ref, $p1: ref) returns ($r: i32);



const qxl_ttm_mem_global_init: ref;

axiom qxl_ttm_mem_global_init == $sub.ref(0, 713748);

procedure qxl_ttm_mem_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_ttm_mem_global_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $i4 := ttm_mem_global_init($p3);
    call {:si_unique_call 1676} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qxl_ttm_mem_global_release: ref;

axiom qxl_ttm_mem_global_release == $sub.ref(0, 714780);

procedure qxl_ttm_mem_global_release($p0: ref);
  free requires assertsPassed;



implementation qxl_ttm_mem_global_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ttm_mem_global_release($p3);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    return;
}



const drm_global_item_ref: ref;

axiom drm_global_item_ref == $sub.ref(0, 715812);

procedure drm_global_item_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_global_item_ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1678} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1679} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_bo_global_init: ref;

axiom ttm_bo_global_init == $sub.ref(0, 716844);

procedure ttm_bo_global_init($p0: ref) returns ($r: i32);



const ttm_bo_global_release: ref;

axiom ttm_bo_global_release == $sub.ref(0, 717876);

procedure ttm_bo_global_release($p0: ref);



const ttm_mem_global_release: ref;

axiom ttm_mem_global_release == $sub.ref(0, 718908);

procedure ttm_mem_global_release($p0: ref);
  free requires assertsPassed;



implementation ttm_mem_global_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    return;
}



const ttm_mem_global_init: ref;

axiom ttm_mem_global_init == $sub.ref(0, 719940);

procedure ttm_mem_global_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_mem_global_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_dump_mode: ref;

axiom qxl_dump_mode == $sub.ref(0, 720972);

procedure qxl_dump_mode($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_dump_mode($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1683} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32(.str.106, .str.107, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 722004);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1686} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p2 := external_alloc();
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ioremap_wc: ref;

axiom ioremap_wc == $sub.ref(0, 723036);

procedure ioremap_wc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_wc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} {:cexpr "ioremap_wc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1689} {:cexpr "ioremap_wc:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $p2 := external_alloc();
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_read: ref;

axiom drm_read == $sub.ref(0, 724068);

procedure drm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation drm_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1691} {:cexpr "drm_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const drm_poll: ref;

axiom drm_poll == $sub.ref(0, 725100);

procedure drm_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1694} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1695} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_ioctl: ref;

axiom drm_ioctl == $sub.ref(0, 726132);

procedure drm_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation drm_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} {:cexpr "drm_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1697} {:cexpr "drm_ioctl:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1698} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1699} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_mmap: ref;

axiom qxl_mmap == $sub.ref(0, 727164);

procedure qxl_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.59, $M.6, $CurrAddr;



implementation qxl_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i12: i32;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i3, 1048575);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1701} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 744)), $mul.ref(40, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $M.42;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i33 := ttm_bo_mmap($p0, $p1, $p32);
    call {:si_unique_call 1706} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 1708} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $M.59;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 1710} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, qxl_ttm_vm_ops);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $M.59 := $p47;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p48 := $M.59;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.6;
    cmdloc_dummy_var_42 := $M.6;
    call {:si_unique_call 1711} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, qxl_ttm_vm_ops, $p49, 88, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_43;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(16, 1)), qxl_ttm_fault);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i12 := $i33;
    goto $bb3;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.6, $p29);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} qxl_io_log.ref.ref.ref.ref.i64($p22, .str.12, .str.10, $p28, $i30);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} drm_err.ref(.str.11);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.6, $p9);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} vslice_dummy_var_162 := printk.ref.ref.i64(.str.9, .str.10, $i10);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const drm_open: ref;

axiom drm_open == $sub.ref(0, 728196);

procedure drm_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_release: ref;

axiom drm_release == $sub.ref(0, 729228);

procedure drm_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1714} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1715} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ttm_bo_mmap: ref;

axiom ttm_bo_mmap == $sub.ref(0, 730260);

procedure ttm_bo_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1716} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1717} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_ttm_fault: ref;

axiom qxl_ttm_fault == $sub.ref(0, 731292);

procedure qxl_ttm_fault($p0: ref, $p1: ref) returns ($r: i32);



const qxl_pci_probe: ref;

axiom qxl_pci_probe == $sub.ref(0, 732324);

procedure qxl_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 3);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $i7 := drm_get_pci_dev($p0, $p1, qxl_driver);
    call {:si_unique_call 1720} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} drm_err.ref(.str.77);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const qxl_pci_remove: ref;

axiom qxl_pci_remove == $sub.ref(0, 733356);

procedure qxl_pci_remove($p0: ref);
  free requires assertsPassed;



implementation qxl_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} drm_put_dev($p2);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 734388);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_put_dev: ref;

axiom drm_put_dev == $sub.ref(0, 735420);

procedure drm_put_dev($p0: ref);
  free requires assertsPassed;



implementation drm_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 736452);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const drm_get_pci_dev: ref;

axiom drm_get_pci_dev == $sub.ref(0, 737484);

procedure drm_get_pci_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_get_pci_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1724} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_pm_suspend: ref;

axiom qxl_pm_suspend == $sub.ref(0, 738516);

procedure qxl_pm_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.46, $M.58, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_pm_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i5 := qxl_drm_freeze($p4);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    call {:si_unique_call 1728} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} pci_disable_device($p2);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_163 := pci_set_power_state($p2, 3);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const qxl_pm_resume: ref;

axiom qxl_pm_resume == $sub.ref(0, 739548);

procedure qxl_pm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.40, $M.57, $M.41, $CurrAddr, $M.39, assertsPassed;



implementation qxl_pm_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i8: i32;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_164 := pci_set_power_state($p2, 0);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} pci_restore_state($p2);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $i6 := pci_enable_device($p2);
    call {:si_unique_call 1735} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $i9 := qxl_drm_resume($p4, 0);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    call {:si_unique_call 1737} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;
}



const qxl_pm_freeze: ref;

axiom qxl_pm_freeze == $sub.ref(0, 740580);

procedure qxl_pm_freeze($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.46, $M.58, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_pm_freeze($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i5 := qxl_drm_freeze($p4);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    call {:si_unique_call 1740} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const qxl_pm_thaw: ref;

axiom qxl_pm_thaw == $sub.ref(0, 741612);

procedure qxl_pm_thaw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.40, $M.57, $M.41, $CurrAddr, $M.39, assertsPassed;



implementation qxl_pm_thaw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i5 := qxl_drm_resume($p4, 1);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    call {:si_unique_call 1743} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const qxl_pm_restore: ref;

axiom qxl_pm_restore == $sub.ref(0, 742644);

procedure qxl_pm_restore($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.40, $M.57, $M.41, $CurrAddr, $M.39, assertsPassed;



implementation qxl_pm_restore($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2984));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} qxl_io_reset($p7);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $i8 := qxl_drm_resume($p4, 0);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    call {:si_unique_call 1747} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const qxl_drm_resume: ref;

axiom qxl_drm_resume == $sub.ref(0, 743676);

procedure qxl_drm_resume($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.32, $M.40, $M.57, $M.41, $CurrAddr, $M.39, assertsPassed;



implementation qxl_drm_resume($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1748} {:cexpr "qxl_drm_resume:arg:thaw"} boogie_si_record_i1($i1);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 5424)), $mul.ref(8, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 39);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i2);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} qxl_reinit_memslots($p5);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} qxl_ring_init_hdr($p11);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} vslice_dummy_var_165 := qxl_create_monitors_object($p5);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} drm_helper_resume_force_mode($p0);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} console_lock();
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} qxl_fbdev_set_suspend($p5, 0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} console_unlock();
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} drm_kms_helper_poll_enable($p0);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_reinit_memslots: ref;

axiom qxl_reinit_memslots == $sub.ref(0, 744708);

procedure qxl_reinit_memslots($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_reinit_memslots($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.6, $p1);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3105, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i64($i7);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 32));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} setup_hw_slot($p0, $i3, $p9);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3096, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3106, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p14, $mul.ref($i17, 32));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} setup_hw_slot($p0, $i12, $p18);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    return;
}



const drm_helper_resume_force_mode: ref;

axiom drm_helper_resume_force_mode == $sub.ref(0, 745740);

procedure drm_helper_resume_force_mode($p0: ref);
  free requires assertsPassed;



implementation drm_helper_resume_force_mode($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    return;
}



const console_lock: ref;

axiom console_lock == $sub.ref(0, 746772);

procedure console_lock();
  free requires assertsPassed;



implementation console_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fbdev_set_suspend: ref;

axiom qxl_fbdev_set_suspend == $sub.ref(0, 747804);

procedure qxl_fbdev_set_suspend($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_fbdev_set_suspend($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} {:cexpr "qxl_fbdev_set_suspend:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(24, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 552)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} fb_set_suspend($p7, $i1);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    return;
}



const console_unlock: ref;

axiom console_unlock == $sub.ref(0, 748836);

procedure console_unlock();
  free requires assertsPassed;



implementation console_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    return;
}



const drm_kms_helper_poll_enable: ref;

axiom drm_kms_helper_poll_enable == $sub.ref(0, 749868);

procedure drm_kms_helper_poll_enable($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_poll_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    return;
}



const fb_set_suspend: ref;

axiom fb_set_suspend == $sub.ref(0, 750900);

procedure fb_set_suspend($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fb_set_suspend($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} {:cexpr "fb_set_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    return;
}



const qxl_drm_freeze: ref;

axiom qxl_drm_freeze == $sub.ref(0, 751932);

procedure qxl_drm_freeze($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.46, $M.58, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_drm_freeze($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p18: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i1;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(1144, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} drm_kms_helper_poll_disable($p0);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} console_lock();
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} qxl_fbdev_set_suspend($p5, 1);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} console_unlock();
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1008, 1)), $mul.ref(0, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 16), 1160));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1160)), $mul.ref(16, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1008, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i13, $i16);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} vslice_dummy_var_166 := qxl_destroy_monitors_object($p5);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} vslice_dummy_var_167 := qxl_surf_evict($p5);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} vslice_dummy_var_168 := qxl_vram_evict($p5);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3064, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $i40 := qxl_check_idle($p39);
    call {:si_unique_call 1771} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3056, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $i47 := qxl_check_idle($p46);
    call {:si_unique_call 1775} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_170 := pci_save_state($p2);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call $p50, $i51, $i52, vslice_dummy_var_169 := qxl_drm_freeze_loop_$bb23($p5, $p45, $p50, $i51, $i52, vslice_dummy_var_169);
    goto $bb23_last;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_169 := qxl_queue_garbage_collect($p5, 1);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p45);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $i51 := qxl_check_idle($p50);
    call {:si_unique_call 1778} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i52 == 1);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb25_dummy;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p42, $i43, $i44 := qxl_drm_freeze_loop_$bb15($p38, $p42, $i43, $i44);
    goto $bb15_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p38);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i43 := qxl_check_idle($p42);
    call {:si_unique_call 1773} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb17_dummy;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p18 := $p11;
    goto $bb4;

  $bb4:
    call $p19, $p20, $p21, $p22, $i23, $i24, $p25, $p26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p18 := qxl_drm_freeze_loop_$bb4($i16, $p19, $p20, $p21, $p22, $i23, $i24, $p25, $p26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p18);
    goto $bb4_last;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(744, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1160)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 16), 1160));
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 16), 1160)), $mul.ref(16, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i16);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p31;
    goto $bb9_dummy;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    call {:si_unique_call 1766} devirtbounce.15($p26, $p18);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7279;
}



const drm_kms_helper_poll_disable: ref;

axiom drm_kms_helper_poll_disable == $sub.ref(0, 752964);

procedure drm_kms_helper_poll_disable($p0: ref);
  free requires assertsPassed;



implementation drm_kms_helper_poll_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    return;
}



const qxl_surf_evict: ref;

axiom qxl_surf_evict == $sub.ref(0, 753996);

procedure qxl_surf_evict($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_surf_evict($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $i3 := ttm_bo_evict_mm($p2, 3);
    call {:si_unique_call 1781} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_vram_evict: ref;

axiom qxl_vram_evict == $sub.ref(0, 755028);

procedure qxl_vram_evict($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_vram_evict($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(136, 1)), $mul.ref(96, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} $i3 := ttm_bo_evict_mm($p2, 2);
    call {:si_unique_call 1783} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 756060);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1784} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1785} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_bo_evict_mm: ref;

axiom ttm_bo_evict_mm == $sub.ref(0, 757092);

procedure ttm_bo_evict_mm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_evict_mm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} {:cexpr "ttm_bo_evict_mm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1787} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1788} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 758124);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1789} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1790} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1791} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 759156);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 760188);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1792} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 761220);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    return;
}



const qxl_user_framebuffer_destroy: ref;

axiom qxl_user_framebuffer_destroy == $sub.ref(0, 762252);

procedure qxl_user_framebuffer_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_user_framebuffer_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} drm_framebuffer_cleanup($p0);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} kfree($p8);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} drm_gem_object_unreference_unlocked($p7);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const qxl_framebuffer_surface_dirty: ref;

axiom qxl_framebuffer_surface_dirty == $sub.ref(0, 763284);

procedure qxl_framebuffer_surface_dirty($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.39, $M.41, $M.46, assertsPassed, $M.58, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.57;



implementation qxl_framebuffer_surface_dirty($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p46: ref;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1798} {:cexpr "qxl_framebuffer_surface_dirty:arg:flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 1799} {:cexpr "qxl_framebuffer_surface_dirty:arg:color"} boogie_si_record_i32($i3);
    call {:si_unique_call 1800} {:cexpr "qxl_framebuffer_surface_dirty:arg:num_clips"} boogie_si_record_i32($i5);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} drm_modeset_lock_all($p15);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} drm_modeset_unlock_all($p24);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i5, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i2, 1);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i44, $i45 := $i5, 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p4, $i44, $i45;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} qxl_draw_dirty_fb($p13, $p7, $p19, $i2, $i3, $p38, $i39, $i40);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} drm_modeset_unlock_all($p47);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i5, 2);
    call {:si_unique_call 1805} {:cexpr "num_clips"} boogie_si_record_i32($i43);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i43, 2;
    goto $bb10;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p26, 0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.6, $p27);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p29, $i28);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(120, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p33, $i32);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(124, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p37, $i36);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p38, $i39, $i40 := $p6, 1, 1;
    goto $bb7;
}



const qxl_draw_dirty_fb: ref;

axiom qxl_draw_dirty_fb == $sub.ref(0, 764316);

procedure qxl_draw_dirty_fb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32, $i7: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $M.35, $M.36, $M.39, $M.41, $CurrAddr, $M.46, assertsPassed, $M.58, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.57;



implementation qxl_draw_dirty_fb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref, $i6: i32, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i1;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $i70: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i1;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i64;
  var $p174: ref;
  var $p175: ref;
  var $i176: i16;
  var $i177: i32;
  var $i178: i64;
  var $p180: ref;
  var $p181: ref;
  var $i182: i16;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $p187: ref;
  var $i188: i16;
  var $i189: i32;
  var $i190: i64;
  var $p192: ref;
  var $i193: i32;
  var $i194: i64;
  var $p195: ref;
  var $i196: i1;
  var $i167: i32;
  var $p168: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $i96: i32;
  var $i201: i1;
  var $p202: ref;
  var $i88: i32;
  var $p203: ref;
  var $i84: i32;
  var $i80: i32;
  var $i204: i1;
  var $p205: ref;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1811} {:cexpr "qxl_draw_dirty_fb:arg:flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 1812} {:cexpr "qxl_draw_dirty_fb:arg:color"} boogie_si_record_i32($i4);
    call {:si_unique_call 1813} {:cexpr "qxl_draw_dirty_fb:arg:num_clips"} boogie_si_record_i32($i6);
    call {:si_unique_call 1814} {:cexpr "qxl_draw_dirty_fb:arg:inc"} boogie_si_record_i32($i7);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    call {:si_unique_call 1815} {:cexpr "stride"} boogie_si_record_i32($i16);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(132, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    call {:si_unique_call 1816} {:cexpr "depth"} boogie_si_record_i32($i19);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i20 := alloc_drawable($p0, $p10);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    call {:si_unique_call 1818} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.6, $p22);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    call {:si_unique_call 1819} {:cexpr "left"} boogie_si_record_i32($i24);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.6, $p25);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    call {:si_unique_call 1820} {:cexpr "right"} boogie_si_record_i32($i27);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.6, $p28);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    call {:si_unique_call 1821} {:cexpr "top"} boogie_si_record_i32($i30);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.6, $p31);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    call {:si_unique_call 1822} {:cexpr "bottom"} boogie_si_record_i32($i33);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i7);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p5, $mul.ref($i34, 8));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32(1, $i6);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := $i24, $i27, $i30, $i33;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i38, $i37);
    call {:si_unique_call 1828} {:cexpr "width"} boogie_si_record_i32($i75);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i40, $i39);
    call {:si_unique_call 1829} {:cexpr "height"} boogie_si_record_i32($i76);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p10);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i78 := alloc_clips($p0, $p77, $i6, $p11);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 1831} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.6, $p10);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $i82 := qxl_image_alloc_objects($p0, $p81, $p12, $i76, $i16);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 1833} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p10);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i86 := qxl_release_reserve_list($p85, 1);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    call {:si_unique_call 1836} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, $i37);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, $i38);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i39);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, $i40);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.6, $p10);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i94 := make_drawable($p0, 0, 3, $p8, $p93);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 1839} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $i97 := qxl_bo_kmap($p2, $p9);
    call {:si_unique_call 1841} {:cexpr "ret"} boogie_si_record_i32($i97);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.6, $p10);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.6, $p12);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.40, $p9);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $i102 := qxl_image_init($p0, $p99, $p100, $p101, $i37, $i39, $i75, $i76, $i19, $i16);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    call {:si_unique_call 1843} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} qxl_bo_kunmap($p2);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p11);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} $p105 := drawable_set_clipping($p0, $u2, $i6, $p104);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p10);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $p109 := qxl_release_map($p0, $p108);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, 1);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.6, $p11);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i114 := qxl_bo_physical_address($p0, $p113, 0);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p116, $i114);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p118, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p120, 0);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p124, $i76);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p128, 0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p130, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p132, $i75);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p135, 8);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 56)), $mul.ref(26, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p138, 0);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p140, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, 0);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p144, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p147, 0);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p149, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p152, 0);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p154, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p156, 0);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.6, $p12);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.6, $p158);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $i160 := qxl_bo_physical_address($p0, $p159, 0);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(128, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p163, $i160);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.6, $p10);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p110, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} qxl_release_unmap($p0, $p164, $p165);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i166 := $ult.i32(0, $i6);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.6, $p11);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} qxl_bo_kunmap($p197);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.6, $p10);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} vslice_dummy_var_171 := qxl_push_command_ring_release($p0, $p198, 1, 0);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.6, $p10);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} qxl_release_fence_buffer_objects($p200);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i96 := $i102;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i96, 0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i88 := $i96;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.6, $p12);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} qxl_image_free_objects($p0, $p203);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i84 := $i88;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} qxl_bo_unref($p11);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i80 := $i84;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i80, 0);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb61:
    assume $i204 == 1;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.6, $p10);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} free_drawable($p0, $p205);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i201 == 1;
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.6, $p10);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} qxl_release_backoff_reserve_list($p202);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i166 == 1;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i167, $p168 := 0, $p5;
    goto $bb53;

  $bb53:
    call $p169, $i170, $i171, $i172, $p174, $p175, $i176, $i177, $i178, $p180, $p181, $i182, $i183, $i184, $p186, $p187, $i188, $i189, $i190, $p192, $i193, $i194, $p195, $i196, $i167, $p168 := qxl_draw_dirty_fb_loop_$bb53($i6, $i7, $p105, $p169, $i170, $i171, $i172, $p174, $p175, $i176, $i177, $i178, $p180, $p181, $i182, $i183, $i184, $p186, $p187, $i188, $i189, $i190, $p192, $i193, $i194, $p195, $i196, $i167, $p168);
    goto $bb53_last;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.6, $p169);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i167);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p105, $mul.ref($i172, 16)), $mul.ref(4, 1));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p174, $i171);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i176 := $load.i16($M.6, $p175);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i167);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p105, $mul.ref($i178, 16)), $mul.ref(12, 1));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p180, $i177);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i182 := $load.i16($M.6, $p181);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i183 := $zext.i16.i32($i182);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i167);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p105, $mul.ref($i184, 16)), $mul.ref(0, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p186, $i183);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p168, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.6, $p187);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i188);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i167);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p105, $mul.ref($i190, 16)), $mul.ref(8, 1));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p192, $i189);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i167, 1);
    call {:si_unique_call 1850} {:cexpr "i"} boogie_si_record_i32($i193);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i7);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p168, $mul.ref($i194, 8));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i196 := $ult.i32($i193, $i6);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i196 == 1);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb55:
    assume $i196 == 1;
    assume {:verifier.code 0} true;
    $i167, $p168 := $i193, $p195;
    goto $bb55_dummy;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i107 == 1;
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i96 := $i102;
    goto $bb39;

  $bb44:
    assume $i103 == 1;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i96 := $i102;
    goto $bb39;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i98 == 1;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i96 := $i97;
    goto $bb39;

  $bb37:
    assume $i95 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i96 := $i94;
    goto $bb39;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i87 == 1;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i88 := $i86;
    goto $bb35;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i83 == 1;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    goto $bb31;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i79 == 1;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb27;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i41, $i42, $i43, $i44, $i45, $p46 := $i33, $i30, $i27, $i24, 1, $p35;
    goto $bb8;

  $bb8:
    call $p47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $i41, $i42, $i43, $i44, $i45, $p46, $i71, $i72, $i73, $i74 := qxl_draw_dirty_fb_loop_$bb8($i6, $i7, $p47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $i41, $i42, $i43, $i44, $i45, $p46, $i71, $i72, $i73, $i74);
    goto $bb8_last;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.6, $p47);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    call {:si_unique_call 1823} {:cexpr "__min2"} boogie_si_record_i32($i49);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i44, $i49);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.6, $p52);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    call {:si_unique_call 1824} {:cexpr "__max2"} boogie_si_record_i32($i54);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i43, $i54);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.6, $p57);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    call {:si_unique_call 1825} {:cexpr "__min2___0"} boogie_si_record_i32($i59);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i42, $i59);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.6, $p62);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    call {:si_unique_call 1826} {:cexpr "__max2___0"} boogie_si_record_i32($i64);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i41, $i64);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i45, 1);
    call {:si_unique_call 1827} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i7);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p46, $mul.ref($i68, 8));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i67, $i6);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i71, $i72, $i73, $i74 := $i51, $i56, $i61, $i66;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := $i71, $i72, $i73, $i74;
    goto $bb7;

  $bb22:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i41, $i42, $i43, $i44, $i45, $p46 := $i66, $i61, $i56, $i51, $i67, $p69;
    goto $bb22_dummy;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i66 := $i41;
    goto $bb21;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i61 := $i42;
    goto $bb18;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i56 := $i43;
    goto $bb15;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i51 := $i44;
    goto $bb12;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb55_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7460;
}



const alloc_clips: ref;

axiom alloc_clips == $sub.ref(0, 765348);

procedure alloc_clips($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.46, assertsPassed, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation alloc_clips($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} {:cexpr "alloc_clips:arg:num_clips"} boogie_si_record_i32($i2);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 16);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 24);
    call {:si_unique_call 1857} {:cexpr "size"} boogie_si_record_i32($i5);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $i7 := qxl_alloc_bo_reserved($p0, $p1, $i6, $p3);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    call {:si_unique_call 1859} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const drawable_set_clipping: ref;

axiom drawable_set_clipping == $sub.ref(0, 766380);

procedure drawable_set_clipping($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.40, $M.6, $M.41, $CurrAddr;



implementation drawable_set_clipping($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1861} {:cexpr "drawable_set_clipping:arg:num_clips"} boogie_si_record_i32($i2);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $i6 := qxl_bo_kmap($p3, $p5);
    call {:si_unique_call 1863} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.40, $p4);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i2);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.40, $p4);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p13, 0);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.40, $p4);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p16, 0);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i2, 16);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.40, $p4);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $i17);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.40, $p4);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const qxl_user_framebuffer_create: ref;

axiom qxl_user_framebuffer_create == $sub.ref(0, 767412);

procedure qxl_user_framebuffer_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.46, assertsPassed, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_user_framebuffer_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $p6 := drm_gem_object_lookup($p0, $p1, $i5);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $p7 := kmalloc(176, 208);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i12 := qxl_framebuffer_init($p0, $p8, $p2, $p6);
    call {:si_unique_call 1867} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p8);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} kfree($p14);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} drm_gem_object_unreference_unlocked($p6);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const qxl_framebuffer_init: ref;

axiom qxl_framebuffer_init == $sub.ref(0, 768444);

procedure qxl_framebuffer_init($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_framebuffer_init($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, $p3);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $i6 := drm_framebuffer_init($p0, $p5, qxl_fb_funcs);
    call {:si_unique_call 1871} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} drm_helper_mode_fill_fb_struct($p10, $p2);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $0.ref);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb3;
}



const drm_framebuffer_init: ref;

axiom drm_framebuffer_init == $sub.ref(0, 769476);

procedure drm_framebuffer_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_framebuffer_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1873} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1874} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const drm_helper_mode_fill_fb_struct: ref;

axiom drm_helper_mode_fill_fb_struct == $sub.ref(0, 770508);

procedure drm_helper_mode_fill_fb_struct($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_helper_mode_fill_fb_struct($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    return;
}



const qxl_crtc_cursor_set2: ref;

axiom qxl_crtc_cursor_set2 == $sub.ref(0, 771540);

procedure qxl_crtc_cursor_set2($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.57, $M.40, $M.41, $M.39, $CurrAddr, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.35, $M.36, $M.32, $M.63, $M.64, $M.55, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_crtc_cursor_set2($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i16;
  var $p65: ref;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i16;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $i47: i32;
  var $i43: i32;
  var $p125: ref;
  var $i37: i32;
  var $i34: i32;
  var $i29: i32;
  var $i19: i32;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1879} {:cexpr "qxl_crtc_cursor_set2:arg:handle"} boogie_si_record_i32($i2);
    call {:si_unique_call 1880} {:cexpr "qxl_crtc_cursor_set2:arg:width"} boogie_si_record_i32($i3);
    call {:si_unique_call 1881} {:cexpr "qxl_crtc_cursor_set2:arg:height"} boogie_si_record_i32($i4);
    call {:si_unique_call 1882} {:cexpr "qxl_crtc_cursor_set2:arg:hot_x"} boogie_si_record_i32($i5);
    call {:si_unique_call 1883} {:cexpr "qxl_crtc_cursor_set2:arg:hot_y"} boogie_si_record_i32($i6);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, 0);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $p22 := drm_gem_object_lookup($p21, $p1, $i2);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p22);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} $i27 := qxl_bo_reserve($p26, 0);
    call {:si_unique_call 1889} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i30 := qxl_bo_pin($p26, 0, $0.ref);
    call {:si_unique_call 1892} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} qxl_bo_unreserve($p26);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $i32 := qxl_bo_kmap($p26, $p10);
    call {:si_unique_call 1895} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $i35 := qxl_alloc_release_reserved($p15, 150, 2, $p9, $0.ref);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    call {:si_unique_call 1898} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p9);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64(16384);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 42);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $i41 := qxl_alloc_bo_reserved($p15, $p38, $i40, $p8);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    call {:si_unique_call 1901} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p9);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $i45 := qxl_release_reserve_list($p44, 0);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    call {:si_unique_call 1904} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p8);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p7);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $i50 := qxl_bo_kmap($p48, $p49);
    call {:si_unique_call 1907} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.40, $p7);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p54, 0);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.40, $p7);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p57, 0);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.40, $p7);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p60, 64);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.40, $p7);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p63, 64);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i5);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.40, $p7);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p67, $i64);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i6);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.40, $p7);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p71, $i68);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.40, $p7);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p73, 16384);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.40, $p7);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p76, 0);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.40, $p7);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p79, 0);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.40, $p7);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p80, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p82, 16384);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.40, $p7);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.40, $p10);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64(16384);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.6;
    cmdloc_dummy_var_45 := $M.6;
    call {:si_unique_call 1909} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p86, $p87, $i88, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_46;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.6, $p8);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} qxl_bo_kunmap($p89);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} qxl_bo_kunmap($p26);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p9);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $p91 := qxl_release_map($p15, $p90);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p93, 0);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p16, $mul.ref(0, 1176)), $mul.ref(1164, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.6, $p94);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p98, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p100, $i96);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p16, $mul.ref(0, 1176)), $mul.ref(1168, 1));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.6, $p101);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p107, $i103);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p8);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i109 := qxl_bo_physical_address($p15, $p108, 0);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p112, $i109);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p115, 1);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p9);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p92, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} qxl_release_unmap($p15, $p116, $p117);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p9);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} vslice_dummy_var_173 := qxl_push_cursor_ring_release($p15, $p118, 3, 0);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p9);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} qxl_release_fence_buffer_objects($p120);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $i121 := qxl_bo_reserve($p26, 0);
    call {:si_unique_call 1918} {:cexpr "ret"} boogie_si_record_i32($i121);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} drm_gem_object_unreference_unlocked($p22);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} qxl_bo_unref($p8);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i19 := $i121;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i122 == 1;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} vslice_dummy_var_174 := qxl_bo_unpin($p26);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} qxl_bo_unreserve($p26);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i51 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.6, $p9);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} qxl_release_backoff_reserve_list($p124);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i47 := $i50;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} qxl_bo_unref($p8);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i43 := $i47;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.6, $p9);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} qxl_release_free($p15, $p125);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i37 := $i43;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} qxl_bo_kunmap($p26);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} vslice_dummy_var_172 := qxl_bo_unpin($p26);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} drm_gem_object_unreference_unlocked($p22);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i19 := $i29;
    goto $bb3;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb29;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb25;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb21;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb17;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb10;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} drm_err.ref(.str.115);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $i18 := qxl_hide_cursor($p15);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 1885} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const qxl_crtc_cursor_move: ref;

axiom qxl_crtc_cursor_move == $sub.ref(0, 772572);

procedure qxl_crtc_cursor_move($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.40, $CurrAddr, $M.46, assertsPassed, $M.58, $M.41, $M.35, $M.36, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.57;



implementation qxl_crtc_cursor_move($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i12: i32;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1924} {:cexpr "qxl_crtc_cursor_move:arg:x"} boogie_si_record_i32($i1);
    call {:si_unique_call 1925} {:cexpr "qxl_crtc_cursor_move:arg:y"} boogie_si_record_i32($i2);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $i10 := qxl_alloc_release_reserved($p8, 150, 2, $p3, $0.ref);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    call {:si_unique_call 1927} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p3);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i14 := qxl_release_reserve_list($p13, 1);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    call {:si_unique_call 1929} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1164, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i1);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1168, 1));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i2);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p3);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p20 := qxl_release_map($p8, $p19);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 1);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1164, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p28, $i25);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(1168, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p34, $i31);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p3);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} qxl_release_unmap($p8, $p35, $p36);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p3);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} vslice_dummy_var_175 := qxl_push_cursor_ring_release($p8, $p37, 3, 0);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p3);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} qxl_release_fence_buffer_objects($p39);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p3);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} qxl_release_free($p8, $p16);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb3;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  SeqInstr_691:
    assume !assertsPassed;
    return;
}



const qxl_crtc_destroy: ref;

axiom qxl_crtc_destroy == $sub.ref(0, 773604);

procedure qxl_crtc_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_crtc_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} drm_crtc_cleanup($p0);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} kfree($p2);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    return;
}



const drm_crtc_helper_set_config: ref;

axiom drm_crtc_helper_set_config == $sub.ref(0, 774636);

procedure drm_crtc_helper_set_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_crtc_helper_set_config($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1937} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1938} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qxl_crtc_page_flip: ref;

axiom qxl_crtc_page_flip == $sub.ref(0, 775668);

procedure qxl_crtc_page_flip($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.60, $M.40, $M.35, $M.36, $M.39, $M.41, $CurrAddr, $M.46, assertsPassed, $M.58, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55, $M.57;



implementation qxl_crtc_page_flip($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i42: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1940} {:cexpr "qxl_crtc_page_flip:arg:page_flip_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.60, $p14);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p25, 0);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p26, 0);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(120, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p30, $i29);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(124, 1));
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p34, $i33);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $M.60 := $store.ref($M.60, $p37, $p1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 0);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i40 := qxl_bo_reserve($p24, 0);
    call {:si_unique_call 1942} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} qxl_draw_dirty_fb($p9, $p11, $p24, 0, 0, $p4, 1, 1);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p10, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} vslice_dummy_var_176 := drm_vblank_get($p6, $i44);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p2);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p10, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} drm_vblank_put($p6, $i52);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} qxl_bo_unreserve($p24);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} ldv_spin_lock();
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.6, $p48);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} drm_send_vblank_event($p6, $i49, $p2);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 3320)), $mul.ref(1064, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} spin_unlock_irqrestore($p50, $u0);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb3;
}



const drm_vblank_get: ref;

axiom drm_vblank_get == $sub.ref(0, 776700);

procedure drm_vblank_get($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vblank_get($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1950} {:cexpr "drm_vblank_get:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1951} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1952} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_send_vblank_event: ref;

axiom drm_send_vblank_event == $sub.ref(0, 777732);

procedure drm_send_vblank_event($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation drm_send_vblank_event($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} {:cexpr "drm_send_vblank_event:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    return;
}



const drm_vblank_put: ref;

axiom drm_vblank_put == $sub.ref(0, 778764);

procedure drm_vblank_put($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation drm_vblank_put($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} {:cexpr "drm_vblank_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    return;
}



const drm_crtc_cleanup: ref;

axiom drm_crtc_cleanup == $sub.ref(0, 779796);

procedure drm_crtc_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_crtc_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    return;
}



const qxl_push_cursor_ring_release: ref;

axiom qxl_push_cursor_ring_release == $sub.ref(0, 780828);

procedure qxl_push_cursor_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.61, $M.62, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.35, $M.36, $M.55, assertsPassed;



implementation qxl_push_cursor_ring_release($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1956} {:cexpr "qxl_push_cursor_ring_release:arg:type"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 1957} {:cexpr "qxl_push_cursor_ring_release:arg:interruptible"} boogie_si_record_i1($i3);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i2);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(96, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $i19 := qxl_bo_physical_address($p0, $p15, $i18);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p20, $i19);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3072, 1));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i5);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i25 := qxl_ring_push($p22, $p23, $i24);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    call {:si_unique_call 1960} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;
}



const qxl_hide_cursor: ref;

axiom qxl_hide_cursor == $sub.ref(0, 781860);

procedure qxl_hide_cursor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.39, $M.40, $CurrAddr, $M.46, $M.61, $M.62, assertsPassed, $M.58, $M.41, $M.35, $M.36, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_hide_cursor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i4: i32;
  var vslice_dummy_var_177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i2 := qxl_alloc_release_reserved($p0, 150, 2, $p1, $0.ref);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    call {:si_unique_call 1963} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p1);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i6 := qxl_release_reserve_list($p5, 1);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    call {:si_unique_call 1965} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p1);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} $p10 := qxl_release_map($p0, $p9);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 2);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p1);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} qxl_release_unmap($p0, $p13, $p14);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p1);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} vslice_dummy_var_177 := qxl_push_cursor_ring_release($p0, $p15, 3, 0);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p1);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} qxl_release_fence_buffer_objects($p17);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p1);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} qxl_release_free($p0, $p8);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  SeqInstr_718:
    assume !assertsPassed;
    return;
}



const qxl_crtc_dpms: ref;

axiom qxl_crtc_dpms == $sub.ref(0, 782892);

procedure qxl_crtc_dpms($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_crtc_dpms($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} {:cexpr "qxl_crtc_dpms:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    return;
}



const qxl_crtc_prepare: ref;

axiom qxl_crtc_prepare == $sub.ref(0, 783924);

procedure qxl_crtc_prepare($p0: ref);
  free requires assertsPassed;



implementation qxl_crtc_prepare($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 1973} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(76, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(96, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(692, 1));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(696, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32(.str.133, .str.134, $i8, $i11, $i13, $i15, $i19);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_crtc_commit: ref;

axiom qxl_crtc_commit == $sub.ref(0, 784956);

procedure qxl_crtc_commit($p0: ref);
  free requires assertsPassed;



implementation qxl_crtc_commit($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 1976} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} drm_ut_debug_printk.ref.ref(.str.126, .str.121);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_crtc_mode_fixup: ref;

axiom qxl_crtc_mode_fixup == $sub.ref(0, 785988);

procedure qxl_crtc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation qxl_crtc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} qxl_io_log.ref.ref.ref.i32.i32.i32.i32($p7, .str.124, .str.125, $i9, $i11, $i13, $i15);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const qxl_crtc_mode_set: ref;

axiom qxl_crtc_mode_set == $sub.ref(0, 787020);

procedure qxl_crtc_mode_set($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.57, $M.39, $CurrAddr;



implementation qxl_crtc_mode_set($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i8;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $i83: i32;
  var $p85: ref;
  var $i86: i32;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;
  var $i107: i32;
  var $i105: i32;
  var $i108: i64;
  var $i109: i1;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i25: i32;
  var vslice_dummy_var_178: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} {:cexpr "qxl_crtc_mode_set:arg:x"} boogie_si_record_i32($i3);
    call {:si_unique_call 1980} {:cexpr "qxl_crtc_mode_set:arg:y"} boogie_si_record_i32($i4);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p5);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p33 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 1985} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.6, $p61);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i62, $i65);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p10, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.6, $p68);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i64($i67, $i69);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i71 := qxl_bo_reserve($p42, 0);
    call {:si_unique_call 1989} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1008, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p73);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $i75 := qxl_bo_pin($p42, $i74, $0.ref);
    call {:si_unique_call 1991} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} qxl_bo_unreserve($p42);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i59);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.6, $p91);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i93 == 1);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1296, 1));
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    call {:si_unique_call 1999} {:cexpr "surf_id"} boogie_si_record_i32($i107);
    assume {:verifier.code 0} true;
    $i105 := $i107;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p33);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.6, $p116);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.6, $p118);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.6, $p120);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} qxl_monitors_config_set($p10, $i117, $i3, $i4, $i119, $i121, $i105);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb35:
    assume $i109 == 1;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p33);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p42);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i110, $i111);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb37;

  $bb38:
    assume $i112 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p33, $mul.ref(0, 1312)), $mul.ref(1264, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p113, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i114 := qxl_bo_reserve($p33, 0);
    call {:si_unique_call 2002} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} vslice_dummy_var_178 := qxl_bo_unpin($p33);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} qxl_bo_unreserve($p33);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb29:
    assume $i93 == 1;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 4);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 1998} {:cexpr "tmp___1"} boogie_si_record_i64($i99);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i105 := 0;
    goto $bb34;

  $bb31:
    assume $i100 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1296, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.6, $p101);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.6, $p103);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} drm_ut_debug_printk.ref.ref.i32.i32(.str.127, .str.132, $i102, $i104);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} qxl_io_destroy_primary($p10);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.6, $p82);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} qxl_io_log.ref.ref.i32.i32.i32.i32($p10, .str.131, $i80, $i83, $i86, $i89);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} qxl_io_create_primary($p10, 0, $p42);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1264, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p90, 1);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} qxl_bo_unreserve($p42);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb6;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i25 := $i71;
    goto $bb6;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} drm_err.ref(.str.130);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb6;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i59 := 1;
    goto $bb16;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.6, $p48);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.6, $p52);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32(.str.127, .str.129, $i3, $i4, $i49, $i51, $i53, $i55);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb10;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1982} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} drm_ut_debug_printk.ref.ref(.str.127, .str.128);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_crtc_disable: ref;

axiom qxl_crtc_disable == $sub.ref(0, 788052);

procedure qxl_crtc_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr;



implementation qxl_crtc_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(0, 1));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 1176)), $mul.ref(1160, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} qxl_monitors_config_set($p6, $i28, 0, 0, 0, 0, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} qxl_send_monitors_config($p6);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i22 := qxl_bo_reserve($p21, 0);
    call {:si_unique_call 2007} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} vslice_dummy_var_179 := qxl_bo_unpin($p21);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} qxl_bo_unreserve($p21);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1160)), $mul.ref(240, 1));
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 704)), $mul.ref(264, 1));
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, $0.ref);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_monitors_config_set: ref;

axiom qxl_monitors_config_set == $sub.ref(0, 789084);

procedure qxl_monitors_config_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_monitors_config_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32)
{
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} {:cexpr "qxl_monitors_config_set:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 2013} {:cexpr "qxl_monitors_config_set:arg:x"} boogie_si_record_i32($i2);
    call {:si_unique_call 2014} {:cexpr "qxl_monitors_config_set:arg:y"} boogie_si_record_i32($i3);
    call {:si_unique_call 2015} {:cexpr "qxl_monitors_config_set:arg:width"} boogie_si_record_i32($i4);
    call {:si_unique_call 2016} {:cexpr "qxl_monitors_config_set:arg:height"} boogie_si_record_i32($i5);
    call {:si_unique_call 2017} {:cexpr "qxl_monitors_config_set:arg:surf_id"} boogie_si_record_i32($i6);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 2019} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i1);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i14, 28)), $mul.ref(16, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, $i2);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i1);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i20, 28)), $mul.ref(20, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i3);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i26, 28)), $mul.ref(8, 1));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i4);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i1);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i32, 28)), $mul.ref(12, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i5);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i1);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p40, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i38, 28)), $mul.ref(4, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, $i6);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32(.str.118, .str.119, $i1, $i4, $i5, $i2, $i3);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_send_monitors_config: ref;

axiom qxl_send_monitors_config == $sub.ref(0, 790116);

procedure qxl_send_monitors_config($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_send_monitors_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i32: i32;
  var $p33: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5424)), $mul.ref(5352, 1));
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2022} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.6, $p12);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.6, $p18);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 0);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} qxl_io_monitors_config($p0);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb12;

  $bb12:
    call $p23, $p24, $p25, $p26, $i27, $p28, $p29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $i42, $i32, $p33, $i51, $p52, $p53, $i54, $i55, $i56, $i22 := qxl_send_monitors_config_loop_$bb12($p0, $p16, $p23, $p24, $p25, $p26, $i27, $p28, $p29, $i30, $i31, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $i42, $i32, $p33, $i51, $p52, $p53, $i54, $i55, $i56, $i22);
    goto $bb12_last;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i22);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 28));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(20, 1));
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 8192);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(16, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32($i35, 8192);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(8, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i38, 8192);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref($i27, 28)), $mul.ref(12, 1));
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, 8192);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i22, $p28;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i22, 1);
    call {:si_unique_call 2026} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p16);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.6, $p53);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, $i51);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb24:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i51;
    goto $bb24_dummy;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p47);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.6, $p49);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} drm_err.ref.i32.i32.i32.i32.i32(.str.6, $i32, $i44, $i46, $i48, $i50);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb15;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} qxl_io_log.ref.ref.ref($p0, .str.4, .str.5);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 2023} devirtbounce(0, .str.3, 552, 12);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call qxl_send_monitors_config_loop_$bb3();
    goto $bb3_last;

  $bb24_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8454;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const qxl_io_monitors_config: ref;

axiom qxl_io_monitors_config == $sub.ref(0, 791148);

procedure qxl_io_monitors_config($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_io_monitors_config($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} qxl_io_log.ref.ref.ref.i32.i32.i32.i32.i32($p0, .str.48, .str.49, $i10, $i27, $i44, $i61, $i78);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} wait_for_io_cmd($p0, 0, 24);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i65 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.6, $p68);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb24;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p73, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.6, $p76);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb27;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.6, $p51);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb18;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p56, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb21;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.6, $p34);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p39, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb15;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.6, $p17);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.6, $p7);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const qxl_io_destroy_primary: ref;

axiom qxl_io_destroy_primary == $sub.ref(0, 792180);

procedure qxl_io_destroy_primary($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_io_destroy_primary($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} wait_for_io_cmd($p0, 0, 19);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    return;
}



const qxl_io_create_primary: ref;

axiom qxl_io_create_primary == $sub.ref(0, 793212);

procedure qxl_io_create_primary($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_io_create_primary($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} {:cexpr "qxl_io_create_primary:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i3 := $M.42;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(12, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, $i12);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(0, 1));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i16);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(4, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i20);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(8, 1));
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $i24);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i1);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i27 := qxl_bo_physical_address($p0, $p2, $i26);
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(32, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p28, $i27);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i29 := $M.42;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(24, 1));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, 1);
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(28, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, 0);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} wait_for_io_cmd($p0, 0, 18);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i30 == 1;
    $p31 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5424)), $mul.ref(5304, 1)), $mul.ref(32, 1));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.6, $p31);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1000, 1));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} qxl_io_log.ref.ref.ref.i64.ref($p0, .str.46, .str.45, $i32, $p34);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(3080, 1));
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} qxl_io_log.ref.ref.ref.ref.ref($p0, .str.44, .str.45, $p0, $p6);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const drm_helper_connector_dpms: ref;

axiom drm_helper_connector_dpms == $sub.ref(0, 794244);

procedure drm_helper_connector_dpms($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation drm_helper_connector_dpms($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} {:cexpr "drm_helper_connector_dpms:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    return;
}



const qxl_conn_save: ref;

axiom qxl_conn_save == $sub.ref(0, 795276);

procedure qxl_conn_save($p0: ref);
  free requires assertsPassed;



implementation qxl_conn_save($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2038} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} drm_ut_debug_printk.ref.ref(.str.122, .str.121);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_restore: ref;

axiom qxl_conn_restore == $sub.ref(0, 796308);

procedure qxl_conn_restore($p0: ref);
  free requires assertsPassed;



implementation qxl_conn_restore($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2041} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} drm_ut_debug_printk.ref.ref(.str.123, .str.121);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_detect: ref;

axiom qxl_conn_detect == $sub.ref(0, 797340);

procedure qxl_conn_detect($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_conn_detect($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i12: i32;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} {:cexpr "qxl_conn_detect:arg:force"} boogie_si_record_i1($i1);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 936)), $mul.ref(0, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i12 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 2045} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i12, 0);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i12, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then 1 else 2);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} qxl_monitors_config_set($p8, $i47, 0, 0, 0, 0, 0);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} drm_ut_debug_printk.ref.ref.i32.i32(.str.116, .str.117, $i44, $i12);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.6, $p19);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i21, $i23);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p28, $mul.ref($i31, 28));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i33 := qxl_head_enabled($p32);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 2047} {:cexpr "tmp"} boogie_si_record_i8($i34);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;
}



const drm_helper_probe_single_connector_modes_nomerge: ref;

axiom drm_helper_probe_single_connector_modes_nomerge == $sub.ref(0, 798372);

procedure drm_helper_probe_single_connector_modes_nomerge($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_helper_probe_single_connector_modes_nomerge($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2050} {:cexpr "drm_helper_probe_single_connector_modes_nomerge:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2051} {:cexpr "drm_helper_probe_single_connector_modes_nomerge:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2052} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2053} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const qxl_conn_set_property: ref;

axiom qxl_conn_set_property == $sub.ref(0, 799404);

procedure qxl_conn_set_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_conn_set_property($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} {:cexpr "qxl_conn_set_property:arg:value"} boogie_si_record_i64($i2);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2056} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} drm_ut_debug_printk.ref.ref(.str.120, .str.121);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_destroy: ref;

axiom qxl_conn_destroy == $sub.ref(0, 800436);

procedure qxl_conn_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_conn_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 1040));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} drm_connector_unregister($p0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} drm_connector_cleanup($p0);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} kfree($p3);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_unregister: ref;

axiom drm_connector_unregister == $sub.ref(0, 801468);

procedure drm_connector_unregister($p0: ref);
  free requires assertsPassed;



implementation drm_connector_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    return;
}



const drm_connector_cleanup: ref;

axiom drm_connector_cleanup == $sub.ref(0, 802500);

procedure drm_connector_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_connector_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    return;
}



const qxl_head_enabled: ref;

axiom qxl_head_enabled == $sub.ref(0, 803532);

procedure qxl_head_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_head_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 28)), $mul.ref(8, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;
}



const qxl_enc_destroy: ref;

axiom qxl_enc_destroy == $sub.ref(0, 804564);

procedure qxl_enc_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_enc_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} drm_encoder_cleanup($p0);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    return;
}



const drm_encoder_cleanup: ref;

axiom drm_encoder_cleanup == $sub.ref(0, 805596);

procedure drm_encoder_cleanup($p0: ref);
  free requires assertsPassed;



implementation drm_encoder_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    return;
}



const qxl_enc_dpms: ref;

axiom qxl_enc_dpms == $sub.ref(0, 806628);

procedure qxl_enc_dpms($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qxl_enc_dpms($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} {:cexpr "qxl_enc_dpms:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 1);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2064} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} drm_ut_debug_printk.ref.ref(.str.135, .str.121);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_mode_fixup: ref;

axiom qxl_enc_mode_fixup == $sub.ref(0, 807660);

procedure qxl_enc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_enc_mode_fixup($p0: ref, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2067} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} drm_ut_debug_printk.ref.ref(.str.136, .str.121);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_prepare: ref;

axiom qxl_enc_prepare == $sub.ref(0, 808692);

procedure qxl_enc_prepare($p0: ref);
  free requires assertsPassed;



implementation qxl_enc_prepare($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2070} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} drm_ut_debug_printk.ref.ref(.str.144, .str.121);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_commit: ref;

axiom qxl_enc_commit == $sub.ref(0, 809724);

procedure qxl_enc_commit($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_enc_commit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} qxl_write_monitors_config_for_encoder($p5, $p0);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 1);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2074} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} drm_ut_debug_printk.ref.ref(.str.137, .str.121);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_enc_mode_set: ref;

axiom qxl_enc_mode_set == $sub.ref(0, 810756);

procedure qxl_enc_mode_set($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation qxl_enc_mode_set($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2077} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} drm_ut_debug_printk.ref.ref(.str.143, .str.121);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_write_monitors_config_for_encoder: ref;

axiom qxl_write_monitors_config_for_encoder == $sub.ref(0, 811788);

procedure qxl_write_monitors_config_for_encoder($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_write_monitors_config_for_encoder($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $p113: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2080} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 944), 1040)), $mul.ref(0, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    call {:si_unique_call 2082} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.6, $p18);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, $i11);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i11, 0);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i11);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(0, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, $i11);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(8, 1));
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(12, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p90, 0);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(16, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, 0);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(20, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, 0);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 4);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 2089} {:cexpr "tmp___1"} boogie_si_record_i64($i98);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(24, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, 0);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} qxl_send_monitors_config($p0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i99 == 1;
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(16, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.6, $p100);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(20, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.6, $p102);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(8, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.6, $p104);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(12, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.6, $p108);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.6, $p110);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32.i32.i32(.str.140, .str.142, $i11, $i101, $i103, $i105, $i107, $i112);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(76, 1));
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(8, 1));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p61, $i60);
    $p62 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 1160)), $mul.ref(272, 1)), $mul.ref(96, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.6, $p62);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(12, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, $i63);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p65);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 1160)), $mul.ref(692, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.6, $p67);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(16, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p69, $i68);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p70);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 1160)), $mul.ref(696, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p47, $mul.ref($i48, 28)), $mul.ref(20, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p74, $i73);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.6, $p77);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i11, 1);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i79, $i80);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i11);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.6, $p86);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p88, $i85);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 2086} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} drm_ut_debug_printk.ref.ref(.str.140, .str.141);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} drm_err.ref.ref(.str.139, $p1);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} drm_err.ref.ref.i32(.str.138, $p23, $i33);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.6, $p30);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 2081} devirtbounce(0, .str.3, 747, 12);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call qxl_write_monitors_config_for_encoder_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const qxl_conn_get_modes: ref;

axiom qxl_conn_get_modes == $sub.ref(0, 812820);

procedure qxl_conn_get_modes($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.62, $M.6, $M.63, $M.64, $CurrAddr;



implementation qxl_conn_get_modes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 936)), $mul.ref(0, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p1, 1024);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p2, 768);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, drm_debug);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 2095} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.61, $p1);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.62, $p2);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i33 := qxl_add_common_modes($p0, $i31, $i32);
    call {:si_unique_call 2100} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $i30);
    call {:si_unique_call 2101} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.6, $p23);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb6;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $i27 := qxl_add_monitors_config_modes($p0, $p1, $p2);
    call {:si_unique_call 2098} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb13;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} drm_ut_debug_printk.ref.ref.ref(.str.145, .str.146, $p16);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_conn_mode_valid: ref;

axiom qxl_conn_mode_valid == $sub.ref(0, 813852);

procedure qxl_conn_mode_valid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_conn_mode_valid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, drm_debug);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 1);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2103} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(76, 1));
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} drm_ut_debug_printk.ref.ref.ref.i32.i32.i32(.str.147, .str.148, $p8, $i10, $i12, $i14);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_best_encoder: ref;

axiom qxl_best_encoder == $sub.ref(0, 814884);

procedure qxl_best_encoder($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_best_encoder($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, drm_debug);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 2106} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(944, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} drm_ut_debug_printk.ref.ref(.str.149, .str.121);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qxl_add_monitors_config_modes: ref;

axiom qxl_add_monitors_config_modes == $sub.ref(0, 815916);

procedure qxl_add_monitors_config_modes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.61, $M.62;



implementation qxl_add_monitors_config_modes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 936)), $mul.ref(0, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    call {:si_unique_call 2108} {:cexpr "h"} boogie_si_record_i32($i11);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i11);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(8, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(12, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $p27 := drm_cvt_mode($p4, $i24, $i26, 60, 0, 0, 0);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 8);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, $i30);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(8, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p1, $i33);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p20, $mul.ref($i21, 28)), $mul.ref(12, 1));
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p2, $i35);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} drm_mode_probed_add($p0, $p27);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const qxl_add_common_modes: ref;

axiom qxl_add_common_modes == $sub.ref(0, 816948);

procedure qxl_add_common_modes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.63, $M.64, $M.6, $CurrAddr;



implementation qxl_add_common_modes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $i96: i32;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p114: ref;
  var $i115: i32;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p133: ref;
  var $i134: i32;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p152: ref;
  var $i153: i32;
  var $p155: ref;
  var $i156: i32;
  var $p157: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $p171: ref;
  var $i172: i32;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $p190: ref;
  var $i191: i32;
  var $p193: ref;
  var $i194: i32;
  var $p195: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $p209: ref;
  var $i210: i32;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $p228: ref;
  var $i229: i32;
  var $p231: ref;
  var $i232: i32;
  var $p233: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p247: ref;
  var $i248: i32;
  var $p250: ref;
  var $i251: i32;
  var $p252: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i32;
  var $p264: ref;
  var $p266: ref;
  var $i267: i32;
  var $p269: ref;
  var $i270: i32;
  var $p271: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $p277: ref;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $p283: ref;
  var $p285: ref;
  var $i286: i32;
  var $p288: ref;
  var $i289: i32;
  var $p290: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $p296: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $p302: ref;
  var $p304: ref;
  var $i305: i32;
  var $p307: ref;
  var $i308: i32;
  var $p309: ref;
  var $p311: ref;
  var $i312: i32;
  var $i313: i1;
  var $p315: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $p321: ref;
  var $p323: ref;
  var $i324: i32;
  var $p326: ref;
  var $i327: i32;
  var $p328: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i32;
  var $p340: ref;
  var $p342: ref;
  var $i343: i32;
  var $p345: ref;
  var $i346: i32;
  var $p347: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $p359: ref;
  var $p361: ref;
  var $i362: i32;
  var $p364: ref;
  var $i365: i32;
  var $p366: ref;
  var $p368: ref;
  var $i369: i32;
  var $i370: i1;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i32;
  var $i377: i32;
  var $p378: ref;
  var $p380: ref;
  var $i381: i32;
  var $p383: ref;
  var $i384: i32;
  var $p385: ref;
  var $p387: ref;
  var $i388: i32;
  var $i389: i1;
  var $p391: ref;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $i395: i32;
  var $i396: i32;
  var $p397: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $p3 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 2112} {:cexpr "qxl_add_common_modes:arg:pwidth"} boogie_si_record_i32($i1);
    call {:si_unique_call 2113} {:cexpr "qxl_add_common_modes:arg:pheight"} boogie_si_record_i32($i2);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 936)), $mul.ref(0, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p7, 640);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p9, 480);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p11, 720);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p13, 480);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p15, 800);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p17, 600);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p19, 848);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p21, 480);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p23, 1024);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p25, 768);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p27, 1152);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p29, 768);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p31, 1280);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p33, 720);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p35, 1280);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p37, 800);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p39, 1280);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p41, 854);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p43, 1280);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p45, 960);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p47, 1280);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p49, 1024);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p51, 1440);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p53, 900);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p55, 1400);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p57, 1050);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p59, 1680);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p61, 1050);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p63, 1600);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p65, 1200);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p67, 1920);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p69, 1080);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p71, 1920);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p73, 1200);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.63, $p75);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.64, $p78);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $p80 := drm_cvt_mode($p5, $i76, $i79, 60, 0, 0, 0);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.63, $p82);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, $i1);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} drm_mode_probed_add($p0, $p80);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.63, $p95);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.64, $p98);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $p100 := drm_cvt_mode($p5, $i96, $i99, 60, 0, 0, 0);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.63, $p102);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, $i1);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} drm_mode_probed_add($p0, $p100);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.63, $p114);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.64, $p117);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $p119 := drm_cvt_mode($p5, $i115, $i118, 60, 0, 0, 0);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.63, $p121);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, $i1);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} drm_mode_probed_add($p0, $p119);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.63, $p133);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.64, $p136);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} $p138 := drm_cvt_mode($p5, $i134, $i137, 60, 0, 0, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.63, $p140);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, $i1);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} drm_mode_probed_add($p0, $p138);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.63, $p152);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.64, $p155);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} $p157 := drm_cvt_mode($p5, $i153, $i156, 60, 0, 0, 0);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.63, $p159);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, $i1);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} drm_mode_probed_add($p0, $p157);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.63, $p171);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.64, $p174);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $p176 := drm_cvt_mode($p5, $i172, $i175, 60, 0, 0, 0);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.63, $p178);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, $i1);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} drm_mode_probed_add($p0, $p176);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.63, $p190);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.64, $p193);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $p195 := drm_cvt_mode($p5, $i191, $i194, 60, 0, 0, 0);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.63, $p197);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, $i1);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} drm_mode_probed_add($p0, $p195);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.63, $p209);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.64, $p212);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $p214 := drm_cvt_mode($p5, $i210, $i213, 60, 0, 0, 0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.63, $p216);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, $i1);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} drm_mode_probed_add($p0, $p214);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.63, $p228);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.64, $p231);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $p233 := drm_cvt_mode($p5, $i229, $i232, 60, 0, 0, 0);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.63, $p235);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, $i1);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} drm_mode_probed_add($p0, $p233);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.63, $p247);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.64, $p250);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $p252 := drm_cvt_mode($p5, $i248, $i251, 60, 0, 0, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.63, $p254);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, $i1);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} drm_mode_probed_add($p0, $p252);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.63, $p266);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.64, $p269);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $p271 := drm_cvt_mode($p5, $i267, $i270, 60, 0, 0, 0);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.63, $p273);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, $i1);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} drm_mode_probed_add($p0, $p271);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.63, $p285);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.64, $p288);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} $p290 := drm_cvt_mode($p5, $i286, $i289, 60, 0, 0, 0);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.63, $p292);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, $i1);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} drm_mode_probed_add($p0, $p290);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.63, $p304);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.64, $p307);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $p309 := drm_cvt_mode($p5, $i305, $i308, 60, 0, 0, 0);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.63, $p311);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, $i1);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} drm_mode_probed_add($p0, $p309);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.63, $p323);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.64, $p326);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} $p328 := drm_cvt_mode($p5, $i324, $i327, 60, 0, 0, 0);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.63, $p330);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, $i1);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} drm_mode_probed_add($p0, $p328);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.63, $p342);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.64, $p345);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} $p347 := drm_cvt_mode($p5, $i343, $i346, 60, 0, 0, 0);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.63, $p349);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, $i1);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i351 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} drm_mode_probed_add($p0, $p347);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.63, $p361);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.64, $p364);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} $p366 := drm_cvt_mode($p5, $i362, $i365, 60, 0, 0, 0);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.63, $p368);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, $i1);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} drm_mode_probed_add($p0, $p366);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.63, $p380);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.64, $p383);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} $p385 := drm_cvt_mode($p5, $i381, $i384, 60, 0, 0, 0);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(0, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.63, $p387);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, $i1);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} drm_mode_probed_add($p0, $p385);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i93 := $add.i32(17, $sub.i32(0, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $r := $i93;
    return;

  $bb116:
    assume $i389 == 1;
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(16, 8)), $mul.ref(4, 1));
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i392 := $load.i32($M.64, $p391);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, $i2);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i393 == 1);
    goto $bb118;

  $bb119:
    assume $i393 == 1;
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p385, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.6, $p394);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i396 := $or.i32($i395, 8);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p385, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p397, $i396);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb109:
    assume $i370 == 1;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(15, 8)), $mul.ref(4, 1));
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.64, $p372);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, $i2);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb111;

  $bb112:
    assume $i374 == 1;
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p366, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.6, $p375);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i377 := $or.i32($i376, 8);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p366, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p378, $i377);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb102:
    assume $i351 == 1;
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(14, 8)), $mul.ref(4, 1));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.64, $p353);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, $i2);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb104;

  $bb105:
    assume $i355 == 1;
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p347, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.6, $p356);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i358 := $or.i32($i357, 8);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p347, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p359, $i358);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb95:
    assume $i332 == 1;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(13, 8)), $mul.ref(4, 1));
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.64, $p334);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, $i2);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb97;

  $bb98:
    assume $i336 == 1;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p328, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.6, $p337);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i339 := $or.i32($i338, 8);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p328, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p340, $i339);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb88:
    assume $i313 == 1;
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.64, $p315);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, $i2);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb90;

  $bb91:
    assume $i317 == 1;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p309, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.6, $p318);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i320 := $or.i32($i319, 8);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p309, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p321, $i320);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb81:
    assume $i294 == 1;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.64, $p296);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, $i2);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb83;

  $bb84:
    assume $i298 == 1;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p290, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.6, $p299);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i301 := $or.i32($i300, 8);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p290, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p302, $i301);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb74:
    assume $i275 == 1;
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.64, $p277);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, $i2);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb76;

  $bb77:
    assume $i279 == 1;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p271, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.6, $p280);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i282 := $or.i32($i281, 8);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p271, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p283, $i282);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb67:
    assume $i256 == 1;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.64, $p258);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, $i2);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb69;

  $bb70:
    assume $i260 == 1;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p252, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.6, $p261);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i263 := $or.i32($i262, 8);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p252, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p264, $i263);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb60:
    assume $i237 == 1;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.64, $p239);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, $i2);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb62;

  $bb63:
    assume $i241 == 1;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p233, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.6, $p242);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i244 := $or.i32($i243, 8);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p233, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p245, $i244);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb53:
    assume $i218 == 1;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.64, $p220);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, $i2);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb55;

  $bb56:
    assume $i222 == 1;
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p214, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.6, $p223);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i225 := $or.i32($i224, 8);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p214, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p226, $i225);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume $i199 == 1;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.64, $p201);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, $i2);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb48;

  $bb49:
    assume $i203 == 1;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p195, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.6, $p204);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i205, 8);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p195, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p207, $i206);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb39:
    assume $i180 == 1;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.64, $p182);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, $i2);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb41;

  $bb42:
    assume $i184 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p176, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.6, $p185);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i186, 8);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p176, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p188, $i187);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume $i161 == 1;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.64, $p163);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, $i2);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb34;

  $bb35:
    assume $i165 == 1;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p157, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.6, $p166);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, 8);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p157, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p169, $i168);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb25:
    assume $i142 == 1;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.64, $p144);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, $i2);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb27;

  $bb28:
    assume $i146 == 1;
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p138, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.6, $p147);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i149 := $or.i32($i148, 8);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p138, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p150, $i149);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb18:
    assume $i123 == 1;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.64, $p125);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, $i2);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb20;

  $bb21:
    assume $i127 == 1;
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p119, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.6, $p128);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i129, 8);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p119, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p131, $i130);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i104 == 1;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.64, $p106);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, $i2);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb13;

  $bb14:
    assume $i108 == 1;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p100, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.6, $p109);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i110, 8);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p100, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, $i111);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume $i84 == 1;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.64, $p86);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, $i2);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb5;

  $bb6:
    assume $i88 == 1;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p80, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 8);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p80, $mul.ref(0, 208)), $mul.ref(68, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, $i91);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const drm_cvt_mode: ref;

axiom drm_cvt_mode == $sub.ref(0, 817980);

procedure drm_cvt_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $i6: i1) returns ($r: ref);
  free requires assertsPassed;



implementation drm_cvt_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1, $i5: i1, $i6: i1) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} {:cexpr "drm_cvt_mode:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2149} {:cexpr "drm_cvt_mode:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2150} {:cexpr "drm_cvt_mode:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2151} {:cexpr "drm_cvt_mode:arg:arg4"} boogie_si_record_i1($i4);
    call {:si_unique_call 2152} {:cexpr "drm_cvt_mode:arg:arg5"} boogie_si_record_i1($i5);
    call {:si_unique_call 2153} {:cexpr "drm_cvt_mode:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} $p7 := external_alloc();
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const drm_mode_probed_add: ref;

axiom drm_mode_probed_add == $sub.ref(0, 819012);

procedure drm_mode_probed_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_mode_probed_add($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    return;
}



const qxl_ttm_tt_create: ref;

axiom qxl_ttm_tt_create == $sub.ref(0, 820044);

procedure qxl_ttm_tt_create($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation qxl_ttm_tt_create($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} {:cexpr "qxl_ttm_tt_create:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2156} {:cexpr "qxl_ttm_tt_create:arg:page_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p4 := qxl_get_qdev($p0);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p5 := kmalloc(128, 208);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, qxl_backend_func);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $p4);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $i15 := ttm_dma_tt_init($p14, $p0, $i1, $i2, $p3);
    call {:si_unique_call 2160} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p6);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} kfree($p17);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const qxl_ttm_tt_populate: ref;

axiom qxl_ttm_tt_populate == $sub.ref(0, 821076);

procedure qxl_ttm_tt_populate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_ttm_tt_populate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(76, 1));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 2);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $i5 := ttm_pool_populate($p0);
    call {:si_unique_call 2163} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const qxl_ttm_tt_unpopulate: ref;

axiom qxl_ttm_tt_unpopulate == $sub.ref(0, 822108);

procedure qxl_ttm_tt_unpopulate($p0: ref);
  free requires assertsPassed;



implementation qxl_ttm_tt_unpopulate($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} ttm_pool_unpopulate($p0);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    return;
}



const qxl_invalidate_caches: ref;

axiom qxl_invalidate_caches == $sub.ref(0, 823140);

procedure qxl_invalidate_caches($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_invalidate_caches($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} {:cexpr "qxl_invalidate_caches:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qxl_init_mem_type: ref;

axiom qxl_init_mem_type == $sub.ref(0, 824172);

procedure qxl_init_mem_type($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_init_mem_type($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    call {:si_unique_call 2166} {:cexpr "qxl_init_mem_type:arg:type"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} drm_err.ref.i32(.str.154, $i1);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(40, 1));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, ttm_bo_manager_func);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p11, 0);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, 3);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 458752);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(36, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 65536);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb14;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, 2);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 458752);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(36, 1));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, 65536);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const qxl_evict_flags: ref;

axiom qxl_evict_flags == $sub.ref(0, 825204);

procedure qxl_evict_flags($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation qxl_evict_flags($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p3, 0);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, 0);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, 458753);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $i6 := qxl_ttm_bo_is_qxl_bo($p0);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 2170} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} qxl_ttm_placement_from_domain($p16, 0, 0);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(56, 1));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.6;
    cmdloc_dummy_var_48 := $M.6;
    call {:si_unique_call 2172} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p18, $p19, 32, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_49;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, $p2);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, $p2);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 1);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 1);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const qxl_bo_move: ref;

axiom qxl_bo_move == $sub.ref(0, 826236);

procedure qxl_bo_move($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_bo_move($p0: ref, $i1: i1, $i2: i1, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 2173} {:cexpr "qxl_bo_move:arg:evict"} boogie_si_record_i1($i1);
    call {:si_unique_call 2174} {:cexpr "qxl_bo_move:arg:interruptible"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 2175} {:cexpr "qxl_bo_move:arg:no_wait_gpu"} boogie_si_record_i1($i3);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i5);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i6);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $i18 := ttm_bo_move_memcpy($p0, $i16, $i17, $p4);
    call {:si_unique_call 2178} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(160, 1));
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} qxl_move_null($p0, $p4);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;
}



const qxl_verify_access: ref;

axiom qxl_verify_access == $sub.ref(0, 827268);

procedure qxl_verify_access($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_verify_access($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1)), $mul.ref(24, 1));
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $i6 := drm_vma_node_verify_access($p5, $p1);
    call {:si_unique_call 2180} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const qxl_bo_move_notify: ref;

axiom qxl_bo_move_notify == $sub.ref(0, 828300);

procedure qxl_bo_move_notify($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.35, $M.36, $CurrAddr, $M.39, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_bo_move_notify($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $i2 := qxl_ttm_bo_is_qxl_bo($p0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2182} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1016, 1)), $mul.ref(8, 1));
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3320)), $mul.ref(40, 1));
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(36, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 88), 1312)), $mul.ref(1296, 1));
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} qxl_surface_evict($p14, $p8, $i23);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const qxl_ttm_io_mem_reserve: ref;

axiom qxl_ttm_io_mem_reserve == $sub.ref(0, 829332);

procedure qxl_ttm_io_mem_reserve($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_io_mem_reserve($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2592)), $mul.ref(32, 1));
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $p8 := qxl_get_qdev($p0);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, $0.ref);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p12, 0);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.6, $p13);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64($i14, 12);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p17, $i15);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p19, 0);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 0);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref($i6, 256)), $mul.ref(12, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p45, 1);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(48, 1));
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.6, $p46);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p49, $i47);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.6, $p50);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i52 := $shl.i64($i51, 12);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p54, $i52);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(32, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 1);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.6, $p35);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p38, $i36);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.6, $p39);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i41 := $shl.i64($i40, 12);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(48, 1)), $mul.ref(24, 1));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p43, $i41);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i28, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb3;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb3;
}



const qxl_ttm_io_mem_free: ref;

axiom qxl_ttm_io_mem_free == $sub.ref(0, 830364);

procedure qxl_ttm_io_mem_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qxl_ttm_io_mem_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    return;
}



const qxl_get_qdev: ref;

axiom qxl_get_qdev == $sub.ref(0, 831396);

procedure qxl_get_qdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_get_qdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 96), 2688));
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 136), 5336));
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const qxl_ttm_bo_is_qxl_bo: ref;

axiom qxl_ttm_bo_is_qxl_bo == $sub.ref(0, 832428);

procedure qxl_ttm_bo_is_qxl_bo($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_ttm_bo_is_qxl_bo($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(qxl_ttm_bo_destroy));
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const drm_vma_node_verify_access: ref;

axiom drm_vma_node_verify_access == $sub.ref(0, 833460);

procedure drm_vma_node_verify_access($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_vma_node_verify_access($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $i2 := drm_vma_node_is_allowed($p0, $p1);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2186} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 0 else $sub.i32(0, 13));
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const drm_vma_node_is_allowed: ref;

axiom drm_vma_node_is_allowed == $sub.ref(0, 834492);

procedure drm_vma_node_is_allowed($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation drm_vma_node_is_allowed($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2187} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2188} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_move_null: ref;

axiom qxl_move_null == $sub.ref(0, 835524);

procedure qxl_move_null($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_move_null($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2190} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.6;
    cmdloc_dummy_var_51 := $M.6;
    call {:si_unique_call 2192} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p11, $p12, 96, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_52;
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, $0.ref);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 2191} devirtbounce(0, .str.155, 342, 12);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call qxl_move_null_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ttm_bo_move_memcpy: ref;

axiom ttm_bo_move_memcpy == $sub.ref(0, 836556);

procedure ttm_bo_move_memcpy($p0: ref, $i1: i1, $i2: i1, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_bo_move_memcpy($p0: ref, $i1: i1, $i2: i1, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2193} {:cexpr "ttm_bo_move_memcpy:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 2194} {:cexpr "ttm_bo_move_memcpy:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2195} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2196} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ttm_pool_unpopulate: ref;

axiom ttm_pool_unpopulate == $sub.ref(0, 837588);

procedure ttm_pool_unpopulate($p0: ref);
  free requires assertsPassed;



implementation ttm_pool_unpopulate($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    return;
}



const ttm_pool_populate: ref;

axiom ttm_pool_populate == $sub.ref(0, 838620);

procedure ttm_pool_populate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_pool_populate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2197} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ttm_dma_tt_init: ref;

axiom ttm_dma_tt_init == $sub.ref(0, 839652);

procedure ttm_dma_tt_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ttm_dma_tt_init($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2199} {:cexpr "ttm_dma_tt_init:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2200} {:cexpr "ttm_dma_tt_init:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2201} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const qxl_ttm_backend_bind: ref;

axiom qxl_ttm_backend_bind == $sub.ref(0, 840684);

procedure qxl_ttm_backend_bind($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation qxl_ttm_backend_bind($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var vslice_dummy_var_180: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64($i4, 12);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p6, $i5);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.6, $p7);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32(1, 0);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 2204} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32(1, 0);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} vslice_dummy_var_180 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.6, $p15);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} warn_slowpath_fmt.ref.i32.ref.i64.ref.ref(.str.155, 271, .str.156, $i16, $p1, $p0);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const qxl_ttm_backend_unbind: ref;

axiom qxl_ttm_backend_unbind == $sub.ref(0, 841716);

procedure qxl_ttm_backend_unbind($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qxl_ttm_backend_unbind($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;
}



const qxl_ttm_backend_destroy: ref;

axiom qxl_ttm_backend_destroy == $sub.ref(0, 842748);

procedure qxl_ttm_backend_destroy($p0: ref);
  free requires assertsPassed;



implementation qxl_ttm_backend_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} ttm_dma_tt_fini($p2);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} kfree($p3);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    return;
}



const ttm_dma_tt_fini: ref;

axiom ttm_dma_tt_fini == $sub.ref(0, 843780);

procedure ttm_dma_tt_fini($p0: ref);
  free requires assertsPassed;



implementation ttm_dma_tt_fini($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fb_find_or_create_single: ref;

axiom qxl_fb_find_or_create_single == $sub.ref(0, 844812);

procedure qxl_fb_find_or_create_single($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.6, $M.32, $M.57, $M.40, $CurrAddr, $M.41, $M.39, $M.46, assertsPassed, $M.58, $M.35, $M.36, $M.55, $M.61, $M.62, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_fb_find_or_create_single($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} $i7 := qxlfb_create($p2, $p1);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    call {:si_unique_call 2210} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb7;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb5;

  SeqInstr_745:
    assume !assertsPassed;
    return;
}



const qxlfb_create: ref;

axiom qxlfb_create == $sub.ref(0, 845844);

procedure qxlfb_create($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.6, $M.32, $M.57, $M.40, $CurrAddr, $M.41, $M.39, $M.46, assertsPassed, $M.58, $M.35, $M.36, $M.55, $M.61, $M.62, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxlfb_create($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $p159: ref;
  var $i160: i32;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $i167: i32;
  var $p66: ref;
  var $i67: i32;
  var $i170: i64;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $i179: i32;
  var $i180: i64;
  var $i181: i1;
  var $i182: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i169: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: ref;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $p2 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $M.65 := $store.ref($M.65, $p3, $0.ref);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(16, 1));
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    call {:si_unique_call 2213} {:cexpr "bpp"} boogie_si_record_i32($i10);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    call {:si_unique_call 2214} {:cexpr "depth"} boogie_si_record_i32($i12);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $i14);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i17);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i10, 1);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i22 := $sdiv.i32($i21, 8);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i20, $i22);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 63);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, $sub.i32(0, 64));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p27, $i25);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i28 := drm_mode_legacy_fb_format($i10, $i12);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p29, $i28);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i30 := qxlfb_create_pinned_object($p0, $p2, $p3);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    call {:si_unique_call 2217} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.65, $p3);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i34 := $M.42;
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i45, $i47);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} $p50 := ldv_vmalloc_165($i49);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 2221} {:cexpr "tmp"} boogie_si_record_i64($i55);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i57 := $M.42;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 0);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} $p63 := framebuffer_alloc(0, $p8);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p69, $p0);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p70);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.65, $p3);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} vslice_dummy_var_181 := qxl_framebuffer_init($p71, $p72, $p2, $p73);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p78, $p76);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, $p63);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p81, $p50);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} vslice_dummy_var_182 := strcpy($p84, .str.161);
    $p87 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} drm_fb_helper_fill_fix($p63, $i88, $i90);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, 769);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p92, qxlfb_ops);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(32, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.6, $p93);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p96, $i94);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.65, $p3);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 248)), $mul.ref(200, 1));
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.6, $p98);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p102, $i100);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(448, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p103);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p105, $p104);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.65, $p3);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 248)), $mul.ref(200, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.6, $p107);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p109, $i108);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(0, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.6, $p111);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.6, $p113);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} drm_fb_helper_fill_var($p63, $p110, $i112, $i114);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $p115 := alloc_apertures(1);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p116, $p115);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p117);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.6, $p121);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1064, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.6, $p124);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.6, $p126);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p127, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p130, $i125);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(40, 1));
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.6, $p131);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1592, 1));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.6, $p133);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p134, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p137, $i132);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(56, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p139, 0);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(64, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p141, 0);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.6, $p142);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} $i147 := fb_alloc_cmap($p146, 256, 0);
    call {:si_unique_call 2235} {:cexpr "ret"} boogie_si_record_i32($i147);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1496, 1));
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p149, qxl_defio);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} fb_deferred_io_init($p63);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3032, 1));
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p150, $p63);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 5336)), $mul.ref(3040, 1));
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p152, $p151);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.6, $p154);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p63, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.6, $p156);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} vslice_dummy_var_183 := printk.ref.i64.i64(.str.162, $i155, $i157);
    $p159 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.6, $p159);
    $p162 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 4));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.6, $p162);
    $p164 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.6, $p164);
    $p166 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(160, 1)), $mul.ref(0, 1)), $mul.ref(124, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.6, $p166);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} vslice_dummy_var_184 := printk.ref.i32.i32.i32.i32(.str.163, $i160, $i163, $i165, $i167);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i169 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $r := $i169;
    return;

  $bb21:
    assume $i148 == 1;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $p66, $i67 := $p76, $sub.i32(0, 12);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p33);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i179 := $i67;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p66);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.65, $p3);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} drm_gem_object_unreference($p185);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i169 := $i179;
    goto $bb24;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i181 == 1;
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i179, 0);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb33;

  $bb34:
    assume $i182 == 1;
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.65, $p3);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} drm_gem_object_unreference($p183);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} drm_framebuffer_cleanup($p66);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p66);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} kfree($p184);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i171 == 1;
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} $i172 := qxl_bo_reserve($p33, 0);
    call {:si_unique_call 2240} {:cexpr "ret"} boogie_si_record_i32($i172);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i174 := $zext.i1.i32($i173);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64($i174);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $i176 := ldv__builtin_expect($i175, 1);
    call {:si_unique_call 2242} {:cexpr "tmp___2"} boogie_si_record_i64($i176);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i179 := $i172;
    goto $bb30;

  $bb27:
    assume $i177 == 1;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} qxl_bo_kunmap($p33);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} vslice_dummy_var_185 := qxl_bo_unpin($p33);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} qxl_bo_unreserve___0($p33);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i145 == 1;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p66, $i67 := $p76, $sub.i32(0, 28);
    goto $bb13;

  $bb15:
    assume $i120 == 1;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p66, $i67 := $p76, $sub.i32(0, 12);
    goto $bb13;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p66, $i67 := $0.ref, $sub.i32(0, 12);
    goto $bb13;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i59 := qxl_bo_mmap_offset($p33);
    call {:si_unique_call 2224} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $i60 := qxl_bo_gpu_offset($p33);
    call {:si_unique_call 2226} {:cexpr "tmp___1"} boogie_si_record_i64($i60);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p32, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1000, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} qxl_io_log.ref.ref.i64.i64.ref.ref($p5, .str.160, $i60, $i59, $p62, $p50);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i56 == 1;
    call {:si_unique_call 2222} devirtbounce(0, .str.22, 368, 12);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call qxlfb_create_loop_$bb6();
    goto $bb6_last;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} qxl_io_log.ref.ref.ref.i32.i32.i32($p5, .str.158, .str.159, $i37, $i39, $i42);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const drm_mode_legacy_fb_format: ref;

axiom drm_mode_legacy_fb_format == $sub.ref(0, 846876);

procedure drm_mode_legacy_fb_format($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drm_mode_legacy_fb_format($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2250} {:cexpr "drm_mode_legacy_fb_format:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2251} {:cexpr "drm_mode_legacy_fb_format:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2252} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 2253} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxlfb_create_pinned_object: ref;

axiom qxlfb_create_pinned_object == $sub.ref(0, 847908);

procedure qxlfb_create_pinned_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.6, $M.65, $M.57, $M.40, $M.41, $CurrAddr, $M.46, $M.39, $M.58, $M.35, $M.36, assertsPassed, $M.55, $M.61, $M.62, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxlfb_create_pinned_object($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i46: i32;
  var $p52: ref;
  var $i21: i32;
  var vslice_dummy_var_186: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p3, $0.ref);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    call {:si_unique_call 2257} {:cexpr "height"} boogie_si_record_i32($i9);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(12, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} drm_fb_get_bpp_depth($i11, $p4, $p5);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, $i9);
    call {:si_unique_call 2259} {:cexpr "size"} boogie_si_record_i32($i15);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 4095);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 4096));
    call {:si_unique_call 2260} {:cexpr "aligned_size"} boogie_si_record_i32($i17);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $i18 := qxl_gem_object_create($p7, $i17, 0, 2, 0, 0, $0.ref, $p3);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    call {:si_unique_call 2262} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.32, $p3);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312));
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(4, 1));
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i26);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(8, 1));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, $i30);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(36, 1)), $mul.ref(0, 4));
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(12, 1));
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i35);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p23, $mul.ref($sub.ref(0, 1016), 1312)), $mul.ref(1272, 1)), $mul.ref(0, 1));
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, 32);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i40 := qxl_bo_reserve($p24, 0);
    call {:si_unique_call 2265} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 2267} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $i47 := qxl_bo_pin($p24, 2, $0.ref);
    call {:si_unique_call 2270} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $i49 := qxl_bo_kmap($p24, $0.ref);
    call {:si_unique_call 2273} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} qxl_bo_unreserve___0($p24);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.32, $p3);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $M.65 := $store.ref($M.65, $p2, $p51);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.32, $p3);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} qxlfb_destroy_pinned_object($p52);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.65 := $store.ref($M.65, $p2, $0.ref);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i21 := $i46;
    goto $bb3;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} qxl_bo_unreserve___0($p24);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb7;

  $bb5:
    assume $i45 == 1;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $i46 := $i40;
    goto $bb7;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} vslice_dummy_var_186 := printk.ref.i32(.str.164, $i17);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_763:
    assume !assertsPassed;
    return;
}



const ldv_vmalloc_165: ref;

axiom ldv_vmalloc_165 == $sub.ref(0, 848940);

procedure ldv_vmalloc_165($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_165($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} {:cexpr "ldv_vmalloc_165:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} ldv_check_alloc_nonatomic();
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $p1 := ldv_undef_ptr();
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;
}



const framebuffer_alloc: ref;

axiom framebuffer_alloc == $sub.ref(0, 849972);

procedure framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} {:cexpr "framebuffer_alloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} $p2 := external_alloc();
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 851004);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const drm_fb_helper_fill_fix: ref;

axiom drm_fb_helper_fill_fix == $sub.ref(0, 852036);

procedure drm_fb_helper_fill_fix($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation drm_fb_helper_fill_fix($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} {:cexpr "drm_fb_helper_fill_fix:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2281} {:cexpr "drm_fb_helper_fill_fix:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_fill_var: ref;

axiom drm_fb_helper_fill_var == $sub.ref(0, 853068);

procedure drm_fb_helper_fill_var($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation drm_fb_helper_fill_var($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} {:cexpr "drm_fb_helper_fill_var:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2283} {:cexpr "drm_fb_helper_fill_var:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    return;
}



const alloc_apertures: ref;

axiom alloc_apertures == $sub.ref(0, 854100);

procedure alloc_apertures($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation alloc_apertures($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} {:cexpr "alloc_apertures:arg:max_num"} boogie_si_record_i32($i0);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 16);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 8);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} $p4 := kmalloc($i3, 208);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, $i0);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  SeqInstr_772:
    assume !assertsPassed;
    return;
}



const fb_alloc_cmap: ref;

axiom fb_alloc_cmap == $sub.ref(0, 855132);

procedure fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2286} {:cexpr "fb_alloc_cmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2287} {:cexpr "fb_alloc_cmap:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2288} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2289} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fb_deferred_io_init: ref;

axiom fb_deferred_io_init == $sub.ref(0, 856164);

procedure fb_deferred_io_init($p0: ref);
  free requires assertsPassed;



implementation fb_deferred_io_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    return;
}



const drm_gem_object_unreference: ref;

axiom drm_gem_object_unreference == $sub.ref(0, 857196);

procedure drm_gem_object_unreference($p0: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation drm_gem_object_unreference($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} vslice_dummy_var_187 := kref_put($p3, drm_gem_object_free);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_775:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 858228);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_error();
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_778:
    assume !assertsPassed;
    return;
}



const drm_fb_get_bpp_depth: ref;

axiom drm_fb_get_bpp_depth == $sub.ref(0, 859260);

procedure drm_fb_get_bpp_depth($i0: i32, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation drm_fb_get_bpp_depth($i0: i32, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} {:cexpr "drm_fb_get_bpp_depth:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_check_var: ref;

axiom drm_fb_helper_check_var == $sub.ref(0, 860292);

procedure drm_fb_helper_check_var($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_check_var($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2293} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_fb_helper_set_par: ref;

axiom drm_fb_helper_set_par == $sub.ref(0, 861324);

procedure drm_fb_helper_set_par($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_set_par($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2295} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2296} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_fb_helper_setcmap: ref;

axiom drm_fb_helper_setcmap == $sub.ref(0, 862356);

procedure drm_fb_helper_setcmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_setcmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2297} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2298} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_fb_helper_blank: ref;

axiom drm_fb_helper_blank == $sub.ref(0, 863388);

procedure drm_fb_helper_blank($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_blank($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2299} {:cexpr "drm_fb_helper_blank:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2300} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2301} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_fb_helper_pan_display: ref;

axiom drm_fb_helper_pan_display == $sub.ref(0, 864420);

procedure drm_fb_helper_pan_display($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_pan_display($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2302} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qxl_fb_fillrect: ref;

axiom qxl_fb_fillrect == $sub.ref(0, 865452);

procedure qxl_fb_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_fb_fillrect($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} sys_fillrect($p0, $p1);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} qxl_dirty_update($p4, $i6, $i8, $i10, $i12);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fb_copyarea: ref;

axiom qxl_fb_copyarea == $sub.ref(0, 866484);

procedure qxl_fb_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_fb_copyarea($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} sys_copyarea($p0, $p1);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} qxl_dirty_update($p4, $i6, $i8, $i10, $i12);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    return;
}



const qxl_fb_imageblit: ref;

axiom qxl_fb_imageblit == $sub.ref(0, 867516);

procedure qxl_fb_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_fb_imageblit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} sys_imageblit($p0, $p1);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} qxl_dirty_update($p4, $i6, $i8, $i10, $i12);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    return;
}



const drm_fb_helper_debug_enter: ref;

axiom drm_fb_helper_debug_enter == $sub.ref(0, 868548);

procedure drm_fb_helper_debug_enter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_debug_enter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2310} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const drm_fb_helper_debug_leave: ref;

axiom drm_fb_helper_debug_leave == $sub.ref(0, 869580);

procedure drm_fb_helper_debug_leave($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_fb_helper_debug_leave($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2312} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2313} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sys_imageblit: ref;

axiom sys_imageblit == $sub.ref(0, 870612);

procedure sys_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sys_imageblit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    return;
}



const qxl_dirty_update: ref;

axiom qxl_dirty_update == $sub.ref(0, 871644);

procedure qxl_dirty_update($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_dirty_update($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var vslice_dummy_var_188: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} {:cexpr "qxl_dirty_update:arg:x"} boogie_si_record_i32($i1);
    call {:si_unique_call 2315} {:cexpr "qxl_dirty_update:arg:y"} boogie_si_record_i32($i2);
    call {:si_unique_call 2316} {:cexpr "qxl_dirty_update:arg:width"} boogie_si_record_i32($i3);
    call {:si_unique_call 2317} {:cexpr "qxl_dirty_update:arg:height"} boogie_si_record_i32($i4);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(352, 1));
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i1, $i3);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $sub.i32(0, 1));
    call {:si_unique_call 2318} {:cexpr "x2"} boogie_si_record_i32($i8);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i2, $i4);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, $sub.i32(0, 1));
    call {:si_unique_call 2319} {:cexpr "y2"} boogie_si_record_i32($i10);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} ldv_spin_lock();
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(76, 1));
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32($i13, $i2);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(84, 1));
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, $i10);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(72, 1));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $i30 := $ult.i32($i29, $i1);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(80, 1));
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, $i8);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i8;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(72, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, $i34);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(80, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i42);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(76, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p48, $i18);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(84, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, $i26);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} spin_unlock_irqrestore($p52, $u0);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 5336)), $mul.ref(5248, 1));
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} vslice_dummy_var_188 := schedule_work($p53);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(80, 1));
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    call {:si_unique_call 2324} {:cexpr "x2"} boogie_si_record_i32($i41);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(72, 1));
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    call {:si_unique_call 2323} {:cexpr "x"} boogie_si_record_i32($i33);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(84, 1));
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    call {:si_unique_call 2322} {:cexpr "y2"} boogie_si_record_i32($i25);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 552)), $mul.ref(464, 1)), $mul.ref(76, 1));
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    call {:si_unique_call 2321} {:cexpr "y"} boogie_si_record_i32($i17);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 872676);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.6, system_wq);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $i2 := queue_work($p1, $p0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2328} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 873708);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $i2 := ldv_queue_work_on_151(8192, $p0, $p1);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2330} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_151: ref;

axiom ldv_queue_work_on_151 == $sub.ref(0, 874740);

procedure ldv_queue_work_on_151($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_queue_work_on_151($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} {:cexpr "ldv_queue_work_on_151:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2333} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 2334} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} activate_work_2($p2, 2);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const sys_copyarea: ref;

axiom sys_copyarea == $sub.ref(0, 875772);

procedure sys_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sys_copyarea($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    return;
}



const sys_fillrect: ref;

axiom sys_fillrect == $sub.ref(0, 876804);

procedure sys_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sys_fillrect($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    return;
}



const qxl_deferred_io: ref;

axiom qxl_deferred_io == $sub.ref(0, 877836);

procedure qxl_deferred_io($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation qxl_deferred_io($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i39: i64;
  var $i40: i64;
  var $i14: i64;
  var $i15: i64;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i14, $i15 := $sub.i64(0, 1), 0;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $ult.i64($i14, $i15);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i46 := $udiv.i64($i14, $i45);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    call {:si_unique_call 2338} {:cexpr "y1"} boogie_si_record_i32($i47);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.6, $p49);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i52 := $udiv.i64($i15, $i51);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    call {:si_unique_call 2339} {:cexpr "y2"} boogie_si_record_i32($i54);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i54, $i47);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} qxl_dirty_update($p4, 0, $i47, $i57, $i58);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p8, 0, $sub.i64(0, 1);
    goto $bb4;

  $bb4:
    call $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p16, $i17, $i18, $i39, $i40 := qxl_deferred_io_loop_$bb4($i12, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p16, $i17, $i18, $i39, $i40);
    goto $bb4_last;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.6, $p21);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i23 := $shl.i64($i22, 12);
    call {:si_unique_call 2336} {:cexpr "start"} boogie_si_record_i64($i23);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 4095);
    call {:si_unique_call 2337} {:cexpr "end"} boogie_si_record_i64($i24);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i18, $i23);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i64($i17, $i24);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $i12);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i26, $i28;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i39, $i40;
    goto $bb3;

  $bb12:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p16, $i17, $i18 := $p34, $i28, $i26;
    goto $bb12_dummy;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i28 := $i17;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i26 := $i18;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10427;
}



const qxl_debugfs_irq_received: ref;

axiom qxl_debugfs_irq_received == $sub.ref(0, 878868);

procedure qxl_debugfs_irq_received($p0: ref, $p1: ref) returns ($r: i32);



const qxl_debugfs_buffers_info: ref;

axiom qxl_debugfs_buffers_info == $sub.ref(0, 879900);

procedure qxl_debugfs_buffers_info($p0: ref, $p1: ref) returns ($r: i32);



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 880932);

procedure rcu_read_lock();



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 881964);

procedure rcu_read_lock_held() returns ($r: i32);



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 882996);

procedure rcu_read_unlock();



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 884028);

procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32);



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 885060);

procedure rcu_lock_release($p0: ref);



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 886092);

procedure rcu_lock_acquire($p0: ref);



const qxl_get_driver_name: ref;

axiom qxl_get_driver_name == $sub.ref(0, 887124);

procedure qxl_get_driver_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_get_driver_name($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $r := .str.74;
    return;
}



const qxl_get_timeline_name: ref;

axiom qxl_get_timeline_name == $sub.ref(0, 888156);

procedure qxl_get_timeline_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qxl_get_timeline_name($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $r := .str.194;
    return;
}



const qxl_nop_signaling: ref;

axiom qxl_nop_signaling == $sub.ref(0, 889188);

procedure qxl_nop_signaling($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qxl_nop_signaling($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const qxl_fence_wait: ref;

axiom qxl_fence_wait == $sub.ref(0, 890220);

procedure qxl_fence_wait($p0: ref, $i1: i1, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_fence_wait($p0: ref, $i1: i1, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i35: i64;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i1;
  var $i64: i8;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i79: i1;
  var $i80: i8;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $i87: i1;
  var $i88: i8;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i8;
  var $i94: i1;
  var $i95: i1;
  var $i96: i8;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $i101: i8;
  var $i102: i1;
  var $i103: i1;
  var $i104: i8;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i1;
  var $i109: i8;
  var $i110: i1;
  var $i111: i1;
  var $i112: i8;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i8;
  var $i118: i1;
  var $i119: i1;
  var $i120: i8;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $i125: i8;
  var $i126: i1;
  var $i127: i1;
  var $i128: i8;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} {:cexpr "qxl_fence_wait:arg:intr"} boogie_si_record_i1($i1);
    call {:si_unique_call 2342} {:cexpr "qxl_fence_wait:arg:timeout"} boogie_si_record_i64($i2);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, jiffies);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $i2);
    call {:si_unique_call 2343} {:cexpr "end"} boogie_si_record_i64($i4);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 3120), 5336));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 2344} {:cexpr "have_drawable_releases"} boogie_si_record_i8($i13);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $i14 := fence_is_signaled($p0);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 2346} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb4;

  $bb4:
    call $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i47, $i48, $i49, $i50, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134 := qxl_fence_wait_loop_$bb4($p0, $i4, $p8, $i13, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i47, $i48, $i49, $i50, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} qxl_io_notify_oom($p8);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} $i18 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 2350} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} $i23 := fence_is_signaled($p0);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 2354} {:cexpr "tmp___2"} boogie_si_record_i8($i24);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} $i55 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i55);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $i60 := fence_is_signaled($p0);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} $i63 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $i68 := fence_is_signaled($p0);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} $i71 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} $i76 := fence_is_signaled($p0);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i79 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i8($i79);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i80);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := 1;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} $i84 := fence_is_signaled($p0);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i8($i84);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} $i87 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i8($i87);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := 1;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $i92 := fence_is_signaled($p0);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i8($i92);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i93);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} $i95 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i8($i95);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i8.i1($i96);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := 1;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $i100 := fence_is_signaled($p0);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i8($i100);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i101);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $i103 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $i104 := $zext.i1.i8($i103);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := 1;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $i108 := fence_is_signaled($p0);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i8($i108);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i109);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $i111 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i8($i111);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := 1;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $i116 := fence_is_signaled($p0);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i8($i116);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i8.i1($i117);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $i119 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i8($i119);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i8.i1($i120);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := 1;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $i124 := fence_is_signaled($p0);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i8($i124);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i8.i1($i125);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $i127 := qxl_queue_garbage_collect($p8, 1);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i8($i127);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i128);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := 1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} $i132 := fence_is_signaled($p0);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i8($i132);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} $i26 := fence_is_signaled($p0);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 2352} {:cexpr "tmp___3"} boogie_si_record_i8($i27);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i13);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i29 == 1);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i17, 3);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.6, jiffies);
    call {:si_unique_call 2347} {:cexpr "cur"} boogie_si_record_i64($i51);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i4, $i51);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i52, 0);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i4, $i51);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i35 := $i54;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb47:
    assume $i53 == 1;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i17, 2);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.6, jiffies);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i4, $i32);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i33, 0);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i13);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i17, 1);
    call {:si_unique_call 2358} {:cexpr "sc"} boogie_si_record_i32($i47);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} $i48 := fence_is_signaled($p0);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 2360} {:cexpr "tmp"} boogie_si_record_i8($i49);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb45;

  $bb45:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i47;
    goto $bb45_dummy;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb39:
    assume $i36 == 1;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i17, 300);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i38 := $i17;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb41;

  $bb42:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 268435455);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} vslice_dummy_var_189 := printk.ref.i32.i32.i32.i32(.str.193, $i40, $i42, $i45, $i38);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb35:
    assume $i34 == 1;
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb37;

  $bb32:
    assume $i31 == 1;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} usleep_range(500, 1000);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb28;

  $bb24:
    assume $i28 == 1;
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb140:
    assume $i129 == 1;
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb142;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb19;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb14;

  $bb130:
    assume $i121 == 1;
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i122 := 0;
    goto $bb132;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb19;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb14;

  $bb120:
    assume $i113 == 1;
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb122;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb19;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb14;

  $bb110:
    assume $i105 == 1;
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb112;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb19;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb14;

  $bb100:
    assume $i97 == 1;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i98 := 0;
    goto $bb102;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb19;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb14;

  $bb90:
    assume $i89 == 1;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb92;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb19;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb14;

  $bb80:
    assume $i81 == 1;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb82;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb19;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb14;

  $bb70:
    assume $i73 == 1;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb72;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb19;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb14;

  $bb60:
    assume $i65 == 1;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb62;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb19;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb14;

  $bb50:
    assume $i57 == 1;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb52;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb12;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb45_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const fence_is_signaled: ref;

axiom fence_is_signaled == $sub.ref(0, 891252);

procedure fence_is_signaled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fence_is_signaled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i4: i1;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 2381} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    call {:si_unique_call 2382} $i15 := devirtbounce.16($p14, $p0);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 2383} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} vslice_dummy_var_190 := fence_signal($p0);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const qxl_io_notify_oom: ref;

axiom qxl_io_notify_oom == $sub.ref(0, 892284);

procedure qxl_io_notify_oom($p0: ref);
  free requires assertsPassed;



implementation qxl_io_notify_oom($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5336)), $mul.ref(120, 1));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 4);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} outb(0, $i3);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 893316);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const qxl_bo_unreserve___2: ref;

axiom qxl_bo_unreserve___2 == $sub.ref(0, 894348);

procedure qxl_bo_unreserve___2($p0: ref);



const ttm_bo_unreserve___2: ref;

axiom ttm_bo_unreserve___2 == $sub.ref(0, 895380);

procedure ttm_bo_unreserve___2($p0: ref);



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 896412);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const qxl_process_single_command: ref;

axiom qxl_process_single_command == $sub.ref(0, 897444);

procedure qxl_process_single_command($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 898476);

procedure current_thread_info() returns ($r: ref);



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 899508);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);



const __copy_from_user_inatomic_nocache: ref;

axiom __copy_from_user_inatomic_nocache == $sub.ref(0, 900540);

procedure __copy_from_user_inatomic_nocache($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const qxlhw_handle_to_bo: ref;

axiom qxlhw_handle_to_bo == $sub.ref(0, 901572);

procedure qxlhw_handle_to_bo($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);



const apply_reloc: ref;

axiom apply_reloc == $sub.ref(0, 902604);

procedure apply_reloc($p0: ref, $p1: ref);



const apply_surf_reloc: ref;

axiom apply_surf_reloc == $sub.ref(0, 903636);

procedure apply_surf_reloc($p0: ref, $p1: ref);



const __copy_user_nocache: ref;

axiom __copy_user_nocache == $sub.ref(0, 904668);

procedure __copy_user_nocache($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i64);



const current_top_of_stack: ref;

axiom current_top_of_stack == $sub.ref(0, 905700);

procedure current_top_of_stack() returns ($r: i64);



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 906732);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 907764);

procedure __might_fault($p0: ref, $i1: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 908796);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 909828);

procedure __copy_from_user_overflow();



const malloc: ref;

axiom malloc == $sub.ref(0, 910860);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 2387} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 911892);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $p1 := calloc(1, $i0);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2390} __VERIFIER_assume($i4);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 912924);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2392} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.66;
    call {:si_unique_call 2393} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.66 := cmdloc_dummy_var_54;
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_pci_driver_19: ref;

axiom ldv_pci_driver_19 == $sub.ref(0, 913956);

procedure ldv_pci_driver_19();
  free requires assertsPassed;
  modifies $M.67, $M.6, $CurrAddr;



implementation ldv_pci_driver_19()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $M.67 := $p0;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_20: ref;

axiom ldv_dev_pm_ops_20 == $sub.ref(0, 914988);

procedure ldv_dev_pm_ops_20();
  free requires assertsPassed;
  modifies $M.68, $M.6, $CurrAddr;



implementation ldv_dev_pm_ops_20()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_21: ref;

axiom ldv_file_operations_21 == $sub.ref(0, 916020);

procedure ldv_file_operations_21();
  free requires assertsPassed;
  modifies $M.69, $M.70, $M.6, $CurrAddr;



implementation ldv_file_operations_21()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $M.69 := $p0;
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $M.70 := $p2;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_driver_18: ref;

axiom ldv_initialize_drm_driver_18 == $sub.ref(0, 917052);

procedure ldv_initialize_drm_driver_18();
  free requires assertsPassed;
  modifies $M.71, $M.72, $M.73, $M.74, $M.6, $CurrAddr;



implementation ldv_initialize_drm_driver_18()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} $p0 := ldv_init_zalloc(240);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $p2 := ldv_init_zalloc(744);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $M.72 := $p2;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $p4 := ldv_init_zalloc(248);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $M.73 := $p4;
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p6 := ldv_init_zalloc(3320);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $M.74 := $p6;
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 918084);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.75, $M.76, $M.77, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.59, $M.6, $M.98, $M.46, $M.33, $M.99, $M.67, $M.68, $M.71, $M.72, $M.73, $M.74, $M.69, $M.70, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.56, $M.137, $M.138, $M.145, $M.128, $M.146, $M.141, $M.139, $M.140, $M.42, $M.133, $M.134, $M.135, $M.136, $M.142, $M.47, $M.49, $M.51, $M.53, $M.48, $M.50, $M.52, $M.54, $M.143, $M.144, $M.156, $M.157, $M.158, $M.159, $M.160, $M.44, $M.43, $M.129, $M.211, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.132, $M.39, $M.130, $M.309, $M.310, $CurrAddr, $M.57, $M.40, $M.60, $M.35, $M.36, $M.32, $M.61, $M.62, $M.41, $M.63, $M.64, $M.65, $M.58, assertsPassed, $M.55;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i64;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i1;
  var $i166: i1;
  var $i167: i1;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $i171: i1;
  var $i172: i1;
  var $i173: i1;
  var $i174: i1;
  var $i175: i1;
  var $i176: i1;
  var $i177: i1;
  var $i178: i1;
  var $i179: i1;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i239: i64;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $i262: i32;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i1;
  var $i304: i1;
  var $i305: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $i331: i1;
  var $i332: i1;
  var $i333: i1;
  var $i334: i1;
  var $i335: i1;
  var $i336: i1;
  var $i337: i1;
  var $i338: i1;
  var $i339: i1;
  var $i340: i1;
  var $i341: i1;
  var $i342: i1;
  var $i343: i1;
  var $i344: i1;
  var $i345: i1;
  var $i346: i1;
  var $i347: i1;
  var $i348: i1;
  var $i349: i1;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $i362: i1;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i372: i32;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $p377: ref;
  var $i378: i32;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $i385: i32;
  var $i386: i1;
  var $i387: i32;
  var $i388: i1;
  var $i389: i32;
  var $i390: i32;
  var $i391: i1;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i32;
  var $i400: i32;
  var $i401: i1;
  var $i402: i32;
  var $i403: i1;
  var $i404: i32;
  var $i405: i32;
  var $i406: i1;
  var $i407: i32;
  var $i408: i1;
  var $i409: i32;
  var $i410: i32;
  var $i411: i1;
  var $i412: i32;
  var $i413: i1;
  var $i414: i32;
  var $i415: i32;
  var $i416: i1;
  var $i417: i32;
  var $i418: i1;
  var $i419: i32;
  var $i420: i32;
  var $i421: i1;
  var $i422: i32;
  var $i423: i32;
  var $i424: i32;
  var $i425: i1;
  var $i426: i32;
  var $i427: i32;
  var $i428: i1;
  var $i429: i32;
  var $i430: i1;
  var $i431: i32;
  var $i432: i32;
  var $i433: i1;
  var $i434: i32;
  var $i435: i1;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i440: i1;
  var $i441: i32;
  var $i442: i32;
  var $i443: i1;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i32;
  var $i448: i1;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i32;
  var $i453: i1;
  var $i454: i32;
  var $i455: i1;
  var $i457: i32;
  var $i458: i32;
  var $i459: i32;
  var $i460: i1;
  var $i461: i32;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i32;
  var $i466: i1;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i470: i1;
  var $i471: i1;
  var $i472: i1;
  var $i473: i1;
  var $i474: i32;
  var $i475: i1;
  var $p476: ref;
  var $i477: i32;
  var $i478: i32;
  var $i479: i1;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i1;
  var $p484: ref;
  var $i485: i32;
  var $i486: i1;
  var $i488: i32;
  var $i489: i1;
  var $i490: i32;
  var $i491: i1;
  var vslice_dummy_var_191: ref;
  var vslice_dummy_var_192: ref;
  var vslice_dummy_var_193: ref;
  var vslice_dummy_var_194: ref;
  var vslice_dummy_var_195: ref;
  var vslice_dummy_var_196: ref;
  var vslice_dummy_var_197: ref;
  var vslice_dummy_var_198: ref;
  var vslice_dummy_var_199: ref;
  var vslice_dummy_var_200: ref;
  var vslice_dummy_var_201: ref;
  var vslice_dummy_var_202: ref;
  var vslice_dummy_var_203: ref;
  var vslice_dummy_var_204: ref;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i64;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i64;
  var vslice_dummy_var_212: ref;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: ref;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: ref;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: ref;
  var vslice_dummy_var_227: ref;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    call {:si_unique_call 2402} $initialize();
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $p14 := ldv_init_zalloc(184);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} $p16 := ldv_init_zalloc(8);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $p18 := ldv_init_zalloc(16);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $p20 := ldv_init_zalloc(1);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} $p21 := ldv_init_zalloc(8);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $p23 := ldv_init_zalloc(184);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2425} $p26 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2426} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p26);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} $p28 := ldv_init_zalloc(16);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $p30 := ldv_init_zalloc(4);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $p32 := ldv_init_zalloc(4);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $p34 := ldv_init_zalloc(32);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2431} $p36 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2432} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p36);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} $p39 := ldv_init_zalloc(352);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p41 := ldv_init_zalloc(32);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} ldv_initialize();
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} vslice_dummy_var_191 := ldv_memset($p43, 0, 8);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p1);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} vslice_dummy_var_192 := ldv_memset($p45, 0, 8);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} vslice_dummy_var_193 := ldv_memset($p47, 0, 4);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} vslice_dummy_var_194 := ldv_memset($p49, 0, 4);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} vslice_dummy_var_195 := ldv_memset($p51, 0, 4);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p5);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} vslice_dummy_var_196 := ldv_memset($p53, 0, 4);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p6);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} vslice_dummy_var_197 := ldv_memset($p55, 0, 4);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p7);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} vslice_dummy_var_198 := ldv_memset($p57, 0, 4);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p8);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} vslice_dummy_var_199 := ldv_memset($p59, 0, 4);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p9);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} vslice_dummy_var_200 := ldv_memset($p61, 0, 4);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p10);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} vslice_dummy_var_201 := ldv_memset($p63, 0, 4);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p11);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} vslice_dummy_var_202 := ldv_memset($p65, 0, 4);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p12);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} vslice_dummy_var_203 := ldv_memset($p67, 0, 4);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p13);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} vslice_dummy_var_204 := ldv_memset($p69, 0, 8);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 2451} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 2452} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2453} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 2454} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} work_init_2();
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} work_init_1();
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 2459} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 2460} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2461} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 2462} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 2463} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 2464} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} work_init_3();
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 2467} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 2468} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 2469} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 2470} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 2471} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 2472} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 2473} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 2474} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 2475} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 2476} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $i111, $i112, $p113, $i115, $i116, $p117, $p118, $i120, $i121, $i122, $i123, $p124, $i125, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $p138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $p186, $i188, $i189, $p190, $i191, $i193, $i194, $p195, $p196, $i197, $i199, $i200, $p201, $i203, $i204, $p205, $p206, $i208, $i209, $p210, $i211, $i212, $p213, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i225, $i226, $p227, $p228, $i229, $i230, $i232, $i233, $p234, $p235, $i236, $i237, $p238, $i239, $i241, $i242, $p243, $i245, $i246, $p247, $p248, $i249, $i251, $i252, $p253, $i255, $i256, $p257, $i258, $i259, $p260, $p261, $i262, $i264, $i265, $p266, $i268, $i269, $p270, $p271, $i272, $i274, $i275, $p276, $i278, $i279, $p280, $p281, $i283, $i284, $i285, $i287, $i288, $p289, $i290, $i292, $i293, $p294, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p353, $i354, $i355, $i356, $i357, $i358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $p371, $i372, $i373, $i374, $i375, $i376, $p377, $i378, $i379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $i475, $p476, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i488, $i489, $i490, $i491, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p15, $p17, $p19, $p20, $p22, $p24, $p25, $p27, $p29, $p31, $p33, $p35, $p37, $p38, $p40, $p42, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $i111, $i112, $p113, $i115, $i116, $p117, $p118, $i120, $i121, $i122, $i123, $p124, $i125, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $p138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $p186, $i188, $i189, $p190, $i191, $i193, $i194, $p195, $p196, $i197, $i199, $i200, $p201, $i203, $i204, $p205, $p206, $i208, $i209, $p210, $i211, $i212, $p213, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i225, $i226, $p227, $p228, $i229, $i230, $i232, $i233, $p234, $p235, $i236, $i237, $p238, $i239, $i241, $i242, $p243, $i245, $i246, $p247, $p248, $i249, $i251, $i252, $p253, $i255, $i256, $p257, $i258, $i259, $p260, $p261, $i262, $i264, $i265, $p266, $i268, $i269, $p270, $p271, $i272, $i274, $i275, $p276, $i278, $i279, $p280, $p281, $i283, $i284, $i285, $i287, $i288, $p289, $i290, $i292, $i293, $p294, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p353, $i354, $i355, $i356, $i357, $i358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $p371, $i372, $i373, $i374, $i375, $i376, $p377, $i378, $i379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $i475, $p476, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i488, $i489, $i490, $i491, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i71, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i71, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i71, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i71, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i71, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} ldv_stop();
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb53_dummy;

  $bb13:
    assume $i77 == 1;
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i490 := $M.97;
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $i491 := $ne.i32($i490, 0);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb504:
    assume $i491 == 1;
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} ldv_main_exported_5();
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    goto $bb506;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i76 == 1;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i488 := $M.96;
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i489 := $ne.i32($i488, 0);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb501:
    assume $i489 == 1;
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} ldv_main_exported_10();
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    goto $bb503;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i75 == 1;
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i467 := $M.95;
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i468 := $ne.i32($i467, 0);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb473:
    assume $i468 == 1;
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2679} $i469 := __VERIFIER_nondet_int();
    call {:si_unique_call 2680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i469);
    call {:si_unique_call 2681} {:cexpr "tmp___20"} boogie_si_record_i32($i469);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $i470 := $slt.i32($i469, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    $i471 := $slt.i32($i469, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i469, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    assume !($i472 == 1);
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} ldv_stop();
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb480:
    assume $i472 == 1;
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $i485 := $M.95;
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 2);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb495:
    assume $i486 == 1;
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} vslice_dummy_var_233 := ldv_shutdown_19();
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2689} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb478:
    assume $i471 == 1;
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $i482 := $M.95;
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i482, 2);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb492:
    assume $i483 == 1;
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $p484 := $M.67;
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} qxl_pci_remove($p484);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2687} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb476:
    assume $i470 == 1;
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i469, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    assume !($i473 == 1);
    goto $bb482;

  $bb483:
    assume $i473 == 1;
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $i474 := $M.95;
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $i475 := $eq.i32($i474, 1);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb485:
    assume $i475 == 1;
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    $p476 := $M.67;
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} $i477 := qxl_pci_probe($p476, $p42);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $M.119 := $i477;
    call {:si_unique_call 2683} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i477);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $i478 := $M.119;
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 0);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb487:
    assume $i479 == 1;
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2684} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $i480 := $M.82;
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i481 := $add.i32($i480, 1);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $M.82 := $i481;
    call {:si_unique_call 2685} {:cexpr "ref_cnt"} boogie_si_record_i32($i481);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb7:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i71, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i71, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i79 == 1);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i465 := $M.94;
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb470:
    assume $i466 == 1;
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} ldv_main_exported_4();
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    goto $bb472;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i79 == 1;
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $i463 := $M.93;
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i464 := $ne.i32($i463, 0);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb467:
    assume $i464 == 1;
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} ldv_main_exported_8();
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    goto $bb469;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i78 == 1;
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i461 := $M.92;
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb464:
    assume $i462 == 1;
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} ldv_main_exported_15();
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb5:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i71, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i71, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i71, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i82 == 1);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i459 := $M.91;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i460 := $ne.i32($i459, 0);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb461:
    assume $i460 == 1;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} ldv_main_exported_14();
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb24:
    assume $i82 == 1;
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $i327 := $M.90;
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 0);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb294:
    assume $i328 == 1;
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2610} $i329 := __VERIFIER_nondet_int();
    call {:si_unique_call 2611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i329);
    call {:si_unique_call 2612} {:cexpr "tmp___19"} boogie_si_record_i32($i329);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i329, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    $i331 := $slt.i32($i329, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i332 := $slt.i32($i329, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    $i333 := $slt.i32($i329, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    $i334 := $slt.i32($i329, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i329, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} ldv_stop();
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb307:
    assume $i335 == 1;
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i454 := $M.90;
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i454, 15);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb455:
    assume $i455 == 1;
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} vslice_dummy_var_232 := ldv_complete_20();
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2672} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i457 := $M.82;
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $i458 := $sub.i32($i457, 1);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $M.82 := $i458;
    call {:si_unique_call 2673} {:cexpr "ref_cnt"} boogie_si_record_i32($i458);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb305:
    assume $i334 == 1;
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i449 := $M.90;
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, 5);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb449:
    assume $i450 == 1;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} $i451 := ldv_suspend_noirq_20();
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.118 := $i451;
    call {:si_unique_call 2669} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i451);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $i452 := $M.118;
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $i453 := $eq.i32($i452, 0);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb451:
    assume $i453 == 1;
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $M.90 := 11;
    call {:si_unique_call 2670} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(11);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb303:
    assume $i333 == 1;
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $i444 := $M.90;
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i444, 6);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb443:
    assume $i445 == 1;
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} $i446 := ldv_restore_noirq_20();
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $M.117 := $i446;
    call {:si_unique_call 2666} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i446);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $i447 := $M.117;
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, 0);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb445:
    assume $i448 == 1;
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $M.90 := 12;
    call {:si_unique_call 2667} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(12);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb301:
    assume $i332 == 1;
    assume {:verifier.code 0} true;
    $i336 := $slt.i32($i329, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i336 == 1);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i439 := $M.90;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i439, 3);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb437:
    assume $i440 == 1;
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $i441 := ldv_poweroff_late_20();
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $M.116 := $i441;
    call {:si_unique_call 2663} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i441);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $i442 := $M.116;
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 0);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb439:
    assume $i443 == 1;
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $M.90 := 7;
    call {:si_unique_call 2664} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(7);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb310:
    assume $i336 == 1;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i434 := $M.90;
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i434, 3);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb431:
    assume $i435 == 1;
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} $i436 := ldv_poweroff_noirq_20();
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $M.115 := $i436;
    call {:si_unique_call 2660} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i436);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i437 := $M.115;
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 0);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb433:
    assume $i438 == 1;
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $M.90 := 6;
    call {:si_unique_call 2661} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(6);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb299:
    assume $i331 == 1;
    assume {:verifier.code 0} true;
    $i337 := $slt.i32($i329, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i329, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    $i339 := $slt.i32($i329, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i339 == 1);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i429 := $M.90;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i430 := $eq.i32($i429, 8);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb425:
    assume $i430 == 1;
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $i431 := ldv_thaw_noirq_20();
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $M.114 := $i431;
    call {:si_unique_call 2657} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i431);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $i432 := $M.114;
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i432, 0);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb427:
    assume $i433 == 1;
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $M.90 := 13;
    call {:si_unique_call 2658} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(13);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb316:
    assume $i339 == 1;
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i424 := $M.90;
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 4);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb419:
    assume $i425 == 1;
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} $i426 := ldv_freeze_late_20();
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $M.113 := $i426;
    call {:si_unique_call 2654} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i426);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i427 := $M.113;
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 0);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb421:
    assume $i428 == 1;
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $M.90 := 9;
    call {:si_unique_call 2655} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(9);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb314:
    assume $i338 == 1;
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i417 := $M.90;
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, 1);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb413:
    assume $i418 == 1;
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} $i419 := ldv_prepare_20();
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $M.112 := $i419;
    call {:si_unique_call 2650} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i419);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $i420 := $M.112;
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i420, 0);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb415:
    assume $i421 == 1;
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 2651} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(2);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i422 := $M.82;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i423 := $add.i32($i422, 1);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $M.82 := $i423;
    call {:si_unique_call 2652} {:cexpr "ref_cnt"} boogie_si_record_i32($i423);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb312:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i329, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i340 == 1);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i412 := $M.90;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 4);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb407:
    assume $i413 == 1;
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} $i414 := ldv_freeze_noirq_20();
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $M.111 := $i414;
    call {:si_unique_call 2647} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i414);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i415 := $M.111;
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i415, 0);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb409:
    assume $i416 == 1;
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $M.90 := 8;
    call {:si_unique_call 2648} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(8);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb318:
    assume $i340 == 1;
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i407 := $M.90;
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 11);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb401:
    assume $i408 == 1;
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $i409 := ldv_resume_noirq_20();
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $M.110 := $i409;
    call {:si_unique_call 2644} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i409);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $i410 := $M.110;
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i411 := $eq.i32($i410, 0);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb403:
    assume $i411 == 1;
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $M.90 := 14;
    call {:si_unique_call 2645} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(14);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb297:
    assume $i330 == 1;
    assume {:verifier.code 0} true;
    $i341 := $slt.i32($i329, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    $i342 := $slt.i32($i329, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i329, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    $i344 := $slt.i32($i329, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i344 == 1);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i402 := $M.90;
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i402, 9);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb395:
    assume $i403 == 1;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $i404 := ldv_thaw_early_20();
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $M.109 := $i404;
    call {:si_unique_call 2641} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i404);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i405 := $M.109;
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i405, 0);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb397:
    assume $i406 == 1;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $M.90 := 13;
    call {:si_unique_call 2642} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(13);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb326:
    assume $i344 == 1;
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i397 := $M.90;
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 10);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb389:
    assume $i398 == 1;
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} $i399 := ldv_resume_early_20();
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $M.108 := $i399;
    call {:si_unique_call 2638} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i399);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i400 := $M.108;
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 0);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb391:
    assume $i401 == 1;
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $M.90 := 14;
    call {:si_unique_call 2639} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(14);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb324:
    assume $i343 == 1;
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i392 := $M.90;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 7);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb383:
    assume $i393 == 1;
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $i394 := ldv_restore_early_20();
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $M.107 := $i394;
    call {:si_unique_call 2635} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i394);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $i395 := $M.107;
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 0);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb385:
    assume $i396 == 1;
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $M.90 := 12;
    call {:si_unique_call 2636} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(12);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb322:
    assume $i342 == 1;
    assume {:verifier.code 0} true;
    $i345 := $slt.i32($i329, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i345 == 1);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i387 := $M.90;
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 5);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb377:
    assume $i388 == 1;
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} $i389 := ldv_suspend_late_20();
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $M.106 := $i389;
    call {:si_unique_call 2632} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i389);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i390 := $M.106;
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 0);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb379:
    assume $i391 == 1;
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $M.90 := 10;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(10);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb328:
    assume $i345 == 1;
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i381 := $M.90;
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 14);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb371:
    assume $i382 == 1;
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $p383 := $M.68;
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $i384 := qxl_pm_resume($p383);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $M.105 := $i384;
    call {:si_unique_call 2629} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i384);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $i385 := $M.105;
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 0);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb373:
    assume $i386 == 1;
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $M.90 := 15;
    call {:si_unique_call 2630} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(15);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb375;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb320:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $i346 := $slt.i32($i329, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    $i347 := $slt.i32($i329, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    $i348 := $slt.i32($i329, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i348 == 1);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i375 := $M.90;
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 2);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb365:
    assume $i376 == 1;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $p377 := $M.68;
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $i378 := qxl_pm_suspend($p377);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $M.104 := $i378;
    call {:si_unique_call 2626} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i378);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $i379 := $M.104;
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 0);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb367:
    assume $i380 == 1;
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $M.90 := 5;
    call {:si_unique_call 2627} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(5);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb369;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb334:
    assume $i348 == 1;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $i369 := $M.90;
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 2);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb359:
    assume $i370 == 1;
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $p371 := $M.68;
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i372 := qxl_pm_freeze($p371);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $M.103 := $i372;
    call {:si_unique_call 2623} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i372);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i373 := $M.103;
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb361:
    assume $i374 == 1;
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $M.90 := 4;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(4);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    goto $bb363;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb332:
    assume $i347 == 1;
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i363 := $M.90;
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 2);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb353:
    assume $i364 == 1;
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $p365 := $M.68;
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $i366 := qxl_pm_freeze($p365);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $M.102 := $i366;
    call {:si_unique_call 2620} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i366);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i367 := $M.102;
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 0);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb355:
    assume $i368 == 1;
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $M.90 := 3;
    call {:si_unique_call 2621} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(3);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    goto $bb357;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb330:
    assume $i346 == 1;
    assume {:verifier.code 0} true;
    $i349 := $slt.i32($i329, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i349 == 1);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i357 := $M.90;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 13);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb347:
    assume $i358 == 1;
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $p359 := $M.68;
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} $i360 := qxl_pm_thaw($p359);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $M.101 := $i360;
    call {:si_unique_call 2617} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i360);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $i361 := $M.101;
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 0);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb349:
    assume $i362 == 1;
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $M.90 := 15;
    call {:si_unique_call 2618} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(15);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    goto $bb351;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb336:
    assume $i349 == 1;
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i329, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb309;

  $bb338:
    assume $i350 == 1;
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i351 := $M.90;
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 12);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb340:
    assume $i352 == 1;
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $p353 := $M.68;
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $i354 := qxl_pm_restore($p353);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $M.100 := $i354;
    call {:si_unique_call 2614} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i354);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i355 := $M.100;
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 0);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb342:
    assume $i356 == 1;
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $M.90 := 15;
    call {:si_unique_call 2615} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(15);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    goto $bb344;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i81 == 1;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i325 := $M.89;
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i326 := $ne.i32($i325, 0);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb291:
    assume $i326 == 1;
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} ldv_main_exported_12();
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb20:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i71, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i323 := $M.88;
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb288:
    assume $i324 == 1;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} ldv_main_exported_9();
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb3:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i71, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i71, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i71, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i71, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i321 := $M.86;
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb285:
    assume $i322 == 1;
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} ldv_main_exported_6();
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i319 := $M.85;
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb282:
    assume $i320 == 1;
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} ldv_main_exported_13();
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb32:
    assume $i86 == 1;
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i317 := $M.84;
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i318 := $ne.i32($i317, 0);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb279:
    assume $i318 == 1;
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} ldv_main_exported_16();
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    goto $bb281;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i71, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i71, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i300 := $M.83;
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb249:
    assume $i301 == 1;
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2562} $i302 := __VERIFIER_nondet_int();
    call {:si_unique_call 2563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i302);
    call {:si_unique_call 2564} {:cexpr "tmp___18"} boogie_si_record_i32($i302);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i303 := $slt.i32($i302, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i302, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} ldv_stop();
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb254:
    assume $i304 == 1;
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i310 := $M.83;
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 1);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb267:
    assume $i311 == 1;
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $i312 := qxl_init();
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.99 := $i312;
    call {:si_unique_call 2569} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i312);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $i313 := $M.99;
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 0);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i315 := $M.99;
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb272:
    assume $i316 == 1;
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 2603} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} ldv_check_final_state();
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb269:
    assume $i314 == 1;
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 2570} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2572} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} ldv_pci_driver_19();
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2574} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2575} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} ldv_initialize_fence_ops_4();
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 2577} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} ldv_initialize_ttm_bo_driver_8();
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2579} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} ldv_initialize_drm_crtc_helper_funcs_15();
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2581} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} ldv_initialize_drm_encoder_helper_funcs_14();
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2583} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} ldv_dev_pm_ops_20();
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2585} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} ldv_initialize_drm_connector_funcs_12();
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2587} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} ldv_initialize_ttm_backend_func_9();
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2589} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} ldv_initialize_fb_ops_6();
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2591} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} ldv_initialize_drm_connector_helper_funcs_13();
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2593} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} ldv_initialize_drm_framebuffer_funcs_16();
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2595} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_initialize_drm_driver_18();
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2597} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_initialize_drm_crtc_funcs_17();
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2599} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2600} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} ldv_file_operations_21();
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2602} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb252:
    assume $i303 == 1;
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i302, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb256;

  $bb257:
    assume $i305 == 1;
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i306 := $M.83;
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 3);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb259:
    assume $i307 == 1;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i308 := $M.82;
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb261;

  $bb262:
    assume $i309 == 1;
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} qxl_exit();
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $M.83 := 2;
    call {:si_unique_call 2566} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i154 := $M.81;
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb109:
    assume $i155 == 1;
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2506} $i156 := __VERIFIER_nondet_int();
    call {:si_unique_call 2507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i156);
    call {:si_unique_call 2508} {:cexpr "tmp___17"} boogie_si_record_i32($i156);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i156, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i156, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i156, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i156, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i156, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i156, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} ldv_stop();
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb122:
    assume $i162 == 1;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i296 := $M.81;
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb243:
    assume $i297 == 1;
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p298 := $M.74;
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.66, $p12);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} qxl_noop_disable_vblank($p298, $i299);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2560} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb120:
    assume $i161 == 1;
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i292 := $M.81;
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 1);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb240:
    assume $i293 == 1;
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $p294 := $M.71;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} vslice_dummy_var_231 := qxl_debugfs_init($p294);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2558} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb118:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i156, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i163 == 1);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i287 := $M.81;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 1);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb237:
    assume $i288 == 1;
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p289 := $M.74;
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.66, $p4);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} vslice_dummy_var_230 := qxl_noop_enable_vblank($p289, $i290);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2556} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb125:
    assume $i163 == 1;
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i283 := $M.81;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb234:
    assume $i284 == 1;
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.66, $p7);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} vslice_dummy_var_229 := qxl_irq_handler($i285, $p38);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2554} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    goto $bb236;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i156, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i156, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i165 == 1);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $i278 := $M.81;
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 1);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb231:
    assume $i279 == 1;
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $p280 := $M.72;
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $p281 := $M.74;
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} vslice_dummy_var_228 := qxl_mode_dumb_create($p280, $p281, $p35);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2552} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    goto $bb233;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb129:
    assume $i165 == 1;
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $i274 := $M.81;
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 1);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb228:
    assume $i275 == 1;
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p276 := $M.73;
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} vslice_dummy_var_227 := qxl_gem_prime_vmap($p276);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2550} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb127:
    assume $i164 == 1;
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i268 := $M.81;
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 1);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb225:
    assume $i269 == 1;
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $p270 := $M.74;
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $p271 := $M.73;
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.66, $p8);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} vslice_dummy_var_226 := drm_gem_prime_export($p270, $p271, $i272);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2548} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb114:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $i166 := $slt.i32($i156, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i156, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i156, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i168 == 1);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i264 := $M.81;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 1);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb222:
    assume $i265 == 1;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p266 := $M.74;
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} vslice_dummy_var_225 := drm_pci_set_busid($p266, $p40);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2546} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb135:
    assume $i168 == 1;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i258 := $M.81;
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 1);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb219:
    assume $i259 == 1;
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $p260 := $M.74;
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $p261 := $M.72;
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.66, $p10);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} vslice_dummy_var_224 := drm_gem_prime_fd_to_handle($p260, $p261, $i262, $p33);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2544} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb133:
    assume $i167 == 1;
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i255 := $M.81;
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 1);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb216:
    assume $i256 == 1;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $p257 := $M.73;
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} qxl_gem_prime_vunmap($p257, $p25);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2542} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb131:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i156, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i156, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i170 == 1);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $i251 := $M.81;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 1);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb213:
    assume $i252 == 1;
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $p253 := $M.73;
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} vslice_dummy_var_223 := qxl_gem_prime_mmap($p253, $p24);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2540} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb139:
    assume $i170 == 1;
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i245 := $M.81;
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb210:
    assume $i246 == 1;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p247 := $M.72;
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p248 := $M.74;
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.66, $p11);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} vslice_dummy_var_222 := drm_gem_dumb_destroy($p247, $p248, $i249);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2538} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb137:
    assume $i169 == 1;
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i241 := $M.81;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 1);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb207:
    assume $i242 == 1;
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $p243 := $M.73;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} vslice_dummy_var_221 := qxl_gem_prime_get_sg_table($p243);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2536} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb112:
    assume $i157 == 1;
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i156, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i156, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i156, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i174 := $slt.i32($i156, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i174 == 1);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i236 := $M.81;
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 1);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb204:
    assume $i237 == 1;
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $p238 := $M.74;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i239 := $load.i64($M.66, $p13);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} vslice_dummy_var_220 := qxl_driver_load($p238, $i239);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2534} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    goto $bb206;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb147:
    assume $i174 == 1;
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i232 := $M.81;
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 1);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb201:
    assume $i233 == 1;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $p234 := $M.73;
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $p235 := $M.72;
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} qxl_gem_object_close($p234, $p235);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2532} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb145:
    assume $i173 == 1;
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i156, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i175 == 1);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i225 := $M.81;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 1);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb198:
    assume $i226 == 1;
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $p227 := $M.74;
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $p228 := $M.72;
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.66, $p5);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.66, $p9);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} vslice_dummy_var_219 := drm_gem_prime_handle_to_fd($p227, $p228, $i229, $i230, $p31);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2530} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb149:
    assume $i175 == 1;
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $i221 := $M.81;
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb195:
    assume $i222 == 1;
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $p223 := $M.74;
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} vslice_dummy_var_218 := qxl_driver_unload($p223);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2528} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    goto $bb197;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i156, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i177 := $slt.i32($i156, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i177 == 1);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i218 := $M.81;
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb192:
    assume $i219 == 1;
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $p220 := $M.73;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} qxl_gem_prime_unpin($p220);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2526} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb153:
    assume $i177 == 1;
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i215 := $M.81;
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 1);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb189:
    assume $i216 == 1;
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p217 := $M.73;
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} qxl_gem_object_free($p217);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2524} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    goto $bb191;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb151:
    assume $i176 == 1;
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i211 := $M.81;
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 1);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb186:
    assume $i212 == 1;
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $p213 := $M.73;
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} vslice_dummy_var_217 := qxl_gem_prime_pin($p213);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2522} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb141:
    assume $i171 == 1;
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i156, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i156, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i156, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i180 == 1);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i208 := $M.81;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb183:
    assume $i209 == 1;
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $p210 := $M.71;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} qxl_debugfs_takedown($p210);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2520} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb159:
    assume $i180 == 1;
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i203 := $M.81;
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 1);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb180:
    assume $i204 == 1;
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p205 := $M.73;
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $p206 := $M.72;
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} vslice_dummy_var_216 := qxl_gem_object_open($p205, $p206);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2518} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb157:
    assume $i179 == 1;
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i199 := $M.81;
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb177:
    assume $i200 == 1;
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $p201 := $M.74;
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} vslice_dummy_var_215 := drm_gem_prime_import($p201, $p37);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2516} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb155:
    assume $i178 == 1;
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i156, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i156, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i182 == 1);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i193 := $M.81;
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 1);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb174:
    assume $i194 == 1;
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p195 := $M.72;
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p196 := $M.74;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.66, $p6);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} vslice_dummy_var_214 := qxl_mode_dumb_mmap($p195, $p196, $i197, $p22);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2514} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb176;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb163:
    assume $i182 == 1;
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i188 := $M.81;
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb171:
    assume $i189 == 1;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $p190 := $M.74;
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.66, $p3);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} vslice_dummy_var_213 := qxl_noop_get_vblank_counter($p190, $i191);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2512} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb161:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i156, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb124;

  $bb165:
    assume $i183 == 1;
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i184 := $M.81;
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb167:
    assume $i185 == 1;
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $p186 := $M.74;
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} vslice_dummy_var_212 := qxl_gem_prime_import_sg_table($p186, $p27, $p29);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2510} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb28:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i71, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i71, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i71, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i92 == 1);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb44:
    assume $i92 == 1;
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i152 := $M.78;
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb106:
    assume $i153 == 1;
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} ldv_main_exported_17();
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i91 == 1;
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i150 := $M.77;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb103:
    assume $i151 == 1;
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} ldv_main_exported_7();
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb40:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i71, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i93 == 1);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i97 := $M.76;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb54:
    assume $i98 == 1;
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2481} $i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 2482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
    call {:si_unique_call 2483} {:cexpr "tmp___16"} boogie_si_record_i32($i99);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i99, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i99, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i99, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} ldv_stop();
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb63:
    assume $i103 == 1;
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i144 := $M.76;
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb97:
    assume $i145 == 1;
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $p146 := $M.70;
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.66, $p2);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.66, $p0);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} vslice_dummy_var_211 := drm_ioctl($p146, $i147, $i148);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2502} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb61:
    assume $i102 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i135 := $M.76;
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb91:
    assume $i136 == 1;
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p137 := $M.69;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p138 := $M.70;
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $i139 := drm_open($p137, $p138);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $M.98 := $i139;
    call {:si_unique_call 2498} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i139);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i140 := $M.98;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i141 == 1;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2499} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i142 := $M.82;
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 1);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $M.82 := $i143;
    call {:si_unique_call 2500} {:cexpr "ref_cnt"} boogie_si_record_i32($i143);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb59:
    assume $i101 == 1;
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i127 := $M.76;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i131 := $M.76;
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb88:
    assume $i132 == 1;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p133 := $M.70;
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} vslice_dummy_var_210 := drm_poll($p133, $p19);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2496} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i128 == 1;
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $p129 := $M.70;
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} vslice_dummy_var_209 := drm_poll($p129, $p19);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2494} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb57:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i105 == 1);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i122 := $M.76;
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 2);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb82:
    assume $i123 == 1;
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $p124 := $M.70;
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.66, $p1);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} vslice_dummy_var_208 := drm_read($p124, $p20, $i125, $p17);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2492} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb68:
    assume $i105 == 1;
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i115 := $M.76;
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 2);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb79:
    assume $i116 == 1;
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p117 := $M.69;
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $p118 := $M.70;
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} vslice_dummy_var_207 := drm_release($p117, $p118);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2489} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i120 := $M.82;
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $i121 := $sub.i32($i120, 1);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $M.82 := $i121;
    call {:si_unique_call 2490} {:cexpr "ref_cnt"} boogie_si_record_i32($i121);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb66:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb65;

  $bb70:
    assume $i106 == 1;
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i107 := $M.76;
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i111 := $M.76;
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 2);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i112 == 1;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p113 := $M.70;
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} vslice_dummy_var_206 := qxl_mmap($p113, $p15);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2487} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i108 == 1;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $p109 := $M.70;
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} vslice_dummy_var_205 := qxl_mmap($p109, $p15);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2485} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb46:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i71, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb15;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i95 := $M.75;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i96 == 1;
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} ldv_main_exported_11();
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2477} $i71 := __VERIFIER_nondet_int();
    call {:si_unique_call 2478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i71);
    call {:si_unique_call 2479} {:cexpr "tmp___15"} boogie_si_record_i32($i71);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 919116);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 920148);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 2694} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 2695} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 2696} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 2697} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 921180);

procedure work_init_1();
  free requires assertsPassed;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 922212);

procedure work_init_3();
  free requires assertsPassed;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_11: ref;

axiom ldv_main_exported_11 == $sub.ref(0, 923244);

procedure ldv_main_exported_11();
  free requires assertsPassed;
  modifies $M.75, $M.82, $M.6, $CurrAddr;



implementation ldv_main_exported_11()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} $p0 := ldv_init_zalloc(96);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2707} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2708} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2709} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} ldv_stop();
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i10 := $M.75;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} vslice_dummy_var_234 := ldv_probe_11();
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 2714} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $i13 := $M.82;
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $M.82 := $i14;
    call {:si_unique_call 2715} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i6 := $M.75;
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} qxl_enc_destroy($p1);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2711} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i8 := $M.82;
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $M.82 := $i9;
    call {:si_unique_call 2712} {:cexpr "ref_cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 924276);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 925308);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.77, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} $p0 := ldv_init_zalloc(16);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} $p2 := ldv_init_zalloc(1608);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2719} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 2721} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} ldv_stop();
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $i6 := $M.77;
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} qxl_deferred_io($p3, $p1);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2723} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_17: ref;

axiom ldv_main_exported_17 == $sub.ref(0, 926340);

procedure ldv_main_exported_17();
  free requires assertsPassed;
  modifies $M.66, $M.6, $M.57, $M.40, $M.78, $M.60, $M.35, $M.36, $M.39, $M.82, $M.41, $CurrAddr, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.55, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_main_exported_17()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i88: i32;
  var $i89: i1;
  var $i91: i32;
  var $i92: i1;
  var $i94: i32;
  var $i95: i32;
  var vslice_dummy_var_235: ref;
  var vslice_dummy_var_236: ref;
  var vslice_dummy_var_237: ref;
  var vslice_dummy_var_238: ref;
  var vslice_dummy_var_239: ref;
  var vslice_dummy_var_240: ref;
  var vslice_dummy_var_241: ref;
  var vslice_dummy_var_242: ref;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} $p8 := ldv_init_zalloc(48);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} $p10 := ldv_init_zalloc(168);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} $p12 := ldv_init_zalloc(88);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} $p14 := ldv_init_zalloc(744);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} vslice_dummy_var_235 := ldv_memset($p16, 0, 4);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} vslice_dummy_var_236 := ldv_memset($p18, 0, 4);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} vslice_dummy_var_237 := ldv_memset($p20, 0, 4);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} vslice_dummy_var_238 := ldv_memset($p22, 0, 4);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} vslice_dummy_var_239 := ldv_memset($p24, 0, 4);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} vslice_dummy_var_240 := ldv_memset($p26, 0, 4);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p6);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} vslice_dummy_var_241 := ldv_memset($p28, 0, 4);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p7);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} vslice_dummy_var_242 := ldv_memset($p30, 0, 4);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2745} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 2746} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
    call {:si_unique_call 2747} {:cexpr "tmp___3"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} ldv_stop();
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i91 := $M.78;
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb45:
    assume $i92 == 1;
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} vslice_dummy_var_251 := ldv_probe_17();
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i94 := $M.82;
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 1);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $M.82 := $i95;
    call {:si_unique_call 2769} {:cexpr "ref_cnt"} boogie_si_record_i32($i95);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $i85 := $M.78;
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i88 := $M.78;
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 2);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb42:
    assume $i89 == 1;
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} vslice_dummy_var_250 := drm_crtc_helper_set_config($p9);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i86 == 1;
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} vslice_dummy_var_249 := drm_crtc_helper_set_config($p9);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i80 := $M.78;
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb36:
    assume $i81 == 1;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $p82 := $M.128;
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} qxl_crtc_destroy($p82);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i83 := $M.82;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i83, 1);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $M.82 := $i84;
    call {:si_unique_call 2762} {:cexpr "ref_cnt"} boogie_si_record_i32($i84);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb2:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i32, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $i70 := $M.78;
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i75 := $M.78;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb33:
    assume $i76 == 1;
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $p77 := $M.128;
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.66, $p6);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} vslice_dummy_var_248 := qxl_crtc_page_flip($p77, $p11, $p13, $i78);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2759} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i71 == 1;
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $p72 := $M.128;
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.66, $p6);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} vslice_dummy_var_247 := qxl_crtc_page_flip($p72, $p11, $p13, $i73);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2757} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $i58 := $M.78;
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i64 := $M.78;
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $p66 := $M.128;
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.66, $p4);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.66, $p2);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} vslice_dummy_var_246 := qxl_crtc_cursor_move($p66, $i67, $i68);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2755} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i59 == 1;
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $p60 := $M.128;
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.66, $p4);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.66, $p2);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} vslice_dummy_var_245 := qxl_crtc_cursor_move($p60, $i61, $i62);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2753} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb10;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $i40 := $M.78;
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i49 := $M.78;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 2);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $p51 := $M.128;
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.66, $p7);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.66, $p1);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.66, $p3);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.66, $p5);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.66, $p0);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} vslice_dummy_var_244 := qxl_crtc_cursor_set2($p51, $p15, $i52, $i53, $i54, $i55, $i56);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2751} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(2);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $p42 := $M.128;
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.66, $p7);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.66, $p1);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.66, $p3);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.66, $p5);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.66, $p0);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} vslice_dummy_var_243 := qxl_crtc_cursor_set2($p42, $p15, $i43, $i44, $i45, $i46, $i47);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2749} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_868:
    assume !assertsPassed;
    return;
}



const qxl_exit: ref;

axiom qxl_exit == $sub.ref(0, 927372);

procedure qxl_exit();
  free requires assertsPassed;



implementation qxl_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} drm_pci_exit(qxl_driver, qxl_pci_driver);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    return;
}



const qxl_init: ref;

axiom qxl_init == $sub.ref(0, 928404);

procedure qxl_init() returns ($r: i32);
  free requires assertsPassed;



implementation qxl_init() returns ($r: i32)
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} $i0 := vgacon_text_force();
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 2773} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.129;
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.130;
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} $i9 := drm_pci_init(qxl_driver, qxl_pci_driver);
    call {:si_unique_call 2775} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $i3 := $M.129;
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb6;
}



const ldv_initialize_fence_ops_4: ref;

axiom ldv_initialize_fence_ops_4 == $sub.ref(0, 929436);

procedure ldv_initialize_fence_ops_4();
  free requires assertsPassed;
  modifies $M.132, $M.6, $CurrAddr;



implementation ldv_initialize_fence_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $M.132 := $p0;
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ttm_bo_driver_8: ref;

axiom ldv_initialize_ttm_bo_driver_8 == $sub.ref(0, 930468);

procedure ldv_initialize_ttm_bo_driver_8();
  free requires assertsPassed;
  modifies $M.133, $M.134, $M.135, $M.136, $M.6, $CurrAddr;



implementation ldv_initialize_ttm_bo_driver_8()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} $p0 := ldv_init_zalloc(2592);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $M.133 := $p0;
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} $p2 := ldv_init_zalloc(80);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $M.134 := $p2;
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} $p4 := ldv_init_zalloc(96);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $M.135 := $p4;
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} $p6 := ldv_init_zalloc(872);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $M.136 := $p6;
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_crtc_helper_funcs_15: ref;

axiom ldv_initialize_drm_crtc_helper_funcs_15 == $sub.ref(0, 931500);

procedure ldv_initialize_drm_crtc_helper_funcs_15();
  free requires assertsPassed;
  modifies $M.137, $M.138, $M.6, $CurrAddr;



implementation ldv_initialize_drm_crtc_helper_funcs_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} $p0 := ldv_init_zalloc(1160);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $M.137 := $p0;
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} $p2 := ldv_init_zalloc(208);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $M.138 := $p2;
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_encoder_helper_funcs_14: ref;

axiom ldv_initialize_drm_encoder_helper_funcs_14 == $sub.ref(0, 932532);

procedure ldv_initialize_drm_encoder_helper_funcs_14();
  free requires assertsPassed;
  modifies $M.139, $M.140, $M.6, $CurrAddr;



implementation ldv_initialize_drm_encoder_helper_funcs_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} $p0 := ldv_init_zalloc(96);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $M.139 := $p0;
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} $p2 := ldv_init_zalloc(208);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $M.140 := $p2;
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_connector_funcs_12: ref;

axiom ldv_initialize_drm_connector_funcs_12 == $sub.ref(0, 933564);

procedure ldv_initialize_drm_connector_funcs_12();
  free requires assertsPassed;
  modifies $M.141, $M.6, $CurrAddr;



implementation ldv_initialize_drm_connector_funcs_12()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} $p0 := ldv_init_zalloc(936);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $M.141 := $p0;
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ttm_backend_func_9: ref;

axiom ldv_initialize_ttm_backend_func_9 == $sub.ref(0, 934596);

procedure ldv_initialize_ttm_backend_func_9();
  free requires assertsPassed;
  modifies $M.142, $M.6, $CurrAddr;



implementation ldv_initialize_ttm_backend_func_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} $p0 := ldv_init_zalloc(80);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $M.142 := $p0;
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_fb_ops_6: ref;

axiom ldv_initialize_fb_ops_6 == $sub.ref(0, 935628);

procedure ldv_initialize_fb_ops_6();
  free requires assertsPassed;
  modifies $M.143, $M.144, $M.6, $CurrAddr;



implementation ldv_initialize_fb_ops_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $M.143 := $p0;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $p2 := ldv_init_zalloc(1608);
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $M.144 := $p2;
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_connector_helper_funcs_13: ref;

axiom ldv_initialize_drm_connector_helper_funcs_13 == $sub.ref(0, 936660);

procedure ldv_initialize_drm_connector_helper_funcs_13();
  free requires assertsPassed;
  modifies $M.145, $M.6, $CurrAddr;



implementation ldv_initialize_drm_connector_helper_funcs_13()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} $p0 := ldv_init_zalloc(936);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $M.145 := $p0;
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_framebuffer_funcs_16: ref;

axiom ldv_initialize_drm_framebuffer_funcs_16 == $sub.ref(0, 937692);

procedure ldv_initialize_drm_framebuffer_funcs_16();
  free requires assertsPassed;
  modifies $M.146, $M.6, $CurrAddr;



implementation ldv_initialize_drm_framebuffer_funcs_16()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} $p0 := ldv_init_zalloc(168);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $M.146 := $p0;
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_drm_crtc_funcs_17: ref;

axiom ldv_initialize_drm_crtc_funcs_17 == $sub.ref(0, 938724);

procedure ldv_initialize_drm_crtc_funcs_17();
  free requires assertsPassed;
  modifies $M.128, $M.6, $CurrAddr;



implementation ldv_initialize_drm_crtc_funcs_17()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} $p0 := ldv_init_zalloc(1160);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $M.128 := $p0;
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_16: ref;

axiom ldv_main_exported_16 == $sub.ref(0, 939756);

procedure ldv_main_exported_16();
  free requires assertsPassed;
  modifies $M.66, $M.84, $M.82, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.46, $M.39, $M.41, $M.58, assertsPassed, $M.61, $M.62, $M.55, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation ldv_main_exported_16()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i32;
  var vslice_dummy_var_252: ref;
  var vslice_dummy_var_253: ref;
  var vslice_dummy_var_254: ref;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} $p3 := ldv_init_zalloc(744);
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} $p5 := ldv_init_zalloc(8);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} vslice_dummy_var_252 := ldv_memset($p7, 0, 4);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} vslice_dummy_var_253 := ldv_memset($p9, 0, 4);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} vslice_dummy_var_254 := ldv_memset($p11, 0, 4);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2800} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 2801} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 2802} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} ldv_stop();
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i37 := $M.84;
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} vslice_dummy_var_257 := ldv_probe_16();
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 2811} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i40 := $M.82;
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $M.82 := $i41;
    call {:si_unique_call 2812} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i23 := $M.84;
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $M.84;
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $p32 := $M.146;
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.66, $p0);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.66, $p2);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.66, $p1);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} vslice_dummy_var_256 := qxl_framebuffer_surface_dirty($p32, $p4, $i33, $i34, $p6, $i35);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $M.84 := 2;
    call {:si_unique_call 2809} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $p25 := $M.146;
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.66, $p0);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.66, $p2);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.66, $p1);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} vslice_dummy_var_255 := qxl_framebuffer_surface_dirty($p25, $p4, $i26, $i27, $p6, $i28);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2807} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i18 := $M.84;
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p20 := $M.146;
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} qxl_user_framebuffer_destroy($p20);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2804} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $i21 := $M.82;
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $M.82 := $i22;
    call {:si_unique_call 2805} {:cexpr "ref_cnt"} boogie_si_record_i32($i22);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_13: ref;

axiom ldv_main_exported_13 == $sub.ref(0, 940788);

procedure ldv_main_exported_13();
  free requires assertsPassed;
  modifies $M.61, $M.62, $M.85, $M.6, $M.63, $M.64, $CurrAddr;



implementation ldv_main_exported_13()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} $p0 := ldv_init_zalloc(208);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2815} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2816} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2817} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} ldv_stop();
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i15 := $M.85;
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p17 := $M.145;
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} vslice_dummy_var_260 := qxl_best_encoder($p17);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2823} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $i11 := $M.85;
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $p13 := $M.145;
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} vslice_dummy_var_259 := qxl_conn_mode_valid($p13, $p1);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2821} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i7 := $M.85;
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $p9 := $M.145;
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} vslice_dummy_var_258 := qxl_conn_get_modes($p9);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2819} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 941820);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.66, $M.86, $M.6, $M.39, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var vslice_dummy_var_261: ref;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} $p1 := ldv_init_zalloc(80);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} $p3 := ldv_init_zalloc(24);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} $p5 := ldv_init_zalloc(24);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} $p7 := ldv_init_zalloc(40);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} vslice_dummy_var_261 := ldv_memset($p9, 0, 4);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2831} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 2832} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 2833} {:cexpr "tmp___3"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i11, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i11, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} ldv_stop();
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $i59 := $M.86;
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb53:
    assume $i60 == 1;
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $p61 := $M.144;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} vslice_dummy_var_268 := drm_fb_helper_set_par($p61);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2853} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $i55 := $M.86;
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb50:
    assume $i56 == 1;
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $p57 := $M.144;
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} vslice_dummy_var_267 := drm_fb_helper_debug_enter($p57);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2851} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $i52 := $M.86;
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb47:
    assume $i53 == 1;
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $p54 := $M.144;
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} qxl_fb_imageblit($p54, $p2);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2849} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i49 := $M.86;
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb44:
    assume $i50 == 1;
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p51 := $M.144;
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} qxl_fb_copyarea($p51, $p6);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2847} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $i46 := $M.86;
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb41:
    assume $i47 == 1;
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $p48 := $M.144;
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} qxl_fb_fillrect($p48, $p4);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2845} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $i41 := $M.86;
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb38:
    assume $i42 == 1;
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $p43 := $M.143;
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $p44 := $M.144;
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} vslice_dummy_var_266 := drm_fb_helper_check_var($p43, $p44);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2843} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $i37 := $M.86;
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume $i38 == 1;
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $p39 := $M.144;
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} vslice_dummy_var_265 := drm_fb_helper_debug_leave($p39);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2841} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $i32 := $M.86;
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32:
    assume $i33 == 1;
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.66, $p0);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $p35 := $M.144;
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} vslice_dummy_var_264 := drm_fb_helper_blank($i34, $p35);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2839} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb15:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $i28 := $M.86;
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29:
    assume $i29 == 1;
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $p30 := $M.144;
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} vslice_dummy_var_263 := drm_fb_helper_setcmap($p8, $p30);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2837} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i23 := $M.86;
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $p25 := $M.143;
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $p26 := $M.144;
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} vslice_dummy_var_262 := drm_fb_helper_pan_display($p25, $p26);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2835} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    goto $bb27;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 942852);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.88, $M.6, $CurrAddr;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} $p0 := ldv_init_zalloc(96);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2856} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2858} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} ldv_stop();
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $i15 := $M.88;
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $p17 := $M.142;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} qxl_ttm_backend_destroy($p17);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2864} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $i11 := $M.88;
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $p13 := $M.142;
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} vslice_dummy_var_270 := qxl_ttm_backend_bind($p13, $p1);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2862} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i7 := $M.88;
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $p9 := $M.142;
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} vslice_dummy_var_269 := qxl_ttm_backend_unbind($p9);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2860} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_main_exported_12: ref;

axiom ldv_main_exported_12 == $sub.ref(0, 943884);

procedure ldv_main_exported_12();
  free requires assertsPassed;
  modifies $M.66, $M.89, $M.6, $M.82, $CurrAddr;



implementation ldv_main_exported_12()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i85: i32;
  var $i86: i1;
  var $i88: i32;
  var $i89: i32;
  var vslice_dummy_var_271: ref;
  var vslice_dummy_var_272: ref;
  var vslice_dummy_var_273: ref;
  var vslice_dummy_var_274: ref;
  var vslice_dummy_var_275: ref;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} $p5 := ldv_init_zalloc(104);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} vslice_dummy_var_271 := ldv_memset($p7, 0, 4);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} vslice_dummy_var_272 := ldv_memset($p1, 0, 1);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} vslice_dummy_var_273 := ldv_memset($p10, 0, 4);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} vslice_dummy_var_274 := ldv_memset($p12, 0, 8);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p4);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} vslice_dummy_var_275 := ldv_memset($p14, 0, 4);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2877} $i16 := __VERIFIER_nondet_int();
    call {:si_unique_call 2878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i16);
    call {:si_unique_call 2879} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i16, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} ldv_stop();
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i85 := $M.89;
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb61:
    assume $i86 == 1;
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} vslice_dummy_var_282 := ldv_probe_12();
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2908} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i88 := $M.82;
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $M.82 := $i89;
    call {:si_unique_call 2909} {:cexpr "ref_cnt"} boogie_si_record_i32($i89);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $i73 := $M.89;
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i79 := $M.89;
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 2);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb58:
    assume $i80 == 1;
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    $p81 := $M.141;
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.66, $p4);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.66, $p0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} vslice_dummy_var_281 := drm_helper_probe_single_connector_modes_nomerge($p81, $i82, $i83);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2906} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i74 == 1;
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $p75 := $M.141;
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.66, $p4);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.66, $p0);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} vslice_dummy_var_280 := drm_helper_probe_single_connector_modes_nomerge($p75, $i76, $i77);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2904} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb4:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i16, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i67 := $M.89;
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i70 := $M.89;
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 2);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb52:
    assume $i71 == 1;
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $p72 := $M.141;
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} qxl_conn_restore($p72);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2902} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i68 == 1;
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $p69 := $M.141;
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} qxl_conn_restore($p69);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2900} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i61 := $M.89;
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i64 := $M.89;
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb46:
    assume $i65 == 1;
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $p66 := $M.141;
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} qxl_conn_save($p66);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2898} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i62 == 1;
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $p63 := $M.141;
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} qxl_conn_save($p63);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2896} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb2:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i16, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i16, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i56 := $M.89;
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 2);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb40:
    assume $i57 == 1;
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $p58 := $M.141;
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} qxl_conn_destroy($p58);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2893} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $i59 := $M.82;
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, 1);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $M.82 := $i60;
    call {:si_unique_call 2894} {:cexpr "ref_cnt"} boogie_si_record_i32($i60);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $i46 := $M.89;
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i51 := $M.89;
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb37:
    assume $i52 == 1;
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $p53 := $M.141;
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.66, $p3);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} vslice_dummy_var_279 := qxl_conn_set_property($p53, $p6, $i54);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2891} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $p48 := $M.141;
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.66, $p3);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} vslice_dummy_var_278 := qxl_conn_set_property($p48, $p6, $i49);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2889} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb13:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $i34 := $M.89;
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i40 := $M.89;
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31:
    assume $i41 == 1;
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $p42 := $M.141;
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.66, $p1);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} vslice_dummy_var_277 := qxl_conn_detect($p42, $i44);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2887} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i35 == 1;
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $p36 := $M.141;
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.66, $p1);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} vslice_dummy_var_276 := qxl_conn_detect($p36, $i38);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2885} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb17:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i26 := $M.89;
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i30 := $M.89;
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i31 == 1;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p32 := $M.141;
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.66, $p2);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} drm_helper_connector_dpms($p32, $i33);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 2883} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i27 == 1;
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $p28 := $M.141;
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.66, $p2);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} drm_helper_connector_dpms($p28, $i29);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2881} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const ldv_suspend_late_20: ref;

axiom ldv_suspend_late_20 == $sub.ref(0, 944916);

procedure ldv_suspend_late_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2911} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_20: ref;

axiom ldv_restore_early_20 == $sub.ref(0, 945948);

procedure ldv_restore_early_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2913} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2914} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_20: ref;

axiom ldv_resume_early_20 == $sub.ref(0, 946980);

procedure ldv_resume_early_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2915} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2916} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_20: ref;

axiom ldv_thaw_early_20 == $sub.ref(0, 948012);

procedure ldv_thaw_early_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2917} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2918} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_20: ref;

axiom ldv_resume_noirq_20 == $sub.ref(0, 949044);

procedure ldv_resume_noirq_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2919} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_20: ref;

axiom ldv_freeze_noirq_20 == $sub.ref(0, 950076);

procedure ldv_freeze_noirq_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2921} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2922} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_20: ref;

axiom ldv_prepare_20 == $sub.ref(0, 951108);

procedure ldv_prepare_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2923} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_20: ref;

axiom ldv_freeze_late_20 == $sub.ref(0, 952140);

procedure ldv_freeze_late_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2925} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_20: ref;

axiom ldv_thaw_noirq_20 == $sub.ref(0, 953172);

procedure ldv_thaw_noirq_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2927} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_20: ref;

axiom ldv_poweroff_noirq_20 == $sub.ref(0, 954204);

procedure ldv_poweroff_noirq_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2929} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_20: ref;

axiom ldv_poweroff_late_20 == $sub.ref(0, 955236);

procedure ldv_poweroff_late_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2931} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_20: ref;

axiom ldv_restore_noirq_20 == $sub.ref(0, 956268);

procedure ldv_restore_noirq_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2933} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_20: ref;

axiom ldv_suspend_noirq_20 == $sub.ref(0, 957300);

procedure ldv_suspend_noirq_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2935} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_20: ref;

axiom ldv_complete_20 == $sub.ref(0, 958332);

procedure ldv_complete_20() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_20() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2937} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2938} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_14: ref;

axiom ldv_main_exported_14 == $sub.ref(0, 959364);

procedure ldv_main_exported_14();
  free requires assertsPassed;
  modifies $M.66, $M.91, $M.6, $CurrAddr;



implementation ldv_main_exported_14()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var vslice_dummy_var_283: ref;
  var vslice_dummy_var_284: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} $p1 := ldv_init_zalloc(208);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $p3 := ldv_init_zalloc(208);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} vslice_dummy_var_283 := ldv_memset($p5, 0, 4);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2943} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 2944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 2945} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} ldv_stop();
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i30 := $M.91;
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i31 == 1;
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $p32 := $M.139;
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} qxl_enc_prepare($p32);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2955} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i26 := $M.91;
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i27 == 1;
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $p28 := $M.139;
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $p29 := $M.140;
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} qxl_enc_mode_set($p28, $p29, $p2);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2953} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i23 := $M.91;
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $p25 := $M.139;
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} qxl_enc_commit($p25);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2951} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $i18 := $M.91;
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $p20 := $M.139;
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $p21 := $M.140;
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} vslice_dummy_var_284 := qxl_enc_mode_fixup($p20, $p4, $p21);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2949} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $i14 := $M.91;
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $p16 := $M.139;
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.66, $p0);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} qxl_enc_dpms($p16, $i17);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2947} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_15: ref;

axiom ldv_main_exported_15 == $sub.ref(0, 960396);

procedure ldv_main_exported_15();
  free requires assertsPassed;
  modifies $M.66, $M.92, $M.6, $M.57, $M.82, $CurrAddr, $M.39;



implementation ldv_main_exported_15()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var vslice_dummy_var_285: ref;
  var vslice_dummy_var_286: ref;
  var vslice_dummy_var_287: ref;
  var vslice_dummy_var_288: i1;
  var vslice_dummy_var_289: i1;
  var vslice_dummy_var_290: i1;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} $p3 := ldv_init_zalloc(208);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} $p5 := ldv_init_zalloc(208);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} $p7 := ldv_init_zalloc(168);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} vslice_dummy_var_285 := ldv_memset($p9, 0, 4);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} vslice_dummy_var_286 := ldv_memset($p11, 0, 4);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} vslice_dummy_var_287 := ldv_memset($p13, 0, 4);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2966} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 2967} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 2968} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} ldv_stop();
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $i105 := $M.92;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 2);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb78:
    assume $i106 == 1;
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} vslice_dummy_var_296 := ldv_connect_15();
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 3008} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(3);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i100 := $M.92;
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb75:
    assume $i101 == 1;
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} vslice_dummy_var_295 := ldv_bind_15();
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 3005} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i103 := $M.82;
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $M.82 := $i104;
    call {:si_unique_call 3006} {:cexpr "ref_cnt"} boogie_si_record_i32($i104);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $i95 := $M.92;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb72:
    assume $i96 == 1;
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} vslice_dummy_var_294 := ldv_release_15();
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 3002} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $i98 := $M.82;
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i98, 1);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $M.82 := $i99;
    call {:si_unique_call 3003} {:cexpr "ref_cnt"} boogie_si_record_i32($i99);
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb4:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $i86 := $M.92;
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i89 := $M.92;
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 2);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i92 := $M.92;
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb69:
    assume $i93 == 1;
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $p94 := $M.137;
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} qxl_crtc_prepare($p94);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 3000} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i90 == 1;
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $p91 := $M.137;
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} qxl_crtc_prepare($p91);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2998} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i87 == 1;
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $p88 := $M.137;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} qxl_crtc_prepare($p88);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2996} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(3);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i83 := $M.92;
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 3);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb60:
    assume $i84 == 1;
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $p85 := $M.137;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} qxl_crtc_disable($p85);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2994} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb2:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i62 := $M.92;
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 3);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i69 := $M.92;
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i76 := $M.92;
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb57:
    assume $i77 == 1;
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $p78 := $M.137;
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $p79 := $M.138;
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.66, $p1);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.66, $p0);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} vslice_dummy_var_293 := qxl_crtc_mode_set($p78, $p79, $p6, $i80, $i81, $p8);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2992} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i70 == 1;
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $p71 := $M.137;
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $p72 := $M.138;
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.66, $p1);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.66, $p0);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} vslice_dummy_var_292 := qxl_crtc_mode_set($p71, $p72, $p6, $i73, $i74, $p8);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2990} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i63 == 1;
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $p64 := $M.137;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $p65 := $M.138;
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.66, $p1);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.66, $p0);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} vslice_dummy_var_291 := qxl_crtc_mode_set($p64, $p65, $p6, $i66, $i67, $p8);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2988} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(3);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $i53 := $M.92;
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 3);
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i56 := $M.92;
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 2);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i59 := $M.92;
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb48:
    assume $i60 == 1;
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $p61 := $M.137;
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} qxl_crtc_commit($p61);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2986} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $p58 := $M.137;
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} qxl_crtc_commit($p58);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2984} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i54 == 1;
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $p55 := $M.137;
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} qxl_crtc_commit($p55);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2982} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(3);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb15:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    $i38 := $M.92;
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 3);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i43 := $M.92;
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i48 := $M.92;
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume $i49 == 1;
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $p50 := $M.137;
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $p51 := $M.138;
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} vslice_dummy_var_290 := qxl_crtc_mode_fixup($p50, $p4, $p51);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2980} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i44 == 1;
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $p45 := $M.137;
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $p46 := $M.138;
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} vslice_dummy_var_289 := qxl_crtc_mode_fixup($p45, $p4, $p46);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2978} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $p40 := $M.137;
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $p41 := $M.138;
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} vslice_dummy_var_288 := qxl_crtc_mode_fixup($p40, $p4, $p41);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2976} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(3);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb19:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i26 := $M.92;
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i30 := $M.92;
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i34 := $M.92;
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $p36 := $M.137;
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.66, $p2);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} qxl_crtc_dpms($p36, $i37);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2974} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $p32 := $M.137;
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.66, $p2);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} qxl_crtc_dpms($p32, $i33);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 2972} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $p28 := $M.137;
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.66, $p2);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} qxl_crtc_dpms($p28, $i29);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 2970} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(3);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 961428);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.66, $M.93, $M.6, $CurrAddr, $M.35, $M.36, assertsPassed, $M.39, $M.40, $M.46, $M.41, $M.61, $M.62, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p21: ref;
  var $p23: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i1;
  var $i87: i8;
  var $i88: i1;
  var $i89: i8;
  var $i90: i1;
  var $p91: ref;
  var vslice_dummy_var_297: ref;
  var vslice_dummy_var_298: ref;
  var vslice_dummy_var_299: ref;
  var vslice_dummy_var_300: ref;
  var vslice_dummy_var_301: ref;
  var vslice_dummy_var_302: ref;
  var vslice_dummy_var_303: ref;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: ref;
  var vslice_dummy_var_310: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} $p7 := ldv_init_zalloc(64);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} $p9 := ldv_init_zalloc(256);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3019} $p11 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 3020} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p11);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} $p13 := ldv_init_zalloc(32);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} vslice_dummy_var_297 := ldv_memset($p15, 0, 4);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} vslice_dummy_var_298 := ldv_memset($p17, 0, 8);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} vslice_dummy_var_299 := ldv_memset($p2, 0, 1);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} vslice_dummy_var_300 := ldv_memset($p3, 0, 1);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} vslice_dummy_var_301 := ldv_memset($p21, 0, 4);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p5);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} vslice_dummy_var_302 := ldv_memset($p23, 0, 4);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} vslice_dummy_var_303 := ldv_memset($p6, 0, 1);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3029} $i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 3030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i26);
    call {:si_unique_call 3031} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i26, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i26, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} ldv_stop();
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $i82 := $M.93;
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb58:
    assume $i83 == 1;
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $p84 := $M.136;
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.66, $p6);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.66, $p2);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i87);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.66, $p3);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $p91 := $M.135;
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} vslice_dummy_var_310 := qxl_bo_move($p84, $i86, $i88, $i90, $p91);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3053} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i78 := $M.93;
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55:
    assume $i79 == 1;
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $p80 := $M.133;
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $p81 := $M.135;
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} qxl_ttm_io_mem_free($p80, $p81);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3051} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $i72 := $M.93;
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb52:
    assume $i73 == 1;
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $p74 := $M.133;
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.66, $p1);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.66, $p0);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} vslice_dummy_var_309 := qxl_ttm_tt_create($p74, $i75, $i76, $p8);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3049} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i26, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i26, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i68 := $M.93;
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb49:
    assume $i69 == 1;
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $p70 := $M.136;
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $p71 := $M.135;
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} qxl_bo_move_notify($p70, $p71);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3047} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i64 := $M.93;
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb46:
    assume $i65 == 1;
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $p66 := $M.136;
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} vslice_dummy_var_308 := qxl_verify_access($p66, $p12);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3045} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $i59 := $M.93;
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 1);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb43:
    assume $i60 == 1;
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $p61 := $M.133;
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.66, $p4);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} vslice_dummy_var_307 := qxl_invalidate_caches($p61, $i62);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3043} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb2:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i26, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i26, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i26, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i54 := $M.93;
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 1);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb40:
    assume $i55 == 1;
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $p56 := $M.133;
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.66, $p5);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} vslice_dummy_var_306 := qxl_init_mem_type($p56, $i57, $p10);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3041} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $i49 := $M.93;
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume $i50 == 1;
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $p51 := $M.133;
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $p52 := $M.135;
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} vslice_dummy_var_305 := qxl_ttm_io_mem_reserve($p51, $p52);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3039} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $i46 := $M.93;
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $p48 := $M.136;
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} qxl_evict_flags($p48, $p14);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3037} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i26, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i43 := $M.93;
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $p45 := $M.134;
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} qxl_ttm_tt_unpopulate($p45);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3035} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb12;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i39 := $M.93;
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i40 == 1;
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $p41 := $M.134;
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} vslice_dummy_var_304 := qxl_ttm_tt_populate($p41);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 3033} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    goto $bb29;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 962460);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.66, $M.94, $M.39, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.6, $M.40, $M.35, $M.36, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $i16: i64;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var vslice_dummy_var_311: ref;
  var vslice_dummy_var_312: ref;
  var vslice_dummy_var_313: i64;
  var vslice_dummy_var_314: ref;
  var vslice_dummy_var_315: ref;
  var vslice_dummy_var_316: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} $p0 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} vslice_dummy_var_311 := ldv_memset($p0, 0, 1);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} vslice_dummy_var_312 := ldv_memset($p3, 0, 8);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3059} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 3060} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 3061} {:cexpr "tmp"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} ldv_stop();
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $i26 := $M.94;
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $p28 := $M.132;
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} vslice_dummy_var_316 := qxl_nop_signaling($p28);
    goto corral_source_split_12876;

  corral_source_split_12876:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 3069} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $i22 := $M.94;
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $p24 := $M.132;
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} vslice_dummy_var_315 := qxl_get_driver_name($p24);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 3067} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $i18 := $M.94;
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $p20 := $M.132;
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} vslice_dummy_var_314 := qxl_get_timeline_name($p20);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 3065} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i11 := $M.94;
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $p13 := $M.132;
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.66, $p0);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.66, $p1);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} vslice_dummy_var_313 := qxl_fence_wait($p13, $i15, $i16);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 3063} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const ldv_shutdown_19: ref;

axiom ldv_shutdown_19 == $sub.ref(0, 963492);

procedure ldv_shutdown_19() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_19() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3071} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3072} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 964524);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.96, $M.6, $M.46, $CurrAddr, assertsPassed, $M.39, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation ldv_main_exported_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var vslice_dummy_var_317: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} $p0 := ldv_init_zalloc(104);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} $p2 := ldv_init_zalloc(744);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} $p4 := ldv_init_zalloc(3320);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3076} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 3077} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 3078} {:cexpr "tmp___2"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} ldv_stop();
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i7 == 1;
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i8 := $M.96;
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} vslice_dummy_var_317 := qxl_user_framebuffer_create($p5, $p3, $p1);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 3080} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 965556);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.97, $M.6, $M.65, $M.32, $M.57, $M.40, $CurrAddr, $M.41, $M.39, $M.46, assertsPassed, $M.58, $M.35, $M.36, $M.55, $M.61, $M.62, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_318: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} $p2 := ldv_init_zalloc(160);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3084} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 3085} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 3086} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} ldv_stop();
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $i6 := $M.97;
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} vslice_dummy_var_318 := qxl_fb_find_or_create_single($p3, $p1);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 3088} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_907:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 966588);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_15: ref;

axiom ldv_release_15 == $sub.ref(0, 967620);

procedure ldv_release_15() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_15() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3090} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3091} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_15: ref;

axiom ldv_bind_15 == $sub.ref(0, 968652);

procedure ldv_bind_15() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_15() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3092} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3093} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_connect_15: ref;

axiom ldv_connect_15 == $sub.ref(0, 969684);

procedure ldv_connect_15() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_connect_15() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3094} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3095} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_12: ref;

axiom ldv_probe_12 == $sub.ref(0, 970716);

procedure ldv_probe_12() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_12() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3096} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3097} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_16: ref;

axiom ldv_probe_16 == $sub.ref(0, 971748);

procedure ldv_probe_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3098} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const vgacon_text_force: ref;

axiom vgacon_text_force == $sub.ref(0, 972780);

procedure vgacon_text_force() returns ($r: i1);
  free requires assertsPassed;



implementation vgacon_text_force() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3100} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 3101} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const drm_pci_init: ref;

axiom drm_pci_init == $sub.ref(0, 973812);

procedure drm_pci_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation drm_pci_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3102} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const drm_pci_exit: ref;

axiom drm_pci_exit == $sub.ref(0, 974844);

procedure drm_pci_exit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation drm_pci_exit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    return;
}



const ldv_probe_17: ref;

axiom ldv_probe_17 == $sub.ref(0, 975876);

procedure ldv_probe_17() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_17() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3104} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_11: ref;

axiom ldv_probe_11 == $sub.ref(0, 976908);

procedure ldv_probe_11() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_11() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3106} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 977940);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3108} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 1} true;
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 978972);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 980004);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 981036);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 982068);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 983100);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 984132);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 985164);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 986196);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 987228);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 988260);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 989292);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 990324);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 991356);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3109} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3110} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3111} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3112} __VERIFIER_assume($i4);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 992388);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 993420);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 994452);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 995484);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3113} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3114} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3115} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3116} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3117} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3118} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3119} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3120} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3121} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3122} __VERIFIER_assume($i7);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3123} __VERIFIER_assume($i11);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 996516);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 997548);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3124} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 3125} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3126} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3127} __VERIFIER_assume($i4);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 998580);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 999612);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 1000644);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 1001676);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 1002708);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 1003740);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 1004772);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 1005804);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 1006836);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 1007868);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 1008900);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 1009932);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 1010964);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 1011996);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3128} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3130} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3131} __VERIFIER_assume($i10);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 1013028);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3132} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3133} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3134} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 1014060);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 1015092);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3135} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3136} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 1016124);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 1017156);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3137} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3138} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 1018188);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 1019220);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 1020252);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3139} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3140} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3141} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} $p6 := malloc($i5);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.6;
    call {:si_unique_call 3144} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_56;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 1021284);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 1022316);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.56, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.137, $M.138, $M.145, $M.128, $M.146, $M.141, $M.139, $M.140, $M.42, $M.133, $M.134, $M.135, $M.136, $M.142, $M.47, $M.49, $M.51, $M.53, $M.48, $M.50, $M.52, $M.54, $M.143, $M.144, $M.156, $M.157, $M.158, $M.159, $M.160, $M.44, $M.43, $M.6, $M.129, $M.211, $M.59, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.132, $M.39, $M.130, $M.309, $M.310;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 3145} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.56 := 4;
    call {:si_unique_call 3146} {:cexpr "qxl_num_crtc"} boogie_si_record_i32(4);
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.69 := $0.ref;
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 3147} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 3148} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 3149} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 3150} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    call {:si_unique_call 3151} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3152} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 3153} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 3154} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 3155} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 3156} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 3157} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 3158} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    call {:si_unique_call 3159} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 3160} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 3161} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 3162} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 3163} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 3164} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 3165} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 3166} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 3167} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 3168} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 3169} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 3170} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 3171} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 3172} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 3173} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 3174} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 3175} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 3176} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 3177} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 3178} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 3179} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 3180} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 3181} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 3182} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 3183} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 3184} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 3185} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 3186} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 3187} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.116 := 0;
    call {:si_unique_call 3188} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.117 := 0;
    call {:si_unique_call 3189} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.118 := 0;
    call {:si_unique_call 3190} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.119 := 0;
    call {:si_unique_call 3191} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    call {:si_unique_call 3192} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 3193} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    call {:si_unique_call 3194} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3195} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.137 := $0.ref;
    $M.138 := $0.ref;
    $M.145 := $0.ref;
    $M.128 := $0.ref;
    $M.146 := $0.ref;
    $M.141 := $0.ref;
    $M.139 := $0.ref;
    $M.140 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 3196} {:cexpr "qxl_log_level"} boogie_si_record_i32(0);
    $M.133 := $0.ref;
    $M.134 := $0.ref;
    $M.135 := $0.ref;
    $M.136 := $0.ref;
    $M.142 := $0.ref;
    $M.47 := 0;
    call {:si_unique_call 3197} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 3198} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 3199} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 3200} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.48 := $0.ref;
    $M.50 := $0.ref;
    $M.52 := $0.ref;
    $M.54 := $0.ref;
    $M.143 := $0.ref;
    $M.144 := $0.ref;
    call {:si_unique_call 3201} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    call {:si_unique_call 3202} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    call {:si_unique_call 3203} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    call {:si_unique_call 3204} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.156 := $store.i32($M.156, qxl_ioctls, $sub.i32(0, 1073191872));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(0, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(0, 24)), $mul.ref(8, 1)), qxl_alloc_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(0, 24)), $mul.ref(16, 1)), .str.61);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(1, 24)), $mul.ref(0, 1)), $sub.i32(0, 1072667583));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(1, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(1, 24)), $mul.ref(8, 1)), qxl_map_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(1, 24)), $mul.ref(16, 1)), .str.62);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(2, 24)), $mul.ref(0, 1)), 1074816066);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(2, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(2, 24)), $mul.ref(8, 1)), qxl_execbuffer_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(2, 24)), $mul.ref(16, 1)), .str.63);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(3, 24)), $mul.ref(0, 1)), 1075340355);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(3, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(3, 24)), $mul.ref(8, 1)), qxl_update_area_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(3, 24)), $mul.ref(16, 1)), .str.64);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(4, 24)), $mul.ref(0, 1)), $sub.i32(0, 1072667580));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(4, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(4, 24)), $mul.ref(8, 1)), qxl_getparam_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(4, 24)), $mul.ref(16, 1)), .str.65);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(5, 24)), $mul.ref(0, 1)), 1074291781);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(5, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(5, 24)), $mul.ref(8, 1)), qxl_clientcap_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(5, 24)), $mul.ref(16, 1)), .str.66);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(6, 24)), $mul.ref(0, 1)), $sub.i32(0, 1072143290));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(6, 24)), $mul.ref(4, 1)), 17);
    $M.158 := $store.ref($M.158, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(6, 24)), $mul.ref(8, 1)), qxl_alloc_surf_ioctl);
    $M.159 := $store.ref($M.159, $add.ref($add.ref($add.ref(qxl_ioctls, $mul.ref(0, 168)), $mul.ref(6, 24)), $mul.ref(16, 1)), .str.67);
    $M.160 := $store.ref($M.160, qxl_fence_ops, qxl_get_driver_name);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(8, 1)), qxl_get_timeline_name);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(16, 1)), qxl_nop_signaling);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(32, 1)), qxl_fence_wait);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(56, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(qxl_fence_ops, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.44 := $store.i32($M.44, release_size_per_bo, 256);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(release_size_per_bo, $mul.ref(0, 12)), $mul.ref(1, 4)), 128);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(release_size_per_bo, $mul.ref(0, 12)), $mul.ref(2, 4)), 256);
    $M.43 := $store.i32($M.43, releases_per_bo, 16);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(releases_per_bo, $mul.ref(0, 12)), $mul.ref(1, 4)), 32);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(releases_per_bo, $mul.ref(0, 12)), $mul.ref(2, 4)), 16);
    $M.6 := $store.ref($M.6, qxl_debugfs_list, .str.169);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), qxl_debugfs_irq_received);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), .str.170);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), qxl_debugfs_buffers_info);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_debugfs_list, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i64($M.6, qxl_defio, 8);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(8, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(168, 1)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(184, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_defio, $mul.ref(0, 200)), $mul.ref(192, 1)), qxl_deferred_io);
    $M.6 := $store.ref($M.6, qxlfb_ops, __this_module);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(32, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(40, 1)), drm_fb_helper_check_var);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(48, 1)), drm_fb_helper_set_par);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(64, 1)), drm_fb_helper_setcmap);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(72, 1)), drm_fb_helper_blank);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(80, 1)), drm_fb_helper_pan_display);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(88, 1)), qxl_fb_fillrect);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(96, 1)), qxl_fb_copyarea);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(104, 1)), qxl_fb_imageblit);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(112, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(120, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(128, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(136, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(144, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(152, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(160, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(168, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(176, 1)), drm_fb_helper_debug_enter);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxlfb_ops, $mul.ref(0, 192)), $mul.ref(184, 1)), drm_fb_helper_debug_leave);
    $M.6 := $store.ref($M.6, qxl_backend_func, qxl_ttm_backend_bind);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_backend_func, $mul.ref(0, 24)), $mul.ref(8, 1)), qxl_ttm_backend_unbind);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_backend_func, $mul.ref(0, 24)), $mul.ref(16, 1)), qxl_ttm_backend_destroy);
    $M.6 := $store.ref($M.6, qxl_connector_helper_funcs, qxl_conn_get_modes);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_connector_helper_funcs, $mul.ref(0, 24)), $mul.ref(8, 1)), qxl_conn_mode_valid);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_connector_helper_funcs, $mul.ref(0, 24)), $mul.ref(16, 1)), qxl_best_encoder);
    $M.6 := $store.ref($M.6, qxl_enc_helper_funcs, qxl_enc_dpms);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(24, 1)), qxl_enc_mode_fixup);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(32, 1)), qxl_enc_prepare);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(40, 1)), qxl_enc_commit);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(48, 1)), qxl_enc_mode_set);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(72, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_enc_helper_funcs, $mul.ref(0, 96)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, qxl_crtc_helper_funcs, qxl_crtc_dpms);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(8, 1)), qxl_crtc_prepare);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(16, 1)), qxl_crtc_commit);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(24, 1)), qxl_crtc_mode_fixup);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(32, 1)), qxl_crtc_mode_set);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(72, 1)), qxl_crtc_disable);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_crtc_helper_funcs, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, qxl_mode_funcs, qxl_user_framebuffer_create);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 56)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 56)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 56)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 56)), $mul.ref(32, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 56)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_mode_funcs, $mul.ref(0, 56)), $mul.ref(48, 1)), $0.ref);
    $M.129 := $sub.i32(0, 1);
    call {:si_unique_call 3205} {:cexpr "qxl_modeset"} boogie_si_record_i32($sub.i32(0, 1));
    $M.6 := $store.ref($M.6, qxl_pm_ops, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), qxl_pm_suspend);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), qxl_pm_resume);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), qxl_pm_freeze);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), qxl_pm_thaw);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), qxl_pm_freeze);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), qxl_pm_restore);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), $0.ref);
    $M.6 := $store.i32($M.6, pciidlist, 6966);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 256);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 196608);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 16776960);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 6966);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 256);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 229376);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 16776960);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(pciidlist, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.211 := $store.ref($M.211, qxl_pci_driver, $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.74);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), pciidlist);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), qxl_pci_probe);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), qxl_pci_remove);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.211 := $store.i8($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.211 := $store.i32($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), qxl_pm_ops);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.211 := $store.i32($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.211 := $store.i32($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.211 := $store.i32($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.211 := $store.i32($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.211 := $store.i64($M.211, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref($add.ref(qxl_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $0.ref;
    $M.6 := $store.ref($M.6, qxl_ttm_vm_ops, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(72, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(qxl_ttm_vm_ops, $mul.ref(0, 88)), $mul.ref(80, 1)), $0.ref);
    $M.301 := $store.i32($M.301, __mod_pci__pciidlist_device_table, 0);
    $M.302 := $store.i32($M.302, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.303 := $store.i32($M.303, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.304 := $store.i32($M.304, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.305 := $store.i32($M.305, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.306 := $store.i32($M.306, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.307 := $store.i64($M.307, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.301 := $store.i32($M.301, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.302 := $store.i32($M.302, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.303 := $store.i32($M.303, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.304 := $store.i32($M.304, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.305 := $store.i32($M.305, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.306 := $store.i32($M.306, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.307 := $store.i64($M.307, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.301 := $store.i32($M.301, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.302 := $store.i32($M.302, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.303 := $store.i32($M.303, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.304 := $store.i32($M.304, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.305 := $store.i32($M.305, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.306 := $store.i32($M.306, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.307 := $store.i64($M.307, $add.ref($add.ref($add.ref(__mod_pci__pciidlist_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.132 := $0.ref;
    call {:si_unique_call 3206} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 3207} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.130 := 7;
    call {:si_unique_call 3208} {:cexpr "qxl_max_ioctls"} boogie_si_record_i32(7);
    $M.160 := $store.i8($M.160, .str.68, 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(2, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(4, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(7, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(8, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(9, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(10, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(11, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(13, 1)), 121);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(14, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(16, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(17, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(18, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(19, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.68, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.160 := $store.i8($M.160, .str.188, 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(1, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(2, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(3, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(4, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(6, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(8, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(9, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(10, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(12, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(13, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(14, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(15, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(17, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(18, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(19, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(20, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.188, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.160 := $store.i8($M.160, .str.42, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(4, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(5, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(6, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(7, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(8, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(9, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(10, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(11, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(12, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(13, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(14, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(15, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(16, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(17, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(18, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(19, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(20, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(21, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(22, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(23, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(24, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(25, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(26, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(27, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(28, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(29, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(30, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(31, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(32, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(33, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(34, 1)), 40);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(35, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(36, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(37, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(38, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(39, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(40, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(41, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(42, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(43, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(44, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(45, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(46, 1)), 41);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(47, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(48, 1)), 40);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(49, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(50, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(51, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(52, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(53, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(54, 1)), 41);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(55, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.42, $mul.ref(0, 57)), $mul.ref(56, 1)), 0);
    $M.160 := $store.i8($M.160, .str.52, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(4, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(5, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(6, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(7, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(8, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(9, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(10, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(11, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(12, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(13, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(14, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(15, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(16, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(17, 1)), 98);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(18, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(19, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(20, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(21, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(22, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(23, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(24, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(25, 1)), 46);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(26, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.160 := $store.i8($M.160, .str.54, 81);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(1, 1)), 88);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(2, 1)), 76);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(3, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(4, 1)), 73);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(5, 1)), 78);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(6, 1)), 84);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(7, 1)), 69);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(8, 1)), 82);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(9, 1)), 82);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(10, 1)), 85);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(11, 1)), 80);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(12, 1)), 84);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(13, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(14, 1)), 67);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(15, 1)), 76);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(16, 1)), 73);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(17, 1)), 69);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(18, 1)), 78);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(19, 1)), 84);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(20, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(21, 1)), 77);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(22, 1)), 79);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(23, 1)), 78);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(24, 1)), 73);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(25, 1)), 84);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(26, 1)), 79);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(27, 1)), 82);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(28, 1)), 83);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(29, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(30, 1)), 67);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(31, 1)), 79);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(32, 1)), 78);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(33, 1)), 70);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(34, 1)), 73);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(35, 1)), 71);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(36, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.54, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.160 := $store.i8($M.160, .str.157, 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(2, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(3, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(4, 1)), 121);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(5, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(6, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(7, 1)), 91);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(8, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(9, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(10, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(11, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(12, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(13, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(14, 1)), 93);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(15, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(17, 1)), 121);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(18, 1)), 91);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(19, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(20, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(21, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(24, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(25, 1)), 93);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.157, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.160 := $store.i8($M.160, .str.35, 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(2, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(6, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(7, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(10, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(11, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.35, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.160 := $store.i8($M.160, .str.36, 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(2, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(3, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(4, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(6, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(7, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(8, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(10, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(11, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(12, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(15, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(16, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(17, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(18, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(19, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(20, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(21, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.36, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.160 := $store.i8($M.160, .str.38, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(4, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.160 := $store.i8($M.160, .str.47, 113);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(1, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(2, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(4, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(7, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(8, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(9, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(12, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(14, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(15, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(16, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(17, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(18, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.47, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.160 := $store.i8($M.160, .str.2, 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(1, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(2, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(3, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(4, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(6, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(7, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(8, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(9, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(10, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(11, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(12, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(13, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(14, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(15, 1)), 107);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(16, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(17, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(18, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(19, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(20, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(21, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(22, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(23, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(24, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(25, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(26, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(27, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(28, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(29, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(30, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(31, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(32, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(33, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(34, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(35, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(36, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(37, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(38, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(39, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(40, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(41, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(42, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(43, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(44, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(45, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(46, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(47, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(48, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(49, 1)), 121);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(50, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(51, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(52, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(53, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.2, $mul.ref(0, 55)), $mul.ref(54, 1)), 0);
    $M.160 := $store.i8($M.160, .str.108, 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(1, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(2, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(4, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(5, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(6, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(7, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(8, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(9, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(10, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(11, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(12, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(13, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(14, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(15, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(16, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(17, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(18, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(19, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(20, 1)), 88);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(21, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(22, 1)), 40);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(23, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(24, 1)), 122);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(25, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(26, 1)), 41);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(27, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(28, 1)), 33);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(29, 1)), 61);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(30, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(31, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(32, 1)), 88);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(33, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.108, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.160 := $store.i8($M.160, .str, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(4, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(5, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(6, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(7, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(8, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(9, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(10, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(11, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(12, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(13, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(14, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(15, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(16, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(17, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(18, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(19, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(20, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(21, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(22, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(23, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(24, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(25, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(26, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(27, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(28, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(29, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(30, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(31, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(32, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(33, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(34, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(35, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.309 := $store.i8($M.309, .str.152, 113);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(1, 1)), 120);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(4, 1)), 109);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(6, 1)), 109);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(8, 1)), 109);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(9, 1)), 109);
    $M.309 := $store.i8($M.309, $add.ref($add.ref(.str.152, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.310 := $store.i8($M.310, .str.153, 113);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(2, 1)), 108);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(4, 1)), 115);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(5, 1)), 117);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(6, 1)), 114);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(7, 1)), 102);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(9, 1)), 109);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(10, 1)), 109);
    $M.310 := $store.i8($M.310, $add.ref($add.ref(.str.153, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.10, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.10, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.160 := $store.i8($M.160, .str.12, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(4, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(5, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(6, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(7, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(8, 1)), 45);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(9, 1)), 62);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(10, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(11, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(12, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(13, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(14, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(15, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(16, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(17, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(18, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(19, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(20, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(21, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(22, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(23, 1)), 61);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(24, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(25, 1)), 48);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(26, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(27, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(28, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(29, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(30, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(31, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(32, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(33, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(34, 1)), 45);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(35, 1)), 62);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(36, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(37, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(38, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(39, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(40, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(41, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(42, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(43, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(44, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(45, 1)), 61);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(46, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(47, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(48, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(49, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(50, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.12, $mul.ref(0, 52)), $mul.ref(51, 1)), 0);
    $M.160 := $store.i8($M.160, .str.4, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(4, 1)), 48);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(5, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(11, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(14, 1)), 63);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(15, 1)), 63);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(16, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.4, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.160 := $store.i8($M.160, .str.48, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(4, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(6, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(7, 1)), 91);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(8, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(9, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(10, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(11, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(12, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(13, 1)), 43);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(14, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(16, 1)), 43);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(17, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(18, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(19, 1)), 93);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(20, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.160 := $store.i8($M.160, .str.131, 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(1, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(2, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(3, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(5, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(6, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(7, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(8, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(9, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(10, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(12, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(13, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(14, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(15, 1)), 121);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(16, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(17, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(18, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(19, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(20, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(21, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(22, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(23, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(24, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(25, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(26, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(27, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(28, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(29, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.131, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.160 := $store.i8($M.160, .str.44, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(4, 1)), 113);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(6, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(7, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(8, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(9, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(10, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(11, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(12, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(13, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(14, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(15, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(17, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(18, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(19, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(20, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(21, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(22, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(23, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(24, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(25, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(26, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.44, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.6 := $store.i8($M.6, .str.45, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(4, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(10, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(14, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(17, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(20, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.160 := $store.i8($M.160, .str.46, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(4, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(7, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(8, 1)), 61);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(10, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(12, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(13, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(14, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(15, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(16, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(18, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(19, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(20, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(21, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(22, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(23, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.46, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.160 := $store.i8($M.160, .str.124, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(4, 1)), 40);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(5, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(6, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(7, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(8, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(9, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(10, 1)), 41);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(11, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(12, 1)), 61);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(13, 1)), 62);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(14, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(15, 1)), 40);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(16, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(17, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(18, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(19, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(20, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(21, 1)), 41);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.124, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.160 := $store.i8($M.160, .str.158, 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(2, 1)), 58);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(4, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(6, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(7, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(8, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(9, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(10, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(12, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.158, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.160 := $store.i8($M.160, .str.160, 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(1, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(2, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(3, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(4, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(5, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(6, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(7, 1)), 48);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(8, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(9, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(10, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(11, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(12, 1)), 103);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(13, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(14, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(15, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(16, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(17, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(18, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(19, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(20, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(21, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(22, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(23, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(24, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(25, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(26, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(27, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(28, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(29, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(30, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(31, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(32, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(33, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(34, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(35, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(36, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(37, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(38, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(39, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(40, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(41, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(42, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(43, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(44, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(45, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(46, 1)), 40);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(47, 1)), 118);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(48, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(49, 1)), 114);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(50, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(51, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(52, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(53, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(54, 1)), 44);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(55, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(56, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(57, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(58, 1)), 97);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(59, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(60, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(61, 1)), 119);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(62, 1)), 32);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(63, 1)), 37);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(64, 1)), 112);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(65, 1)), 41);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(66, 1)), 10);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(.str.160, $mul.ref(0, 68)), $mul.ref(67, 1)), 0);
    $M.6 := $store.i8($M.6, .str.161, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(7, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.169, 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(1, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(2, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(9, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.169, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.170, 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(4, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(7, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.170, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 3209} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 1023348);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 1024380);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i48 := $eq.ref(qxl_ttm_backend_destroy, $p0);
    assume true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i48 == 1);
    $i47 := $eq.ref(qxl_ttm_tt_unpopulate, $p0);
    assume true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i47 == 1);
    $i46 := $eq.ref(qxl_enc_commit, $p0);
    assume {:branchcond $i46} true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_enc_prepare, $p0);
    assume true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_enc_destroy, $p0);
    assume true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_conn_destroy, $p0);
    assume true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_conn_restore, $p0);
    assume true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_conn_save, $p0);
    assume true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_crtc_disable, $p0);
    assume {:branchcond $i40} true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_crtc_commit, $p0);
    assume true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_crtc_prepare, $p0);
    assume true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_crtc_destroy, $p0);
    assume true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_user_framebuffer_destroy, $p0);
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_pci_remove, $p0);
    assume {:branchcond $i35} true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(qxl_ttm_mem_global_release, $p0);
    assume true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(qxl_client_monitors_config_work_func, $p0);
    assume true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(qxl_gc_work, $p0);
    assume true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(qxl_fb_work, $p0);
    assume true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(qxl_gem_prime_unpin, $p0);
    assume true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(qxl_gem_object_free, $p0);
    assume true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(qxl_debugfs_takedown, $p0);
    assume true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(fence_release, $p0);
    assume {:branchcond $i26} true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_ttm_bo_destroy, $p0);
    assume true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(drm_gem_object_free, $p0);
    assume true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume false;
    return;

  $bb2:
    assume $i24 == 1;
    call {:si_unique_call 3210} drm_gem_object_free(arg);
    return;

  $bb3:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3211} qxl_ttm_bo_destroy($p1);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    call {:si_unique_call 3212} fence_release(arg);
    return;

  $bb5:
    assume $i27 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3213} qxl_debugfs_takedown($p2);
    return;

  $bb6:
    assume $i28 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3214} qxl_gem_object_free($p3);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3215} qxl_gem_prime_unpin($p4);
    return;

  $bb8:
    assume $i30 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3216} qxl_fb_work($p5);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i31 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3217} qxl_gc_work($p6);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i32 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3218} qxl_client_monitors_config_work_func($p7);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3219} qxl_ttm_mem_global_release($p8);
    return;

  $bb12:
    assume $i34 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3220} ttm_bo_global_release($p9);
    return;

  $bb13:
    assume $i35 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3221} qxl_pci_remove($p10);
    return;

  $bb14:
    assume $i36 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3222} qxl_user_framebuffer_destroy($p11);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3223} qxl_crtc_destroy($p12);
    return;

  $bb16:
    assume $i38 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3224} qxl_crtc_prepare($p13);
    return;

  $bb17:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3225} qxl_crtc_commit($p14);
    return;

  $bb18:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3226} qxl_crtc_disable($p15);
    return;

  $bb19:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3227} qxl_conn_save($p16);
    return;

  $bb20:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3228} qxl_conn_restore($p17);
    return;

  $bb21:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3229} qxl_conn_destroy($p18);
    return;

  $bb22:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3230} qxl_enc_destroy($p19);
    return;

  $bb23:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3231} qxl_enc_prepare($p20);
    return;

  $bb24:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3232} qxl_enc_commit($p21);
    return;

  $bb25:
    assume $i47 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3233} qxl_ttm_tt_unpopulate($p22);
    return;

  $bb26:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3234} qxl_ttm_backend_destroy($p23);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 1025412);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(qxl_enc_mode_set, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3235} qxl_enc_mode_set($p1, $p2, $p3);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 1026444);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3236} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 1027476);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(qxl_deferred_io, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_fb_imageblit, $p0);
    assume {:branchcond $i26} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_fb_copyarea, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(qxl_fb_fillrect, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(qxl_ttm_io_mem_free, $p0);
    assume {:branchcond $i23} true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(qxl_bo_move_notify, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i22 == 1);
    $i21 := $eq.ref(qxl_evict_flags, $p0);
    assume {:branchcond $i21} true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i21 == 1);
    $i20 := $eq.ref(qxl_gem_prime_vunmap, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i20 == 1);
    $i19 := $eq.ref(qxl_gem_object_close, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3237} qxl_gem_object_close($p1, $p2);
    return;

  $bb3:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3238} qxl_gem_prime_vunmap($p3, $p4);
    return;

  $bb4:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3239} qxl_evict_flags($p5, $p6);
    return;

  $bb5:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3240} qxl_bo_move_notify($p7, $p8);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3241} qxl_ttm_io_mem_free($p9, $p10);
    return;

  $bb7:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3242} qxl_fb_fillrect($p11, $p12);
    return;

  $bb8:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3243} qxl_fb_copyarea($p13, $p14);
    return;

  $bb9:
    assume $i26 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3244} qxl_fb_imageblit($p15, $p16);
    return;

  $bb10:
    assume $i27 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3245} qxl_deferred_io($p17, $p18);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 1028508);

procedure devirtbounce.5(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 1029540);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(qxl_deferred_io, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_fb_imageblit, $p0);
    assume {:branchcond $i26} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_fb_copyarea, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(qxl_fb_fillrect, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(qxl_ttm_io_mem_free, $p0);
    assume {:branchcond $i23} true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(qxl_bo_move_notify, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i22 == 1);
    $i21 := $eq.ref(qxl_evict_flags, $p0);
    assume {:branchcond $i21} true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i21 == 1);
    $i20 := $eq.ref(qxl_gem_prime_vunmap, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i20 == 1);
    $i19 := $eq.ref(qxl_gem_object_close, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3246} qxl_gem_object_close($p1, $p2);
    return;

  $bb3:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3247} qxl_gem_prime_vunmap($p3, $p4);
    return;

  $bb4:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3248} qxl_evict_flags($p5, $p6);
    return;

  $bb5:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3249} qxl_bo_move_notify($p7, $p8);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3250} qxl_ttm_io_mem_free($p9, $p10);
    return;

  $bb7:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3251} qxl_fb_fillrect($p11, $p12);
    return;

  $bb8:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3252} qxl_fb_copyarea($p13, $p14);
    return;

  $bb9:
    assume $i26 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3253} qxl_fb_imageblit($p15, $p16);
    return;

  $bb10:
    assume $i27 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3254} qxl_deferred_io($p17, $p18);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 1030572);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 1031604);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.61, $M.62, $M.39, $M.32, $M.40, $M.63, $M.64, $M.46, $M.57, $M.41, $CurrAddr, $M.47, $M.49, $M.51, $M.53, $M.58, $M.48, $M.50, $M.52, $M.54, $M.35, $M.36, $M.55, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i53 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i53 == 1);
    $i52 := $eq.ref(drm_fb_helper_debug_leave, $p0);
    assume true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i52 == 1);
    $i51 := $eq.ref(drm_fb_helper_debug_enter, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i51 == 1);
    $i50 := $eq.ref(drm_fb_helper_set_par, $p0);
    assume true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i50 == 1);
    $i49 := $eq.ref(qxl_ttm_backend_unbind, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i49 == 1);
    $i48 := $eq.ref(qxl_ttm_tt_populate, $p0);
    assume true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i48 == 1);
    $i47 := $eq.ref(qxl_conn_get_modes, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i47 == 1);
    $i46 := $eq.ref(drm_crtc_helper_set_config, $p0);
    assume {:branchcond $i46} true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_pm_restore, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_pm_thaw, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_pm_freeze, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_pm_resume, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_pm_suspend, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i41 == 1);
    $i40 := $eq.ref(ttm_bo_global_init, $p0);
    assume {:branchcond $i40} true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_ttm_mem_global_init, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_gem_prime_pin, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_debugfs_init, $p0);
    assume true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_driver_unload, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume false;
    return;

  $bb2:
    assume $i36 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3255} $i2 := qxl_driver_unload($p1);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    $r := $i2;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i37 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3256} $i4 := qxl_debugfs_init($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i38 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3257} $i6 := qxl_gem_prime_pin($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i39 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3258} $i8 := qxl_ttm_mem_global_init($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i40 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3259} $i10 := ttm_bo_global_init($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i41 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3260} $i12 := qxl_pm_suspend($p11);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    $r := $i12;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3261} $i14 := qxl_pm_resume($p13);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    $r := $i14;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i43 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3262} $i16 := qxl_pm_freeze($p15);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    $r := $i16;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i44 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3263} $i18 := qxl_pm_thaw($p17);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    $r := $i18;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i45 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3264} $i20 := qxl_pm_restore($p19);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    $r := $i20;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3265} $i22 := drm_crtc_helper_set_config($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i47 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3266} $i24 := qxl_conn_get_modes($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i48 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3267} $i26 := qxl_ttm_tt_populate($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i49 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3268} $i28 := qxl_ttm_backend_unbind($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i50 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3269} $i30 := drm_fb_helper_set_par($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i51 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3270} $i32 := drm_fb_helper_debug_enter($p31);
    $r := $i32;
    return;

  $bb18:
    assume $i52 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3271} $i34 := drm_fb_helper_debug_leave($p33);
    $r := $i34;
    return;

  $bb19:
    assume $i53 == 1;
    call {:si_unique_call 3272} $i35 := __builtinx_object_size();
    $r := $i35;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 1032636);

procedure devirtbounce.9(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 1033668);

procedure devirtbounce.10(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 1034700);

procedure devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(qxl_get_timeline_name, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(qxl_get_driver_name, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(qxl_best_encoder, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(qxl_gem_prime_vmap, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(qxl_gem_prime_get_sg_table, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3273} $p2 := qxl_gem_prime_get_sg_table($p1);
    $r := $p2;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3274} $p4 := qxl_gem_prime_vmap($p3);
    $r := $p4;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3275} $p6 := qxl_best_encoder($p5);
    $r := $p6;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3276} $p8 := qxl_get_driver_name($p7);
    $r := $p8;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3277} $p10 := qxl_get_timeline_name($p9);
    $r := $p10;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 1035732);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 1036764);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(qxl_init_mem_type, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3278} $i3 := qxl_init_mem_type($p1, arg1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 3279} $i4 := __builtinx_object_size();
    $r := $i4;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 1037796);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 1038828);

procedure devirtbounce.15(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation devirtbounce.15(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i46 := $eq.ref(qxl_ttm_backend_destroy, $p0);
    assume {:branchcond $i46} true;
    goto $bb26, $bb51;

  $bb51:
    assume !($i46 == 1);
    $i45 := $eq.ref(qxl_ttm_tt_unpopulate, $p0);
    assume true;
    goto $bb25, $bb50;

  $bb50:
    assume !($i45 == 1);
    $i44 := $eq.ref(qxl_enc_commit, $p0);
    assume true;
    goto $bb24, $bb49;

  $bb49:
    assume !($i44 == 1);
    $i43 := $eq.ref(qxl_enc_prepare, $p0);
    assume true;
    goto $bb23, $bb48;

  $bb48:
    assume !($i43 == 1);
    $i42 := $eq.ref(qxl_enc_destroy, $p0);
    assume true;
    goto $bb22, $bb47;

  $bb47:
    assume !($i42 == 1);
    $i41 := $eq.ref(qxl_conn_destroy, $p0);
    assume true;
    goto $bb21, $bb46;

  $bb46:
    assume !($i41 == 1);
    $i40 := $eq.ref(qxl_conn_restore, $p0);
    assume {:branchcond $i40} true;
    goto $bb20, $bb45;

  $bb45:
    assume !($i40 == 1);
    $i39 := $eq.ref(qxl_conn_save, $p0);
    assume true;
    goto $bb19, $bb44;

  $bb44:
    assume !($i39 == 1);
    $i38 := $eq.ref(qxl_crtc_disable, $p0);
    assume true;
    goto $bb18, $bb43;

  $bb43:
    assume !($i38 == 1);
    $i37 := $eq.ref(qxl_crtc_commit, $p0);
    assume true;
    goto $bb17, $bb42;

  $bb42:
    assume !($i37 == 1);
    $i36 := $eq.ref(qxl_crtc_prepare, $p0);
    assume true;
    goto $bb16, $bb41;

  $bb41:
    assume !($i36 == 1);
    $i35 := $eq.ref(qxl_crtc_destroy, $p0);
    assume {:branchcond $i35} true;
    goto $bb15, $bb40;

  $bb40:
    assume !($i35 == 1);
    $i34 := $eq.ref(qxl_user_framebuffer_destroy, $p0);
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume !($i34 == 1);
    $i33 := $eq.ref(qxl_pci_remove, $p0);
    assume true;
    goto $bb13, $bb38;

  $bb38:
    assume !($i33 == 1);
    $i32 := $eq.ref(ttm_bo_global_release, $p0);
    assume true;
    goto $bb12, $bb37;

  $bb37:
    assume !($i32 == 1);
    $i31 := $eq.ref(qxl_ttm_mem_global_release, $p0);
    assume true;
    goto $bb11, $bb36;

  $bb36:
    assume !($i31 == 1);
    $i30 := $eq.ref(qxl_client_monitors_config_work_func, $p0);
    assume true;
    goto $bb10, $bb35;

  $bb35:
    assume !($i30 == 1);
    $i29 := $eq.ref(qxl_gc_work, $p0);
    assume true;
    goto $bb9, $bb34;

  $bb34:
    assume !($i29 == 1);
    $i28 := $eq.ref(qxl_fb_work, $p0);
    assume true;
    goto $bb8, $bb33;

  $bb33:
    assume !($i28 == 1);
    $i27 := $eq.ref(qxl_gem_prime_unpin, $p0);
    assume true;
    goto $bb7, $bb32;

  $bb32:
    assume !($i27 == 1);
    $i26 := $eq.ref(qxl_gem_object_free, $p0);
    assume {:branchcond $i26} true;
    goto $bb6, $bb31;

  $bb31:
    assume !($i26 == 1);
    $i25 := $eq.ref(qxl_debugfs_takedown, $p0);
    assume true;
    goto $bb5, $bb30;

  $bb30:
    assume !($i25 == 1);
    $i24 := $eq.ref(fence_release, $p0);
    assume true;
    goto $bb4, $bb29;

  $bb29:
    assume !($i24 == 1);
    $i23 := $eq.ref(qxl_ttm_bo_destroy, $p0);
    assume {:branchcond $i23} true;
    goto $bb3, $bb28;

  $bb28:
    assume !($i23 == 1);
    $i22 := $eq.ref(drm_gem_object_free, $p0);
    assume true;
    goto $bb2, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3280} drm_gem_object_free($p1);
    return;

  $bb3:
    assume $i23 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3281} qxl_ttm_bo_destroy($p2);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3282} fence_release($p3);
    return;

  $bb5:
    assume $i25 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3283} qxl_debugfs_takedown($p4);
    return;

  $bb6:
    assume $i26 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3284} qxl_gem_object_free($p5);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3285} qxl_gem_prime_unpin($p6);
    return;

  $bb8:
    assume $i28 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3286} qxl_fb_work($p7);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i29 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3287} qxl_gc_work($p8);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i30 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3288} qxl_client_monitors_config_work_func($p9);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3289} qxl_ttm_mem_global_release($p10);
    return;

  $bb12:
    assume $i32 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3290} ttm_bo_global_release($p11);
    return;

  $bb13:
    assume $i33 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3291} qxl_pci_remove($p12);
    return;

  $bb14:
    assume $i34 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3292} qxl_user_framebuffer_destroy($p13);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i35 == 1;
    call {:si_unique_call 3293} qxl_crtc_destroy(arg);
    return;

  $bb16:
    assume $i36 == 1;
    call {:si_unique_call 3294} qxl_crtc_prepare(arg);
    return;

  $bb17:
    assume $i37 == 1;
    call {:si_unique_call 3295} qxl_crtc_commit(arg);
    return;

  $bb18:
    assume $i38 == 1;
    call {:si_unique_call 3296} qxl_crtc_disable(arg);
    return;

  $bb19:
    assume $i39 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3297} qxl_conn_save($p14);
    return;

  $bb20:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3298} qxl_conn_restore($p15);
    return;

  $bb21:
    assume $i41 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3299} qxl_conn_destroy($p16);
    return;

  $bb22:
    assume $i42 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3300} qxl_enc_destroy($p17);
    return;

  $bb23:
    assume $i43 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3301} qxl_enc_prepare($p18);
    return;

  $bb24:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3302} qxl_enc_commit($p19);
    return;

  $bb25:
    assume $i45 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3303} qxl_ttm_tt_unpopulate($p20);
    return;

  $bb26:
    assume $i46 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3304} qxl_ttm_backend_destroy($p21);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 1039860);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(qxl_nop_signaling, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3305} $i1 := qxl_nop_signaling(arg);
    $r := $i1;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 1040892);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i64);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i32;

const $u2: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.56, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.137, $M.138, $M.145, $M.128, $M.146, $M.141, $M.139, $M.140, $M.42, $M.133, $M.134, $M.135, $M.136, $M.142, $M.47, $M.49, $M.51, $M.53, $M.48, $M.50, $M.52, $M.54, $M.143, $M.144, $M.156, $M.157, $M.158, $M.159, $M.160, $M.44, $M.43, $M.6, $M.129, $M.211, $M.59, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.132, $M.39, $M.130, $M.309, $M.310, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3306} __SMACK_static_init();
    call {:si_unique_call 3307} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.66, $M.75, $M.76, $M.77, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.59, $M.6, $M.98, $M.46, $M.33, $M.99, $M.67, $M.68, $M.71, $M.72, $M.73, $M.74, $M.69, $M.70, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.56, $M.137, $M.138, $M.145, $M.128, $M.146, $M.141, $M.139, $M.140, $M.42, $M.133, $M.134, $M.135, $M.136, $M.142, $M.47, $M.49, $M.51, $M.53, $M.48, $M.50, $M.52, $M.54, $M.143, $M.144, $M.156, $M.157, $M.158, $M.159, $M.160, $M.44, $M.43, $M.129, $M.211, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.132, $M.39, $M.130, $M.309, $M.310, $CurrAddr, $M.57, $M.40, $M.60, $M.35, $M.36, $M.32, $M.61, $M.62, $M.41, $M.63, $M.64, $M.65, $M.58, $M.55;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation qxl_gem_object_create_with_handle_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} qxl_gem_object_create_with_handle_loop_$bb7();
    return;

  exit:
    return;
}



procedure qxl_gem_object_create_with_handle_loop_$bb7();



implementation qxl_gem_object_create_with_handle_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} qxl_gem_object_create_with_handle_loop_$bb3();
    return;

  exit:
    return;
}



procedure qxl_gem_object_create_with_handle_loop_$bb3();



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 77} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_203;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_202;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 75} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 73} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_193;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_192;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation qxl_ttm_placement_from_domain_loop_$bb16(in_$p0: ref, in_$i44: i32, in_$i51: i64, in_$p54: ref, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i50: i32) returns (out_$i51: i64, out_$p54: ref, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i50: i32)
{

  entry:
    out_$i51, out_$p54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i50 := in_$i51, in_$p54, in_$i55, in_$p58, in_$i59, in_$i60, in_$i50;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;

  $bb18:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := out_$i59;
    goto $bb18_dummy;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i32(out_$i59, in_$i44);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i50, 1);
    call {:si_unique_call 119} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p58, 0);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i55, 12)), $mul.ref(4, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i50);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p54, 0);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i51, 12)), $mul.ref(0, 1));
    goto corral_source_split_378;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i50);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i51, out_$p54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i50 := qxl_ttm_placement_from_domain_loop_$bb16(in_$p0, in_$i44, out_$i51, out_$p54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i50);
    return;

  exit:
    return;
}



procedure qxl_ttm_placement_from_domain_loop_$bb16(in_$p0: ref, in_$i44: i32, in_$i51: i64, in_$p54: ref, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i50: i32) returns (out_$i51: i64, out_$p54: ref, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i50: i32);
  modifies $M.6;



implementation qxl_update_surface_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15 := in_$i13, in_$i14, in_$i15;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} out_$i13 := qxl_io_update_area(in_$p0, in_$p1, in_$p2);
    call {:si_unique_call 144} {:cexpr "ret"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_453;

  $bb2:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb2_dummy;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i13;
    assume true;
    goto $bb2;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, $sub.i32(0, 512));
    goto corral_source_split_454;

  $bb2_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15 := qxl_update_surface_loop_$bb1(in_$p0, in_$p1, in_$p2, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure qxl_update_surface_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32);
  modifies $M.6, $CurrAddr;



implementation qxl_release_fence_buffer_objects_loop_$bb11(in_$p0: ref, in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p38: ref)
{

  entry:
    out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p38 := in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p38;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  $bb13:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p38 := out_$p46;
    goto $bb13_dummy;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i36);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.6, out_$p45);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __ttm_bo_unreserve(out_$p40);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} ttm_bo_add_to_lru(out_$p40);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} reservation_object_add_shared_fence(out_$p42, out_$p43);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, out_$p41);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 872)), $mul.ref(448, 1));
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.6, out_$p39);
    goto corral_source_split_677;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p38 := qxl_release_fence_buffer_objects_loop_$bb11(in_$p0, in_$i36, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p38);
    return;

  exit:
    return;
}



procedure qxl_release_fence_buffer_objects_loop_$bb11(in_$p0: ref, in_$i36: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p38: ref);



implementation trace_fence_emit_loop_$bb14(in_$p0: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27 := in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p23;
    goto $bb15_dummy;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.37, out_$p24);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p17, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p17, $mul.ref(1, 16));
    goto corral_source_split_759;

  SeqInstr_84:
    goto corral_source_split_758;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p19);
    call {:si_unique_call 208} devirtbounce.4(out_$p22, out_$p21, in_$p0);
    goto SeqInstr_83;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.38, out_$p20);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p17, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.37, out_$p18);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_754;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27 := trace_fence_emit_loop_$bb14(in_$p0, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure trace_fence_emit_loop_$bb14(in_$p0: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1);
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation qxl_ring_push_loop_$bb45(in_$p0: ref, in_$p4: ref, in_$p59: ref, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i1) returns (out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i1)
{

  entry:
    out_$p64, out_$i65, out_$i66, out_$i67 := in_$p64, in_$i65, in_$i66, in_$i67;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb49_dummy;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} out_$i66 := qxl_check_header(in_$p0);
    call {:si_unique_call 329} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_$i65 := prepare_to_wait_event(out_$p64, in_$p4, 2);
    call {:si_unique_call 327} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.6, in_$p59);
    goto corral_source_split_1146;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} schedule();
    goto corral_source_split_1145;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p64, out_$i65, out_$i66, out_$i67 := qxl_ring_push_loop_$bb45(in_$p0, in_$p4, in_$p59, out_$p64, out_$i65, out_$i66, out_$i67);
    return;

  exit:
    return;
}



procedure qxl_ring_push_loop_$bb45(in_$p0: ref, in_$p4: ref, in_$p59: ref, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i1) returns (out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i1);
  modifies $M.39, $M.6;



implementation qxl_ring_push_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$p36: ref, in_$i41: i64, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$i46: i64, in_$i47: i32, in_$i48: i1) returns (out_$i41: i64, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$i46: i64, out_$i47: i32, out_$i48: i1)
{

  entry:
    out_$i41, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48 := in_$i41, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i46;
    goto $bb31_dummy;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} out_$i47 := qxl_check_header(in_$p0);
    call {:si_unique_call 318} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} out_$i46 := prepare_to_wait_event(out_$p45, in_$p3, 1);
    call {:si_unique_call 316} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.6, in_$p36);
    goto corral_source_split_1113;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} schedule();
    goto corral_source_split_1112;

  $bb29:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i41;
    assume true;
    goto $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i41, 0);
    goto corral_source_split_1108;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i41, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48 := qxl_ring_push_loop_$bb24(in_$p0, in_$p3, in_$p36, out_$i41, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure qxl_ring_push_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$p36: ref, in_$i41: i64, in_$i43: i1, in_$i44: i64, in_$p45: ref, in_$i46: i64, in_$i47: i32, in_$i48: i1) returns (out_$i41: i64, out_$i43: i1, out_$i44: i64, out_$p45: ref, out_$i46: i64, out_$i47: i32, out_$i48: i1);
  modifies $M.39, $M.6;



implementation qxl_ring_push_loop_$bb11(in_$p0: ref, in_$i29: i32, in_$i30: i1) returns (out_$i29: i32, out_$i30: i1)
{

  entry:
    out_$i29, out_$i30 := in_$i29, in_$i30;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb13_dummy;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} out_$i29 := qxl_check_header(in_$p0);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1070;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} __const_udelay(4295);
    goto corral_source_split_1069;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30 := qxl_ring_push_loop_$bb11(in_$p0, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure qxl_ring_push_loop_$bb11(in_$p0: ref, in_$i29: i32, in_$i30: i1) returns (out_$i29: i32, out_$i30: i1);
  modifies $M.39, $M.6;



implementation qxl_release_list_add_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p12 := in_$p14, in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p23, in_$p24, in_$p25, in_$p27, in_$i28, in_$i29, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p24;
    goto $bb10_dummy;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i10);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.6, out_$p23);
    goto corral_source_split_1601;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1600;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i16, out_$i18);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1312)), $mul.ref(88, 1));
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.6, out_$p14);
    goto corral_source_split_1590;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p12 := qxl_release_list_add_loop_$bb4(in_$p1, in_$i10, out_$p14, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p12);
    return;

  exit:
    return;
}



procedure qxl_release_list_add_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref);



implementation qxl_release_free_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18 := in_$p6, in_$p7, in_$p8, in_$p10, in_$p11, in_$p12, in_$p13, in_$p15, in_$p16, in_$i17, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb6_dummy;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} out_$i17 := list_empty(in_$p2);
    call {:si_unique_call 577} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} kfree(out_$p16);
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} list_del(out_$p15);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2073;

  SeqInstr_204:
    goto corral_source_split_2072;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} qxl_bo_unref(in_$p1);
    goto SeqInstr_203;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, in_$p1, out_$p13);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.6, out_$p6);
    goto corral_source_split_2065;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18 := qxl_release_free_list_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p6, out_$p7, out_$p8, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$p16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure qxl_release_free_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1);
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation wait_for_io_cmd_user_loop_$bb109(in_$p0: ref, in_$p7: ref, in_$i96: i32, in_$i155: i64, in_$p156: ref, in_$i157: i64, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i161: i8, in_$i162: i1, in_$i163: i1, in_$i164: i64, in_$i165: i1, in_$i167: i1, in_$i166: i1, in_$i168: i32, in_$i169: i1, in_$i170: i64, in_$i171: i64) returns (out_$i155: i64, out_$p156: ref, out_$i157: i64, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i161: i8, out_$i162: i1, out_$i163: i1, out_$i164: i64, out_$i165: i1, out_$i167: i1, out_$i166: i1, out_$i168: i32, out_$i169: i1, out_$i170: i64, out_$i171: i64)
{

  entry:
    out_$i155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i167, out_$i166, out_$i168, out_$i169, out_$i170, out_$i171 := in_$i155, in_$p156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i167, in_$i166, in_$i168, in_$i169, in_$i170, in_$i171;
    goto $bb109, exit;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i155 := out_$i171;
    goto corral_source_split_2549_dummy;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$i171 := schedule_timeout(out_$i164);
    call {:si_unique_call 696} {:cexpr "__ret___6"} boogie_si_record_i64(out_$i171);
    goto corral_source_split_2549;

  $bb120:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i164;
    assume true;
    goto $bb120;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i168, 0);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i1.i32(out_$i166);
    goto corral_source_split_2538;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i167;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    assume out_$i165 == 1;
    goto $bb117;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$i166 := 1;
    assume true;
    goto $bb116, $bb118;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    out_$i165 := $trunc.i8.i1(out_$i161);
    goto corral_source_split_2535;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2534;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i164 := out_$i155;
    goto $bb115;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    out_$i164 := 1;
    goto $bb115;

  $bb113:
    assume out_$i163 == 1;
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i64(out_$i155, 0);
    goto corral_source_split_2530;

  $bb110:
    assume out_$i162 == 1;
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i8.i1(out_$i161);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i1.i8(out_$i160);
    call {:si_unique_call 693} {:cexpr "__cond___5"} boogie_si_record_i8(out_$i161);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$i160 := $sgt.i32(out_$i159, in_$i96);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} out_$i159 := atomic_read(out_$p158);
    call {:si_unique_call 692} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_2524;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_$i157 := prepare_to_wait_event(out_$p156, in_$p7, 2);
    call {:si_unique_call 690} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i157);
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2521;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb112;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb112;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i64(out_$i164, 0);
    goto corral_source_split_2542;

  $bb118:
    assume !(out_$i165 == 1);
    goto corral_source_split_2541;

  corral_source_split_2549_dummy:
    call {:si_unique_call 1} out_$i155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i167, out_$i166, out_$i168, out_$i169, out_$i170, out_$i171 := wait_for_io_cmd_user_loop_$bb109(in_$p0, in_$p7, in_$i96, out_$i155, out_$p156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i167, out_$i166, out_$i168, out_$i169, out_$i170, out_$i171);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb109(in_$p0: ref, in_$p7: ref, in_$i96: i32, in_$i155: i64, in_$p156: ref, in_$i157: i64, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i161: i8, in_$i162: i1, in_$i163: i1, in_$i164: i64, in_$i165: i1, in_$i167: i1, in_$i166: i1, in_$i168: i32, in_$i169: i1, in_$i170: i64, in_$i171: i64) returns (out_$i155: i64, out_$p156: ref, out_$i157: i64, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i161: i8, out_$i162: i1, out_$i163: i1, out_$i164: i64, out_$i165: i1, out_$i167: i1, out_$i166: i1, out_$i168: i32, out_$i169: i1, out_$i170: i64, out_$i171: i64);



implementation wait_for_io_cmd_user_loop_$bb79(in_$p0: ref, in_$p6: ref, in_$i96: i32, in_$i117: i64, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i8, in_$i124: i1, in_$i125: i1, in_$i126: i64, in_$i127: i1, in_$i129: i1, in_$i128: i1, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$i134: i1, in_$i135: i64, in_$i136: i64) returns (out_$i117: i64, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i8, out_$i124: i1, out_$i125: i1, out_$i126: i64, out_$i127: i1, out_$i129: i1, out_$i128: i1, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$i134: i1, out_$i135: i64, out_$i136: i64)
{

  entry:
    out_$i117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i128, out_$i130, out_$i131, out_$i132, out_$i134, out_$i135, out_$i136 := in_$i117, in_$p118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i129, in_$i128, in_$i130, in_$i131, in_$i132, in_$i134, in_$i135, in_$i136;
    goto $bb79, exit;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i136;
    goto corral_source_split_2492_dummy;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} out_$i136 := schedule_timeout(out_$i126);
    call {:si_unique_call 686} {:cexpr "__ret___4"} boogie_si_record_i64(out_$i136);
    goto corral_source_split_2492;

  $bb94:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i119;
    assume true;
    goto $bb94;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i119, 0);
    goto corral_source_split_2488;

  $bb90:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i126;
    assume true;
    goto $bb90;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i1.i32(out_$i128);
    goto corral_source_split_2476;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_2475;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i129;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    assume out_$i127 == 1;
    goto $bb87;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i128 := 1;
    assume true;
    goto $bb86, $bb88;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i127 := $trunc.i8.i1(out_$i123);
    goto corral_source_split_2473;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i117;
    goto $bb85;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i126 := 1;
    goto $bb85;

  $bb83:
    assume out_$i125 == 1;
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i64(out_$i117, 0);
    goto corral_source_split_2468;

  $bb80:
    assume out_$i124 == 1;
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i8.i1(out_$i123);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i1.i8(out_$i122);
    call {:si_unique_call 683} {:cexpr "__cond___3"} boogie_si_record_i8(out_$i123);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i122 := $sgt.i32(out_$i121, in_$i96);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_$i121 := atomic_read(out_$p120);
    call {:si_unique_call 682} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} out_$i119 := prepare_to_wait_event(out_$p118, in_$p6, 1);
    call {:si_unique_call 680} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i119);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2459;

  $bb81:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb82;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb82;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i64(out_$i126, 0);
    goto corral_source_split_2480;

  $bb88:
    assume !(out_$i127 == 1);
    goto corral_source_split_2479;

  corral_source_split_2492_dummy:
    call {:si_unique_call 1} out_$i117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i128, out_$i130, out_$i131, out_$i132, out_$i134, out_$i135, out_$i136 := wait_for_io_cmd_user_loop_$bb79(in_$p0, in_$p6, in_$i96, out_$i117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i128, out_$i130, out_$i131, out_$i132, out_$i134, out_$i135, out_$i136);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb79(in_$p0: ref, in_$p6: ref, in_$i96: i32, in_$i117: i64, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$i123: i8, in_$i124: i1, in_$i125: i1, in_$i126: i64, in_$i127: i1, in_$i129: i1, in_$i128: i1, in_$i130: i32, in_$i131: i1, in_$i132: i64, in_$i134: i1, in_$i135: i64, in_$i136: i64) returns (out_$i117: i64, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$i123: i8, out_$i124: i1, out_$i125: i1, out_$i126: i64, out_$i127: i1, out_$i129: i1, out_$i128: i1, out_$i130: i32, out_$i131: i1, out_$i132: i64, out_$i134: i1, out_$i135: i64, out_$i136: i64);



implementation wait_for_io_cmd_user_loop_$bb46(in_$p0: ref, in_$p5: ref, in_$i15: i32, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i78: i8, in_$i79: i1, in_$i80: i1, in_$i81: i64, in_$i82: i1, in_$i84: i1, in_$i83: i1, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$i88: i64) returns (out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i78: i8, out_$i79: i1, out_$i80: i1, out_$i81: i64, out_$i82: i1, out_$i84: i1, out_$i83: i1, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$i88: i64)
{

  entry:
    out_$i72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88 := in_$i72, in_$p73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i84, in_$i83, in_$i85, in_$i86, in_$i87, in_$i88;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i88;
    goto corral_source_split_2399_dummy;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} out_$i88 := schedule_timeout(out_$i81);
    call {:si_unique_call 665} {:cexpr "__ret___2"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_2399;

  $bb57:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i81;
    assume true;
    goto $bb57;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i32(out_$i83);
    goto corral_source_split_2388;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_2387;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i84;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb54;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i83 := 1;
    assume true;
    goto $bb53, $bb55;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i8.i1(out_$i78);
    goto corral_source_split_2385;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i72;
    goto $bb52;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i81 := 1;
    goto $bb52;

  $bb50:
    assume out_$i80 == 1;
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i72, 0);
    goto corral_source_split_2380;

  $bb47:
    assume out_$i79 == 1;
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i8.i1(out_$i78);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i1.i8(out_$i77);
    call {:si_unique_call 662} {:cexpr "__cond___1"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, in_$i15);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} out_$i76 := atomic_read(out_$p75);
    call {:si_unique_call 661} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} out_$i74 := prepare_to_wait_event(out_$p73, in_$p5, 2);
    call {:si_unique_call 659} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2371;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1);
    goto $bb49;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i64(out_$i81, 0);
    goto corral_source_split_2392;

  $bb55:
    assume !(out_$i82 == 1);
    goto corral_source_split_2391;

  corral_source_split_2399_dummy:
    call {:si_unique_call 1} out_$i72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88 := wait_for_io_cmd_user_loop_$bb46(in_$p0, in_$p5, in_$i15, out_$i72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i84, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb46(in_$p0: ref, in_$p5: ref, in_$i15: i32, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i78: i8, in_$i79: i1, in_$i80: i1, in_$i81: i64, in_$i82: i1, in_$i84: i1, in_$i83: i1, in_$i85: i32, in_$i86: i1, in_$i87: i64, in_$i88: i64) returns (out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i78: i8, out_$i79: i1, out_$i80: i1, out_$i81: i64, out_$i82: i1, out_$i84: i1, out_$i83: i1, out_$i85: i32, out_$i86: i1, out_$i87: i64, out_$i88: i64);



implementation wait_for_io_cmd_user_loop_$bb16(in_$p0: ref, in_$p4: ref, in_$i15: i32, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i1, in_$i46: i1, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$i49: i64, in_$i51: i1, in_$i52: i64, in_$i53: i64) returns (out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i1, out_$i46: i1, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$i49: i64, out_$i51: i1, out_$i52: i64, out_$i53: i64)
{

  entry:
    out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53 := in_$i34, in_$p35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_$i45, in_$i47, in_$i48, in_$i49, in_$i51, in_$i52, in_$i53;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i53;
    goto corral_source_split_2341_dummy;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} out_$i53 := schedule_timeout(out_$i43);
    call {:si_unique_call 655} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_2341;

  $bb31:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i36;
    assume true;
    goto $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2337;

  $bb27:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i43;
    assume true;
    goto $bb27;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i45);
    goto corral_source_split_2325;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i46;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb24;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$i45 := 1;
    assume true;
    goto $bb23, $bb25;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_2322;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2321;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i34;
    goto $bb22;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i43 := 1;
    goto $bb22;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i34, 0);
    goto corral_source_split_2317;

  $bb17:
    assume out_$i41 == 1;
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i8.i1(out_$i40);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i8(out_$i39);
    call {:si_unique_call 652} {:cexpr "__cond"} boogie_si_record_i8(out_$i40);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i39 := $sgt.i32(out_$i38, in_$i15);
    goto corral_source_split_2312;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_$i38 := atomic_read(out_$p37);
    call {:si_unique_call 651} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3560, 1));
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_$i36 := prepare_to_wait_event(out_$p35, in_$p4, 1);
    call {:si_unique_call 649} {:cexpr "tmp"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3744, 1));
    goto corral_source_split_2308;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb19;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i43, 0);
    goto corral_source_split_2329;

  $bb25:
    assume !(out_$i44 == 1);
    goto corral_source_split_2328;

  corral_source_split_2341_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53 := wait_for_io_cmd_user_loop_$bb16(in_$p0, in_$p4, in_$i15, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_user_loop_$bb16(in_$p0: ref, in_$p4: ref, in_$i15: i32, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$i40: i8, in_$i41: i1, in_$i42: i1, in_$i43: i64, in_$i44: i1, in_$i46: i1, in_$i45: i1, in_$i47: i32, in_$i48: i1, in_$i49: i64, in_$i51: i1, in_$i52: i64, in_$i53: i64) returns (out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$i40: i8, out_$i41: i1, out_$i42: i1, out_$i43: i64, out_$i44: i1, out_$i46: i1, out_$i45: i1, out_$i47: i32, out_$i48: i1, out_$i49: i64, out_$i51: i1, out_$i52: i64, out_$i53: i64);



implementation qxl_mode_dumb_mmap_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} qxl_mode_dumb_mmap_loop_$bb3();
    return;

  exit:
    return;
}



procedure qxl_mode_dumb_mmap_loop_$bb3();



implementation qxl_release_reserve_list_loop_$bb11(in_$i23: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p25: ref) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p25: ref)
{

  entry:
    out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p25 := in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p38, in_$p39, in_$p40, in_$p42, in_$i43, in_$i44, in_$p25;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  $bb16:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p39;
    goto $bb16_dummy;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i23);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.6, out_$p38);
    goto corral_source_split_3655;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3654;

  $bb14:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb14;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3647;

  SeqInstr_357:
    call {:si_unique_call 973} {:cexpr "ret"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3646;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_$i31 := qxl_release_validate_bo(out_$p30);
    goto SeqInstr_356;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref($sub.ref(0, 88), 1312));
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.6, out_$p27);
    goto corral_source_split_3643;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p25 := qxl_release_reserve_list_loop_$bb11(in_$i23, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p25);
    return;

  exit:
    return;
}



procedure qxl_release_reserve_list_loop_$bb11(in_$i23: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p25: ref) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p25: ref);
  modifies $M.6, $M.35, $M.36, $M.39, $M.40, $CurrAddr, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_image_free_objects_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p21, out_$p15;
    goto $bb6_dummy;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i13);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.6, out_$p20);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} kfree(out_$p18);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_3798;

  SeqInstr_369:
    goto corral_source_split_3797;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} qxl_bo_unref(out_$p17);
    goto SeqInstr_368;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16 := qxl_image_free_objects_loop_$bb4(in_$i13, out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure qxl_image_free_objects_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref, out_$p16: ref);
  modifies $M.6, $M.46, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_image_init_helper_loop_$bb29(in_$p0: ref, in_$p16: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8) returns (out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8)
{

  entry:
    out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i54, in_$i55, in_$p56, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  $bb34:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i69, out_$i66, out_$p68;
    goto $bb34_dummy;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i54, out_$i61);
    call {:si_unique_call 1030} {:cexpr "out_offset"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p56, $mul.ref(out_$i67, 1));
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i61);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i55, out_$i61);
    call {:si_unique_call 1029} {:cexpr "remain"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3924;

  SeqInstr_396:
    goto corral_source_split_3923;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} qxl_bo_kunmap_atomic_page(in_$p0, in_$p16, out_$p62);
    goto SeqInstr_395;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.6;
    out_cmdloc_dummy_var_25 := $M.6;
    call {:si_unique_call 1027} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p64, out_$p56, out_$i65, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_26;
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i61);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 1));
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i58);
    goto corral_source_split_3919;

  SeqInstr_393:
    goto corral_source_split_3918;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} out_$p62 := qxl_bo_kmap_atomic_page(in_$p0, in_$p16, out_$i57);
    goto SeqInstr_392;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i55;
    goto $bb33;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb33;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, out_$i55);
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(4096, out_$i58);
    call {:si_unique_call 1025} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i54, 4095);
    call {:si_unique_call 1024} {:cexpr "page_offset___0"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_3909;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i54, $sub.i32(0, 4096));
    call {:si_unique_call 1023} {:cexpr "page_base"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb32:
    assume !(out_$i60 == 1);
    goto corral_source_split_3915;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := qxl_image_init_helper_loop_$bb29(in_$p0, in_$p16, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26);
    return;

  exit:
    return;
}



procedure qxl_image_init_helper_loop_$bb29(in_$p0: ref, in_$p16: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8) returns (out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8);
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_image_init_helper_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$i5: i32, in_$i8: i32, in_$i10: i32, in_$p16: ref, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i71: i32, in_$i72: i1, in_$i47: i32, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8) returns (out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i71: i32, out_$i72: i1, out_$i47: i32, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8)
{

  entry:
    out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_$i71, out_$i72, out_$i47, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i54, in_$i55, in_$p56, in_$i71, in_$i72, in_$i47, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3895;

  $bb37:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i71;
    goto $bb37_dummy;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i71, in_$i5);
    goto corral_source_split_3933;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i47, 1);
    call {:si_unique_call 1031} {:cexpr "i"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_3932;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb28;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume !(out_$i70 == 1);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i54, out_$i61);
    call {:si_unique_call 1030} {:cexpr "out_offset"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p56, $mul.ref(out_$i67, 1));
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i61);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i55, out_$i61);
    call {:si_unique_call 1029} {:cexpr "remain"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3924;

  SeqInstr_396:
    goto corral_source_split_3923;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} qxl_bo_kunmap_atomic_page(in_$p0, in_$p16, out_$p62);
    goto SeqInstr_395;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.6;
    out_cmdloc_dummy_var_25 := $M.6;
    call {:si_unique_call 1027} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p64, out_$p56, out_$i65, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_26;
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i61);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 1));
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i58);
    goto corral_source_split_3919;

  SeqInstr_393:
    goto corral_source_split_3918;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} out_$p62 := qxl_bo_kmap_atomic_page(in_$p0, in_$p16, out_$i57);
    goto SeqInstr_392;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i55;
    goto $bb33;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb33;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, out_$i55);
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(4096, out_$i58);
    call {:si_unique_call 1025} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i54, 4095);
    call {:si_unique_call 1024} {:cexpr "page_offset___0"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_3909;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i54, $sub.i32(0, 4096));
    call {:si_unique_call 1023} {:cexpr "page_base"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    call out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := qxl_image_init_helper_loop_$bb29(in_$p0, in_$p16, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i52, in_$i10, out_$p50;
    goto $bb29;

  $bb34:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$p56 := out_$i69, out_$i66, out_$p68;
    assume false;
    return;

  $bb26:
    assume out_$i53 == 1;
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i53 := $sgt.i32(in_$i10, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i51, 20);
    call {:si_unique_call 1022} {:cexpr "out_offset"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i51 := $mul.i32(out_$i47, in_$i8);
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(in_$p3, $mul.ref(out_$i49, 1));
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_3898;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i48 := $mul.i32(out_$i47, in_$i8);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume !(out_$i60 == 1);
    goto corral_source_split_3915;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_$i71, out_$i72, out_$i47, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := qxl_image_init_helper_loop_$bb24(in_$p0, in_$p3, in_$i5, in_$i8, in_$i10, in_$p16, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i54, out_$i55, out_$p56, out_$i71, out_$i72, out_$i47, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26);
    return;

  exit:
    return;
}



procedure qxl_image_init_helper_loop_$bb24(in_$p0: ref, in_$p3: ref, in_$i5: i32, in_$i8: i32, in_$i10: i32, in_$p16: ref, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i71: i32, in_$i72: i1, in_$i47: i32, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8) returns (out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i71: i32, out_$i72: i1, out_$i47: i32, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8);
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_image_init_helper_loop_$bb9(in_$p0: ref, in_$p16: ref, in_$i30: i32, in_$p31: ref, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$i30: i32, out_$p31: ref, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8)
{

  entry:
    out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := in_$i30, in_$p31, in_$i32, in_$p33, in_$p34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i27, in_$i28, in_$p29, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3848;

  $bb17:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$i28, out_$p29 := out_$i44, out_$i43, out_$p42;
    goto $bb17_dummy;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i43, 0);
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1019} {:cexpr "page"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i32(out_$i28, out_$i39);
    call {:si_unique_call 1018} {:cexpr "remain"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p29, $mul.ref(out_$i41, 1));
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i39);
    goto corral_source_split_3870;

  SeqInstr_387:
    goto corral_source_split_3869;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} qxl_bo_kunmap_atomic_page(in_$p0, in_$p16, out_$p31);
    goto SeqInstr_386;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.6;
    out_cmdloc_dummy_var_22 := $M.6;
    call {:si_unique_call 1016} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p36, out_$p29, out_$i40, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_23;
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_3867;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i28;
    goto $bb16;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i37;
    goto $bb16;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, out_$i28);
    goto corral_source_split_3860;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$p36, out_$i37 := out_$p31, 4096;
    goto $bb13;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$p36, out_$i37 := out_$p34, 4076;
    goto $bb13;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3855;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i27, 0);
    goto corral_source_split_3852;

  SeqInstr_384:
    goto corral_source_split_3851;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_$p31 := qxl_bo_kmap_atomic_page(in_$p0, in_$p16, out_$i30);
    goto SeqInstr_383;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i30 := $shl.i32(out_$i27, 12);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume !(out_$i38 == 1);
    goto corral_source_split_3864;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := qxl_image_init_helper_loop_$bb9(in_$p0, in_$p16, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23);
    return;

  exit:
    return;
}



procedure qxl_image_init_helper_loop_$bb9(in_$p0: ref, in_$p16: ref, in_$i30: i32, in_$p31: ref, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$i30: i32, out_$p31: ref, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8);
  modifies $M.6, $M.39, $CurrAddr, $M.35, $M.36, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.55;



implementation qxl_surface_id_alloc_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$p6: ref, in_$i7: i1, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i15: i32, in_vslice_dummy_var_105: i32) returns (out_$i2: i32, out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$p6: ref, out_$i7: i1, out_$i8: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i15: i32, out_vslice_dummy_var_105: i32)
{

  entry:
    out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$p19, out_$i15, out_vslice_dummy_var_105 := in_$i2, in_$p3, in_$p4, in_$i5, in_$p6, in_$i7, in_$i8, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i16, in_$p17, in_$p18, in_$p19, in_$i15, in_vslice_dummy_var_105;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i16;
    goto corral_source_split_4086_dummy;

  SeqInstr_414:
    goto corral_source_split_4086;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_vslice_dummy_var_105 := qxl_reap_surface_id(in_$p0, 2);
    goto SeqInstr_413;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} spin_unlock(out_$p19);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} idr_remove(out_$p18, out_$i5);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} spin_lock(out_$p17);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i2, 1);
    call {:si_unique_call 1061} {:cexpr "count"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4079;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i5;
    assume true;
    goto $bb6;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    out_$i14 := $ule.i32(out_$i13, out_$i5);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.6, out_$p12);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_4073;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4072;

  $bb3:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i5;
    assume true;
    goto $bb3;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i5, 0);
    goto corral_source_split_4066;

  SeqInstr_411:
    goto corral_source_split_4065;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} idr_preload_end();
    goto SeqInstr_410;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} spin_unlock(out_$p6);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} out_$i5 := idr_alloc(out_$p4, $0.ref, 1, 0, 0);
    call {:si_unique_call 1058} {:cexpr "idr_ret"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} spin_lock(out_$p3);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} idr_preload(32);
    goto corral_source_split_4058;

  corral_source_split_4086_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$p19, out_$i15, out_vslice_dummy_var_105 := qxl_surface_id_alloc_loop_$bb1(in_$p0, out_$i2, out_$p3, out_$p4, out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p17, out_$p18, out_$p19, out_$i15, out_vslice_dummy_var_105);
    return;

  exit:
    return;
}



procedure qxl_surface_id_alloc_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$p6: ref, in_$i7: i1, in_$i8: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i15: i32, in_vslice_dummy_var_105: i32) returns (out_$i2: i32, out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$p6: ref, out_$i7: i1, out_$i8: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i15: i32, out_vslice_dummy_var_105: i32);
  modifies $M.39, $M.6, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $CurrAddr, $M.35, $M.36, $M.40, $M.46, $M.41, $M.61, $M.62, $M.55, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57;



implementation qxl_reap_surface_id_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$i4: i8, in_$i8: i32, in_$p10: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46 := in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i30, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i17, in_$i18, in_$i46;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  $bb18:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i30, out_$i40;
    goto $bb18_dummy;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i30;
    assume true;
    goto $bb18;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i40, out_$i44);
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, in_$i8);
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.6, out_$p42);
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.6, in_$p10);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1090} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4270;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i36;
    goto $bb9;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i17;
    goto $bb9;

  $bb7:
    assume out_$i29 == 1;
    goto corral_source_split_4267;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} spin_unlock(out_$p27);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_$p26 := idr_find(out_$p25, out_$i23);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} spin_lock(out_$p24);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i23 := $urem.i32(out_$i18, out_$i22);
    call {:si_unique_call 1086} {:cexpr "surfid"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.6, out_$p21);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_4254;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb15;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i36, in_$i1);
    goto corral_source_split_4286;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4285;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i17;
    goto $bb13;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb13;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1093} {:cexpr "num_reaped"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4283;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_4280;

  SeqInstr_435:
    call {:si_unique_call 1092} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4279;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_$i33 := qxl_reap_surf(in_$p0, out_$p31, out_$i32);
    goto SeqInstr_434;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(in_$i4);
    goto corral_source_split_4278;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_4277;

  $bb8:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46 := qxl_reap_surface_id_loop_$bb5(in_$p0, in_$i1, in_$i4, in_$i8, in_$p10, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46);
    return;

  exit:
    return;
}



procedure qxl_reap_surface_id_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$i4: i8, in_$i8: i32, in_$p10: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32);
  modifies $M.39, $M.6, $CurrAddr, $M.35, $M.36, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_reap_surface_id_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i3: i32, in_$i4: i8, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32, in_$i16: i32, in_$i39: i32, in_$i47: i1, in_$i49: i1, in_$i48: i32) returns (out_$i3: i32, out_$i4: i8, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32, out_$i16: i32, out_$i39: i32, out_$i47: i1, out_$i49: i1, out_$i48: i32)
{

  entry:
    out_$i3, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46, out_$i16, out_$i39, out_$i47, out_$i49, out_$i48 := in_$i3, in_$i4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i30, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i17, in_$i18, in_$i46, in_$i16, in_$i39, in_$i47, in_$i49, in_$i48;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;

  $bb25:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i39, 1;
    goto $bb25_dummy;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i39;
    assume true;
    goto $bb25;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i8.i1(out_$i4);
    goto corral_source_split_4296;

  $bb21:
    assume out_$i47 == 1;
    goto corral_source_split_4295;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i39;
    assume true;
    goto $bb21;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i39, 0);
    goto corral_source_split_4291;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4290;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i16;
    goto $bb16;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i38;
    goto $bb16;

  $bb14:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i36, in_$i1);
    goto corral_source_split_4286;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4285;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i17;
    goto $bb13;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb13;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1093} {:cexpr "num_reaped"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4283;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_4280;

  SeqInstr_435:
    call {:si_unique_call 1092} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4279;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_$i33 := qxl_reap_surf(in_$p0, out_$p31, out_$i32);
    goto SeqInstr_434;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i4);
    goto corral_source_split_4278;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_4277;

  $bb8:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} spin_unlock(out_$p27);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_$p26 := idr_find(out_$p25, out_$i23);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4592, 1));
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} spin_lock(out_$p24);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i23 := $urem.i32(out_$i18, out_$i22);
    call {:si_unique_call 1086} {:cexpr "surfid"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.6, out_$p21);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_4254;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46 := qxl_reap_surface_id_loop_$bb5(in_$p0, in_$i1, out_$i4, out_$i8, out_$p10, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i3, out_$i8;
    goto $bb5;

  $bb18:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i30, out_$i40;
    assume false;
    return;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i30;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i40, out_$i44);
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, out_$i8);
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.6, out_$p42);
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.6, out_$p10);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1090} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4270;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i36;
    goto $bb9;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i17;
    goto $bb9;

  $bb7:
    assume out_$i29 == 1;
    goto corral_source_split_4267;

  $bb15:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume out_$i15 == 1;
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i3;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i32(out_$i8, out_$i14);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i13, out_$i8);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.6, out_$p12);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 1160)), $mul.ref(52, 1));
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} spin_unlock(out_$p9);
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1084} {:cexpr "start"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.6, out_$p6);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4776, 1));
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} spin_lock(out_$p5);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(4704, 1));
    goto corral_source_split_4235;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb4;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i46;
    goto $bb4;

  $bb19:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4293;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46, out_$i16, out_$i39, out_$i47, out_$i49, out_$i48 := qxl_reap_surface_id_loop_$bb1(in_$p0, in_$i1, out_$i3, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i30, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i17, out_$i18, out_$i46, out_$i16, out_$i39, out_$i47, out_$i49, out_$i48);
    return;

  exit:
    return;
}



procedure qxl_reap_surface_id_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i3: i32, in_$i4: i8, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i30: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i17: i32, in_$i18: i32, in_$i46: i32, in_$i16: i32, in_$i39: i32, in_$i47: i1, in_$i49: i1, in_$i48: i32) returns (out_$i3: i32, out_$i4: i8, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i30: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i17: i32, out_$i18: i32, out_$i46: i32, out_$i16: i32, out_$i39: i32, out_$i47: i1, out_$i49: i1, out_$i48: i32);
  modifies $M.6, $M.35, $M.36, $M.39, $CurrAddr, $M.40, $M.46, $M.41, $M.61, $M.62, assertsPassed, $M.58, $M.32, $M.63, $M.64, $M.57, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.55;



implementation qxl_debugfs_remove_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i4: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$i5: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i20: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i4: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32)
{

  entry:
    out_$i5, out_$p8, out_$p9, out_$i10, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i20, out_$p23, out_$p24, out_$i25, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i4, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := in_$i5, in_$p8, in_$p9, in_$i10, in_$p13, in_$i14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i20, in_$p23, in_$p24, in_$i25, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i35, in_$i36, in_$i37, in_$i4, in_vslice_dummy_var_111, in_vslice_dummy_var_112;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4716;

  $bb6:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i35;
    goto $bb6_dummy;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i32(out_$i36, out_$i35);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, in_$p1);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1230} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} out_vslice_dummy_var_112 := drm_debugfs_remove_files(out_$p24, out_$i29, out_$p33);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.6, out_$p32);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 3320)), $mul.ref(56, 1));
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.6, out_$p30);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i25, 16)), $mul.ref(8, 1));
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i4);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.6, out_$p23);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i4);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_vslice_dummy_var_111 := drm_debugfs_remove_files(out_$p9, out_$i14, out_$p18);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.6, out_$p17);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 3320)), $mul.ref(48, 1));
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.6, out_$p15);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.6, out_$p13);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i10, 16)), $mul.ref(8, 1));
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i4);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.6, out_$p8);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i5, 16)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i32.i64(out_$i4);
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$p8, out_$p9, out_$i10, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i20, out_$p23, out_$p24, out_$i25, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i4, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := qxl_debugfs_remove_files_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$p8, out_$p9, out_$i10, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i20, out_$p23, out_$p24, out_$i25, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i4, out_vslice_dummy_var_111, out_vslice_dummy_var_112);
    return;

  exit:
    return;
}



procedure qxl_debugfs_remove_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i4: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$i5: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i20: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i4: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32);



implementation qxl_bo_unpin_loop_$bb11(in_$p0: ref, in_$p21: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i24: i32) returns (out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24 := in_$i25, in_$p28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$i37, in_$i24;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4921;

  $bb13:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i35;
    goto $bb13_dummy;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$i37 := $ult.i32(out_$i35, out_$i36);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, in_$p21);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1275} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p34, out_$i30);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i31, 12)), $mul.ref(8, 1));
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, $sub.i32(0, 2097153));
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(16, 1)), $mul.ref(out_$i25, 12)), $mul.ref(8, 1));
    goto corral_source_split_4924;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24 := qxl_bo_unpin_loop_$bb11(in_$p0, in_$p21, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24);
    return;

  exit:
    return;
}



procedure qxl_bo_unpin_loop_$bb11(in_$p0: ref, in_$p21: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i24: i32) returns (out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i24: i32);
  modifies $M.6;



implementation qxl_modeset_init_loop_$bb8(in_$p0: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i38: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32) returns (out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i38: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32)
{

  entry:
    out_$p39, out_$p40, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i38, out_vslice_dummy_var_130, out_vslice_dummy_var_131 := in_$p39, in_$p40, in_$p42, in_$p43, in_$i45, in_$i46, in_$i47, in_$i38, in_vslice_dummy_var_130, in_vslice_dummy_var_131;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  $bb10:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i45;
    goto $bb10_dummy;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i45, out_$i46);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i46 := $M.56;
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i38, 1);
    call {:si_unique_call 1375} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5576;

  SeqInstr_525:
    goto corral_source_split_5575;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} out_vslice_dummy_var_131 := qdev_output_init(out_$p43, out_$i38);
    goto SeqInstr_524;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.6, out_$p42);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5573;

  SeqInstr_522:
    goto corral_source_split_5572;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} out_vslice_dummy_var_130 := qdev_crtc_init(out_$p40, out_$i38);
    goto SeqInstr_521;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.6, out_$p39);
    goto corral_source_split_5571;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(8, 1));
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i38, out_vslice_dummy_var_130, out_vslice_dummy_var_131 := qxl_modeset_init_loop_$bb8(in_$p0, out_$p39, out_$p40, out_$p42, out_$p43, out_$i45, out_$i46, out_$i47, out_$i38, out_vslice_dummy_var_130, out_vslice_dummy_var_131);
    return;

  exit:
    return;
}



procedure qxl_modeset_init_loop_$bb8(in_$p0: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i38: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32) returns (out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i38: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32);
  modifies $M.6, assertsPassed;



implementation qxl_check_device_loop_$bb8(in_$p0: ref, in_$p63: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i66: i32) returns (out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i66: i32)
{

  entry:
    out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i66 := in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i66;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6008;

  $bb10:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := out_$i73;
    goto $bb10_dummy;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, out_$i73);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.6, in_$p63);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i66, 1);
    call {:si_unique_call 1484} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} qxl_dump_mode(in_$p0, out_$p72);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p70, $mul.ref(out_$i71, 1));
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i66);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.6, out_$p68);
    goto corral_source_split_6011;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3000, 1)), $mul.ref(8, 1));
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i66 := qxl_check_device_loop_$bb8(in_$p0, in_$p63, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i66);
    return;

  exit:
    return;
}



procedure qxl_check_device_loop_$bb8(in_$p0: ref, in_$p63: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i66: i32) returns (out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i66: i32);



implementation qxl_garbage_collect_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i1, in_$i16: i32, in_$i38: i32) returns (out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i1, out_$i16: i32, out_$i38: i32)
{

  entry:
    out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38 := in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i16, in_$i38;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  $bb35:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i35;
    goto $bb35_dummy;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i35;
    assume true;
    goto $bb35;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_6255;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6254;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1550} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6253;

  SeqInstr_555:
    goto corral_source_split_6252;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} qxl_release_free(in_$p0, out_$p18);
    goto SeqInstr_554;

  $bb33:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, in_$p1, out_$i25);
    goto corral_source_split_6251;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb28;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb25;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume out_$i34 == 1;
    goto corral_source_split_6249;

  $bb22:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_6247;

  $bb19:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} qxl_io_log.ref.ref.i64.i64(in_$p0, .str.36, out_$i28, out_$i25);
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6244;

  $bb18:
    assume out_$i27 == 1;
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$i26 := $M.42;
    goto corral_source_split_6240;

  SeqInstr_552:
    goto corral_source_split_6239;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} qxl_release_unmap(in_$p0, out_$p18, out_$p23);
    goto SeqInstr_551;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.6, out_$p24);
    call {:si_unique_call 1546} {:cexpr "next_id"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_6237;

  SeqInstr_549:
    goto corral_source_split_6236;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_$p23 := qxl_release_map(in_$p0, out_$p18);
    goto SeqInstr_548;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i16;
    assume true;
    goto $bb15;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} out_$p18 := qxl_release_from_id_locked(in_$p0, out_$i17);
    goto corral_source_split_6224;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} drm_err.ref(.str.37);
    goto corral_source_split_6257;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb30;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38 := qxl_garbage_collect_loop_$bb12(in_$p0, in_$p1, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38);
    return;

  exit:
    return;
}



procedure qxl_garbage_collect_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i1, in_$i16: i32, in_$i38: i32) returns (out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i1, out_$i16: i32, out_$i38: i32);
  modifies $M.39, $M.6, $CurrAddr, $M.46, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_garbage_collect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i1, in_$i16: i32, in_$i38: i32, in_$i15: i32, in_$i22: i32, in_$p39: ref, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$i9: i32, in_$i43: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i1, out_$i16: i32, out_$i38: i32, out_$i15: i32, out_$i22: i32, out_$p39: ref, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$i9: i32, out_$i43: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38, out_$i15, out_$i22, out_$p39, out_$i40, out_$i41, out_$i42, out_$i9, out_$i43 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i16, in_$i38, in_$i15, in_$i22, in_$p39, in_$i40, in_$i41, in_$i42, in_$i9, in_$i43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6207;

  $bb38:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i22;
    goto $bb38_dummy;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i22;
    assume true;
    goto $bb38;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i41);
    goto corral_source_split_6234;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i8(out_$i40);
    call {:si_unique_call 1544} {:cexpr "tmp"} boogie_si_record_i8(out_$i41);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} out_$i40 := qxl_ring_pop(out_$p39, in_$p4);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.6, in_$p2);
    goto corral_source_split_6231;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i15;
    goto $bb16;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb16;

  $bb14:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i16;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} out_$p18 := qxl_release_from_id_locked(in_$p0, out_$i17);
    goto corral_source_split_6224;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38 := qxl_garbage_collect_loop_$bb12(in_$p0, in_$p1, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i9;
    goto $bb12;

  $bb35:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i35;
    assume false;
    return;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i35;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_6255;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6254;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1550} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6253;

  SeqInstr_555:
    goto corral_source_split_6252;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} qxl_release_free(in_$p0, out_$p18);
    goto SeqInstr_554;

  $bb33:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, in_$p1, out_$i25);
    goto corral_source_split_6251;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb28;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb25;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume out_$i34 == 1;
    goto corral_source_split_6249;

  $bb22:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(0, 216)), $mul.ref(92, 1));
    goto corral_source_split_6247;

  $bb19:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} qxl_io_log.ref.ref.i64.i64(in_$p0, .str.36, out_$i28, out_$i25);
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6244;

  $bb18:
    assume out_$i27 == 1;
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, 0);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$i26 := $M.42;
    goto corral_source_split_6240;

  SeqInstr_552:
    goto corral_source_split_6239;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} qxl_release_unmap(in_$p0, out_$p18, out_$p23);
    goto SeqInstr_551;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.6, out_$p24);
    call {:si_unique_call 1546} {:cexpr "next_id"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_6237;

  SeqInstr_549:
    goto corral_source_split_6236;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_$p23 := qxl_release_map(in_$p0, out_$p18);
    goto SeqInstr_548;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i30, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} drm_err.ref(.str.37);
    goto corral_source_split_6257;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb30;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i9;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_6217;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6216;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} qxl_io_log.ref.ref.i64(in_$p0, .str.35, out_$i12);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i64($M.58, in_$p1);
    goto corral_source_split_6213;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, 0);
    goto corral_source_split_6210;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $M.42;
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb11;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i38;
    goto $bb11;

  $bb36:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6259;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38, out_$i15, out_$i22, out_$p39, out_$i40, out_$i41, out_$i42, out_$i9, out_$i43 := qxl_garbage_collect_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p4, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i16, out_$i38, out_$i15, out_$i22, out_$p39, out_$i40, out_$i41, out_$i42, out_$i9, out_$i43);
    return;

  exit:
    return;
}



procedure qxl_garbage_collect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i10: i32, in_$i11: i1, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i1, in_$i16: i32, in_$i38: i32, in_$i15: i32, in_$i22: i32, in_$p39: ref, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$i9: i32, in_$i43: i32) returns (out_$i10: i32, out_$i11: i1, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i1, out_$i16: i32, out_$i38: i32, out_$i15: i32, out_$i22: i32, out_$p39: ref, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$i9: i32, out_$i43: i32);
  modifies $M.39, $M.6, $CurrAddr, $M.46, $M.58, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation wait_for_io_cmd_loop_$bb1(in_$p0: ref, in_$i1: i8, in_$i2: i64, in_$i3: i32, in_$i4: i8, in_$i5: i32, in_$i6: i1) returns (out_$i3: i32, out_$i4: i8, out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6 := in_$i3, in_$i4, in_$i5, in_$i6;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$i3 := $zext.i8.i32(in_$i1);
    goto corral_source_split_6397;

  $bb2:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb2_dummy;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i5, $sub.i32(0, 512));
    goto corral_source_split_6400;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} out_$i5 := wait_for_io_cmd_user(in_$p0, out_$i4, in_$i2, 0);
    call {:si_unique_call 1581} {:cexpr "ret"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_6399;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    out_$i4 := $trunc.i32.i8(out_$i3);
    goto corral_source_split_6398;

  $bb2_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6 := wait_for_io_cmd_loop_$bb1(in_$p0, in_$i1, in_$i2, out_$i3, out_$i4, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure wait_for_io_cmd_loop_$bb1(in_$p0: ref, in_$i1: i8, in_$i2: i64, in_$i3: i32, in_$i4: i8, in_$i5: i32, in_$i6: i1) returns (out_$i3: i32, out_$i4: i8, out_$i5: i32, out_$i6: i1);
  modifies $M.6, $CurrAddr;



implementation qxl_display_read_client_monitors_config_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_6426;

  SeqInstr_564:
    call {:si_unique_call 1591} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_6425;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} out_$i5 := qxl_display_copy_rom_client_monitors_config(in_$p0);
    goto SeqInstr_563;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} qxl_io_log.ref.ref(in_$p0, .str.2);
    goto corral_source_split_6424;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := qxl_display_read_client_monitors_config_loop_$bb4(in_$p0, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure qxl_display_read_client_monitors_config_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $M.6, $CurrAddr, assertsPassed;



implementation qxl_display_copy_rom_client_monitors_config_loop_$bb14(in_$p0: ref, in_$p59: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i1, in_$i65: i32) returns (out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i1, out_$i65: i32)
{

  entry:
    out_$p66, out_$p67, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i65 := in_$p66, in_$p67, in_$p69, in_$p70, in_$i71, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$p79, in_$i80, in_$p81, in_$p82, in_$i83, in_$p84, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$p109, in_$i110, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i65;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6530;

  $bb19:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i115;
    goto $bb19_dummy;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i120 := $sgt.i32(out_$i119, out_$i115);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i16.i32(out_$i118);
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i16($M.6, out_$p117);
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p116, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.6, in_$p59);
    goto corral_source_split_6592;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i65, 1);
    call {:si_unique_call 1611} {:cexpr "i"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_6591;

  $bb17:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} drm_ut_debug_printk.ref.ref.i32.i32.i32.i32(.str.109, .str.111, out_$i108, out_$i110, out_$i112, out_$i114);
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.6, out_$p113);
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.6, out_$p111);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.6, out_$p109);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.6, out_$p107);
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_6581;

  $bb16:
    assume out_$i106 == 1;
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, 0);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_$i105 := ldv__builtin_expect(out_$i104, 0);
    call {:si_unique_call 1609} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i105);
    goto corral_source_split_6577;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i103);
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i1.i32(out_$i102);
    goto corral_source_split_6575;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 4);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.6, drm_debug);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p99, 0);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(24, 1));
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p98, out_$i65);
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(0, 1));
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p97, 0);
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(4, 1));
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p96, out_$i95);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(12, 1));
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i92, out_$i94);
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.6, out_$p93);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.6, out_$p91);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(8, 1));
    goto corral_source_split_6559;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p90, out_$i89);
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(8, 1));
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i86, out_$i88);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.6, out_$p87);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.6, out_$p85);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(12, 1));
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p84, out_$i83);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(20, 1));
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.6, out_$p82);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p81, out_$i80);
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p76, $mul.ref(out_$i77, 28)), $mul.ref(16, 1));
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.6, out_$p79);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i71, 16)), $mul.ref(4, 1));
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i65);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.6, out_$p73);
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i65);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p67, $mul.ref(0, 1160)), $mul.ref(132, 1)), $mul.ref(4, 1));
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.6, out_$p66);
    goto corral_source_split_6533;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(80, 1));
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i65 := qxl_display_copy_rom_client_monitors_config_loop_$bb14(in_$p0, in_$p59, out_$p66, out_$p67, out_$p69, out_$p70, out_$i71, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$p79, out_$i80, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i65);
    return;

  exit:
    return;
}



procedure qxl_display_copy_rom_client_monitors_config_loop_$bb14(in_$p0: ref, in_$p59: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i16, in_$i119: i32, in_$i120: i1, in_$i65: i32) returns (out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i16, out_$i119: i32, out_$i120: i1, out_$i65: i32);
  modifies $M.6;



implementation qxl_update_offset_props_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i13: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32)
{

  entry:
    out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_vslice_dummy_var_151, out_vslice_dummy_var_152 := in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p26, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p34, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p15, in_vslice_dummy_var_151, in_vslice_dummy_var_152;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6617;

  $bb6:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p46;
    goto $bb6_dummy;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i13);
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 936)), $mul.ref(24, 1));
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 936));
    goto corral_source_split_6646;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.6, out_$p43);
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 936)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} out_vslice_dummy_var_152 := drm_object_property_set_value(out_$p34, out_$p37, out_$i40);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.6, out_$p38);
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i24, 28)), $mul.ref(20, 1));
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.6, out_$p36);
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1776, 1));
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p15, $mul.ref(0, 936)), $mul.ref(40, 1));
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_vslice_dummy_var_151 := drm_object_property_set_value(out_$p26, out_$p29, out_$i32);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i31);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.6, out_$p30);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i24, 28)), $mul.ref(16, 1));
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.6, out_$p28);
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 3320)), $mul.ref(1224, 1)), $mul.ref(1768, 1));
    goto corral_source_split_6630;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p15, $mul.ref(0, 936)), $mul.ref(40, 1));
    goto corral_source_split_6629;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto corral_source_split_6628;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i23);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.6, out_$p22);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 8), 1040)), $mul.ref(0, 1));
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_6624;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.6, out_$p18);
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(112, 1));
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    goto corral_source_split_6620;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_6619;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_vslice_dummy_var_151, out_vslice_dummy_var_152 := qxl_update_offset_props_loop_$bb4(in_$p0, in_$p2, in_$i13, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p15, out_vslice_dummy_var_151, out_vslice_dummy_var_152);
    return;

  exit:
    return;
}



procedure qxl_update_offset_props_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i13: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p15: ref, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p15: ref, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32);



implementation qxl_debugfs_add_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6 := in_$i7, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i18, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6900;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i16;
    goto $bb10_dummy;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$i18 := $ugt.i32(out_$i17, out_$i16);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.6, in_$p3);
    goto corral_source_split_6914;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1669} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6913;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i64(out_$i12, out_$i13);
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_6904;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(3912, 1)), $mul.ref(out_$i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_6903;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i32.i64(out_$i6);
    goto corral_source_split_6902;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6 := qxl_debugfs_add_files_loop_$bb4(in_$p0, in_$p1, in_$p3, out_$i7, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6);
    return;

  exit:
    return;
}



procedure qxl_debugfs_add_files_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i6: i32);



implementation qxl_drm_freeze_loop_$bb23(in_$p5: ref, in_$p45: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_vslice_dummy_var_169: i1) returns (out_$p50: ref, out_$i51: i32, out_$i52: i1, out_vslice_dummy_var_169: i1)
{

  entry:
    out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_169 := in_$p50, in_$i51, in_$i52, in_vslice_dummy_var_169;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i52 == 1;
    goto $bb25_dummy;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} out_$i51 := qxl_check_idle(out_$p50);
    call {:si_unique_call 1778} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.6, in_$p45);
    goto corral_source_split_7326;

  SeqInstr_597:
    goto corral_source_split_7325;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_vslice_dummy_var_169 := qxl_queue_garbage_collect(in_$p5, 1);
    goto SeqInstr_596;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_169 := qxl_drm_freeze_loop_$bb23(in_$p5, in_$p45, out_$p50, out_$i51, out_$i52, out_vslice_dummy_var_169);
    return;

  exit:
    return;
}



procedure qxl_drm_freeze_loop_$bb23(in_$p5: ref, in_$p45: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_vslice_dummy_var_169: i1) returns (out_$p50: ref, out_$i51: i32, out_$i52: i1, out_vslice_dummy_var_169: i1);
  modifies $M.39, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation qxl_drm_freeze_loop_$bb15(in_$p38: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1) returns (out_$p42: ref, out_$i43: i32, out_$i44: i1)
{

  entry:
    out_$p42, out_$i43, out_$i44 := in_$p42, in_$i43, in_$i44;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb17_dummy;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_$i43 := qxl_check_idle(out_$p42);
    call {:si_unique_call 1773} {:cexpr "tmp"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_7313;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, in_$p38);
    goto corral_source_split_7312;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p42, out_$i43, out_$i44 := qxl_drm_freeze_loop_$bb15(in_$p38, out_$p42, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure qxl_drm_freeze_loop_$bb15(in_$p38: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1) returns (out_$p42: ref, out_$i43: i32, out_$i44: i1);
  modifies $M.39;



implementation qxl_drm_freeze_loop_$bb4(in_$i16: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p18 := in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7279;

  $bb9:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p31;
    goto $bb9_dummy;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i16);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 16), 1160)), $mul.ref(16, 1));
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 16), 1160));
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.6, out_$p28);
    goto corral_source_split_7293;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 1160)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7292;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_591:
    goto corral_source_split_7290;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.6, out_$p25);
    call {:si_unique_call 1766} devirtbounce.15(out_$p26, out_$p18);
    goto SeqInstr_590;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p21, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_7289;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i8.i1(out_$i23);
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.6, out_$p22);
    goto corral_source_split_7285;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1160)), $mul.ref(264, 1));
    goto corral_source_split_7284;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_7283;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_7282;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1160)), $mul.ref(744, 1));
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p18 := qxl_drm_freeze_loop_$bb4(in_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p18);
    return;

  exit:
    return;
}



procedure qxl_drm_freeze_loop_$bb4(in_$i16: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p18: ref);
  modifies $M.46, $M.6, $M.39, $M.58, $CurrAddr, $M.40, $M.35, $M.36, $M.55, $M.41, $M.61, $M.62, assertsPassed, $M.32, $M.63, $M.64, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.57;



implementation qxl_draw_dirty_fb_loop_$bb53(in_$i6: i32, in_$i7: i32, in_$p105: ref, in_$p169: ref, in_$i170: i16, in_$i171: i32, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i16, in_$i177: i32, in_$i178: i64, in_$p180: ref, in_$p181: ref, in_$i182: i16, in_$i183: i32, in_$i184: i64, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$i189: i32, in_$i190: i64, in_$p192: ref, in_$i193: i32, in_$i194: i64, in_$p195: ref, in_$i196: i1, in_$i167: i32, in_$p168: ref) returns (out_$p169: ref, out_$i170: i16, out_$i171: i32, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i16, out_$i177: i32, out_$i178: i64, out_$p180: ref, out_$p181: ref, out_$i182: i16, out_$i183: i32, out_$i184: i64, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$i189: i32, out_$i190: i64, out_$p192: ref, out_$i193: i32, out_$i194: i64, out_$p195: ref, out_$i196: i1, out_$i167: i32, out_$p168: ref)
{

  entry:
    out_$p169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p186, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i167, out_$p168 := in_$p169, in_$i170, in_$i171, in_$i172, in_$p174, in_$p175, in_$i176, in_$i177, in_$i178, in_$p180, in_$p181, in_$i182, in_$i183, in_$i184, in_$p186, in_$p187, in_$i188, in_$i189, in_$i190, in_$p192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i167, in_$p168;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  $bb55:
    assume out_$i196 == 1;
    assume {:verifier.code 0} true;
    out_$i167, out_$p168 := out_$i193, out_$p195;
    goto $bb55_dummy;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$i196 := $ult.i32(out_$i193, in_$i6);
    goto corral_source_split_7674;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref(out_$p168, $mul.ref(out_$i194, 8));
    goto corral_source_split_7673;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i32.i64(in_$i7);
    goto corral_source_split_7672;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    out_$i193 := $add.i32(out_$i167, 1);
    call {:si_unique_call 1850} {:cexpr "i"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_7671;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p192, out_$i189);
    goto corral_source_split_7670;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i190, 16)), $mul.ref(8, 1));
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i190 := $sext.i32.i64(out_$i167);
    goto corral_source_split_7667;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    out_$i189 := $zext.i16.i32(out_$i188);
    goto corral_source_split_7666;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i16($M.6, out_$p187);
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7664;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p186, out_$i183);
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i184, 16)), $mul.ref(0, 1));
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i32.i64(out_$i167);
    goto corral_source_split_7660;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i16.i32(out_$i182);
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i16($M.6, out_$p181);
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7657;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p180, out_$i177);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i178, 16)), $mul.ref(12, 1));
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i167);
    goto corral_source_split_7653;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i16.i32(out_$i176);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i16($M.6, out_$p175);
    goto corral_source_split_7651;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p174, out_$i171);
    goto corral_source_split_7649;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(in_$p105, $mul.ref(out_$i172, 16)), $mul.ref(4, 1));
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto corral_source_split_7647;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i167);
    goto corral_source_split_7646;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i16.i32(out_$i170);
    goto corral_source_split_7645;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i16($M.6, out_$p169);
    goto corral_source_split_7644;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(out_$p168, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7643;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p186, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i167, out_$p168 := qxl_draw_dirty_fb_loop_$bb53(in_$i6, in_$i7, in_$p105, out_$p169, out_$i170, out_$i171, out_$i172, out_$p174, out_$p175, out_$i176, out_$i177, out_$i178, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p186, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i167, out_$p168);
    return;

  exit:
    return;
}



procedure qxl_draw_dirty_fb_loop_$bb53(in_$i6: i32, in_$i7: i32, in_$p105: ref, in_$p169: ref, in_$i170: i16, in_$i171: i32, in_$i172: i64, in_$p174: ref, in_$p175: ref, in_$i176: i16, in_$i177: i32, in_$i178: i64, in_$p180: ref, in_$p181: ref, in_$i182: i16, in_$i183: i32, in_$i184: i64, in_$p186: ref, in_$p187: ref, in_$i188: i16, in_$i189: i32, in_$i190: i64, in_$p192: ref, in_$i193: i32, in_$i194: i64, in_$p195: ref, in_$i196: i1, in_$i167: i32, in_$p168: ref) returns (out_$p169: ref, out_$i170: i16, out_$i171: i32, out_$i172: i64, out_$p174: ref, out_$p175: ref, out_$i176: i16, out_$i177: i32, out_$i178: i64, out_$p180: ref, out_$p181: ref, out_$i182: i16, out_$i183: i32, out_$i184: i64, out_$p186: ref, out_$p187: ref, out_$i188: i16, out_$i189: i32, out_$i190: i64, out_$p192: ref, out_$i193: i32, out_$i194: i64, out_$p195: ref, out_$i196: i1, out_$i167: i32, out_$p168: ref);
  modifies $M.6;



implementation qxl_draw_dirty_fb_loop_$bb8(in_$i6: i32, in_$i7: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$i70: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32) returns (out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$i70: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32)
{

  entry:
    out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i71, out_$i72, out_$i73, out_$i74 := in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i71, in_$i72, in_$i73, in_$i74;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7460;

  $bb22:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46 := out_$i66, out_$i61, out_$i56, out_$i51, out_$i67, out_$p69;
    goto $bb22_dummy;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i71, out_$i72, out_$i73, out_$i74 := out_$i51, out_$i56, out_$i61, out_$i66;
    assume true;
    goto $bb22;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i70 := $ult.i32(out_$i67, in_$i6);
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p46, $mul.ref(out_$i68, 8));
    goto corral_source_split_7504;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(in_$i7);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1827} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_7502;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i64;
    goto $bb21;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i41;
    goto $bb21;

  $bb19:
    assume out_$i65 == 1;
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i41, out_$i64);
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    call {:si_unique_call 1826} {:cexpr "__max2___0"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.6, out_$p62);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7492;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i59;
    goto $bb18;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i42;
    goto $bb18;

  $bb16:
    assume out_$i60 == 1;
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i42, out_$i59);
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i58);
    call {:si_unique_call 1825} {:cexpr "__min2___0"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i16($M.6, out_$p57);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7482;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7481;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    goto $bb15;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i43;
    goto $bb15;

  $bb13:
    assume out_$i55 == 1;
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i43, out_$i54);
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    call {:si_unique_call 1824} {:cexpr "__max2"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_7474;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i16($M.6, out_$p52);
    goto corral_source_split_7473;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7472;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7471;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    goto $bb12;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i44;
    goto $bb12;

  $bb10:
    assume out_$i50 == 1;
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i44, out_$i49);
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    call {:si_unique_call 1823} {:cexpr "__min2"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.6, out_$p47);
    goto corral_source_split_7463;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7462;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i50 == 1);
    goto corral_source_split_7469;

  $bb14:
    assume !(out_$i55 == 1);
    goto corral_source_split_7479;

  $bb17:
    assume !(out_$i60 == 1);
    goto corral_source_split_7489;

  $bb20:
    assume !(out_$i65 == 1);
    goto corral_source_split_7499;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i71, out_$i72, out_$i73, out_$i74 := qxl_draw_dirty_fb_loop_$bb8(in_$i6, in_$i7, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i71, out_$i72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure qxl_draw_dirty_fb_loop_$bb8(in_$i6: i32, in_$i7: i32, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$p57: ref, in_$i58: i16, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$i70: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32) returns (out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$p57: ref, out_$i58: i16, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$i70: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32);



implementation qxl_send_monitors_config_loop_$bb12(in_$p0: ref, in_$p16: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i32: i32, in_$p33: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i1, in_$i22: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i32: i32, out_$p33: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i1, out_$i22: i32)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i32, out_$p33, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i22 := in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i32, in_$p33, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i22;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8454;

  $bb24:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i51;
    goto $bb24_dummy;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i55, out_$i51);
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.6, out_$p53);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.6, in_$p16);
    goto corral_source_split_8493;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i22, 1);
    call {:si_unique_call 2026} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_8492;

  $bb22:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb22;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$i42 := $ugt.i32(out_$i41, 8192);
    goto corral_source_split_8490;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.6, out_$p40);
    goto corral_source_split_8489;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(12, 1));
    goto corral_source_split_8488;

  $bb20:
    assume !(out_$i39 == 1);
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb20;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    out_$i39 := $ugt.i32(out_$i38, 8192);
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.6, out_$p37);
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(8, 1));
    goto corral_source_split_8483;

  $bb18:
    assume !(out_$i36 == 1);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb18;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    out_$i36 := $ugt.i32(out_$i35, 8192);
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.6, out_$p34);
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(16, 1));
    goto corral_source_split_8478;

  $bb16:
    assume !(out_$i31 == 1);
    goto corral_source_split_8477;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    out_$i32, out_$p33 := out_$i22, out_$p28;
    assume true;
    goto $bb16;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    out_$i31 := $ugt.i32(out_$i30, 8192);
    goto corral_source_split_8464;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_8463;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 28)), $mul.ref(20, 1));
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p26, $mul.ref(out_$i27, 28));
    goto corral_source_split_8461;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i22);
    goto corral_source_split_8460;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_8459;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8458;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.6, out_$p23);
    goto corral_source_split_8457;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5336)), $mul.ref(104, 1));
    goto corral_source_split_8456;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i32, out_$p33, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i22 := qxl_send_monitors_config_loop_$bb12(in_$p0, in_$p16, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i32, out_$p33, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i22);
    return;

  exit:
    return;
}



procedure qxl_send_monitors_config_loop_$bb12(in_$p0: ref, in_$p16: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i32: i32, in_$p33: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i1, in_$i22: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i32: i32, out_$p33: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i1, out_$i22: i32);



implementation qxl_send_monitors_config_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} qxl_send_monitors_config_loop_$bb3();
    return;

  exit:
    return;
}



procedure qxl_send_monitors_config_loop_$bb3();



implementation qxl_write_monitors_config_for_encoder_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} qxl_write_monitors_config_for_encoder_loop_$bb3();
    return;

  exit:
    return;
}



procedure qxl_write_monitors_config_for_encoder_loop_$bb3();



implementation qxl_move_null_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} qxl_move_null_loop_$bb3();
    return;

  exit:
    return;
}



procedure qxl_move_null_loop_$bb3();



implementation qxlfb_create_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} qxlfb_create_loop_$bb6();
    return;

  exit:
    return;
}



procedure qxlfb_create_loop_$bb6();



implementation qxl_deferred_io_loop_$bb4(in_$i12: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$i26: i64, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i39: i64, in_$i40: i64) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$i26: i64, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i39: i64, out_$i40: i64)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p16, out_$i17, out_$i18, out_$i39, out_$i40 := in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p16, in_$i17, in_$i18, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10427;

  $bb12:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$i18 := out_$p34, out_$i28, out_$i26;
    goto $bb12_dummy;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i26, out_$i28;
    assume true;
    goto $bb12;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, in_$i12);
    goto corral_source_split_10457;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_10456;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p33, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_10454;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p33, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_10453;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_10452;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.6, out_$p31);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10450;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_10449;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_10448;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i24;
    goto $bb11;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i17;
    goto $bb11;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    out_$i27 := $ugt.i64(out_$i17, out_$i24);
    goto corral_source_split_10441;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10440;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i23;
    goto $bb8;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i18;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_10436;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i64(out_$i18, out_$i23);
    goto corral_source_split_10434;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i23, 4095);
    call {:si_unique_call 2337} {:cexpr "end"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_10433;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    out_$i23 := $shl.i64(out_$i22, 12);
    call {:si_unique_call 2336} {:cexpr "start"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_10432;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.6, out_$p21);
    goto corral_source_split_10431;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_10430;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10429;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i25 == 1);
    goto corral_source_split_10438;

  $bb10:
    assume !(out_$i27 == 1);
    goto corral_source_split_10445;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p16, out_$i17, out_$i18, out_$i39, out_$i40 := qxl_deferred_io_loop_$bb4(in_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p16, out_$i17, out_$i18, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure qxl_deferred_io_loop_$bb4(in_$i12: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$i26: i64, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i39: i64, in_$i40: i64) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$i26: i64, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i39: i64, out_$i40: i64);



implementation qxl_fence_wait_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p8: ref, in_$i13: i8, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$i26: i1, in_$i27: i8, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i1, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i8, in_$i62: i1, in_$i63: i1, in_$i64: i8, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i1, in_$i69: i8, in_$i70: i1, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i8, in_$i78: i1, in_$i79: i1, in_$i80: i8, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i8, in_$i94: i1, in_$i95: i1, in_$i96: i8, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i8, in_$i102: i1, in_$i103: i1, in_$i104: i8, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i8, in_$i110: i1, in_$i111: i1, in_$i112: i8, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i8, in_$i118: i1, in_$i119: i1, in_$i120: i8, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i8, in_$i126: i1, in_$i127: i1, in_$i128: i8, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i1, in_$i133: i8, in_$i134: i1) returns (out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$i26: i1, out_$i27: i8, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i1, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i8, out_$i62: i1, out_$i63: i1, out_$i64: i8, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i1, out_$i69: i8, out_$i70: i1, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i8, out_$i78: i1, out_$i79: i1, out_$i80: i8, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i8, out_$i94: i1, out_$i95: i1, out_$i96: i8, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i8, out_$i102: i1, out_$i103: i1, out_$i104: i8, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i8, out_$i110: i1, out_$i111: i1, out_$i112: i8, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i8, out_$i118: i1, out_$i119: i1, out_$i120: i8, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i8, out_$i126: i1, out_$i127: i1, out_$i128: i8, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i1, out_$i133: i8, out_$i134: i1)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i38, out_$i47, out_$i48, out_$i49, out_$i50, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134 := in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i36, in_$i37, in_$i38, in_$i47, in_$i48, in_$i49, in_$i50, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb45:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i47;
    goto $bb45_dummy;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i8.i1(out_$i49);
    goto corral_source_split_10571;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i8(out_$i48);
    call {:si_unique_call 2360} {:cexpr "tmp"} boogie_si_record_i8(out_$i49);
    goto corral_source_split_10570;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} out_$i48 := fence_is_signaled(in_$p0);
    goto corral_source_split_10569;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i17, 1);
    call {:si_unique_call 2358} {:cexpr "sc"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_10568;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb41;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i17;
    assume true;
    goto $bb43;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i17, 300);
    goto corral_source_split_10556;

  $bb39:
    assume out_$i36 == 1;
    goto corral_source_split_10555;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(in_$i13);
    goto corral_source_split_10553;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i64(out_$i33, 0);
    goto corral_source_split_10547;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i64(in_$i4, out_$i32);
    goto corral_source_split_10546;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.6, jiffies);
    goto corral_source_split_10545;

  $bb33:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} usleep_range(500, 1000);
    goto corral_source_split_10543;

  $bb32:
    assume out_$i31 == 1;
    goto corral_source_split_10542;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i17, 2);
    goto corral_source_split_10537;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb28;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(in_$i13);
    goto corral_source_split_10535;

  $bb25:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i8.i1(out_$i27);
    goto corral_source_split_10523;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i8(out_$i26);
    call {:si_unique_call 2352} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i27);
    goto corral_source_split_10522;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} out_$i26 := fence_is_signaled(in_$p0);
    goto corral_source_split_10521;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb143:
    assume {:verifier.code 0} true;
    assume out_$i131 == 1;
    goto $bb14;

  $bb133:
    assume {:verifier.code 0} true;
    assume out_$i123 == 1;
    goto $bb14;

  $bb123:
    assume {:verifier.code 0} true;
    assume out_$i115 == 1;
    goto $bb14;

  $bb113:
    assume {:verifier.code 0} true;
    assume out_$i107 == 1;
    goto $bb14;

  $bb103:
    assume {:verifier.code 0} true;
    assume out_$i99 == 1;
    goto $bb14;

  $bb93:
    assume {:verifier.code 0} true;
    assume out_$i91 == 1;
    goto $bb14;

  $bb83:
    assume {:verifier.code 0} true;
    assume out_$i83 == 1;
    goto $bb14;

  $bb73:
    assume {:verifier.code 0} true;
    assume out_$i75 == 1;
    goto $bb14;

  $bb63:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    goto $bb14;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb14;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_10519;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10518;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := 1;
    goto $bb12;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    out_$i21 := 0;
    goto $bb12;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_10516;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(out_$i19);
    goto corral_source_split_10514;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i8(out_$i18);
    call {:si_unique_call 2350} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_10513;

  SeqInstr_783:
    goto corral_source_split_10512;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} out_$i18 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_782;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} qxl_io_notify_oom(in_$p8);
    goto corral_source_split_10510;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_10580;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_10579;

  $bb51:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := 1;
    goto $bb52;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    out_$i58 := 0;
    goto $bb52;

  $bb50:
    assume out_$i57 == 1;
    goto corral_source_split_10577;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i8.i1(out_$i56);
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i8(out_$i55);
    goto corral_source_split_10530;

  SeqInstr_786:
    goto corral_source_split_10529;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} out_$i55 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_785;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_10527;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i8(out_$i23);
    call {:si_unique_call 2354} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_10526;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} out_$i23 := fence_is_signaled(in_$p0);
    goto corral_source_split_10525;

  $bb15:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_10593;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_10592;

  $bb61:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := 1;
    goto $bb62;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    out_$i66 := 0;
    goto $bb62;

  $bb60:
    assume out_$i65 == 1;
    goto corral_source_split_10590;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i8.i1(out_$i64);
    goto corral_source_split_10588;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i1.i8(out_$i63);
    goto corral_source_split_10587;

  SeqInstr_789:
    goto corral_source_split_10586;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} out_$i63 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_788;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i8.i1(out_$i61);
    goto corral_source_split_10584;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i1.i8(out_$i60);
    goto corral_source_split_10583;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} out_$i60 := fence_is_signaled(in_$p0);
    goto corral_source_split_10582;

  $bb54:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_10606;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;

  $bb71:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := 1;
    goto $bb72;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    out_$i74 := 0;
    goto $bb72;

  $bb70:
    assume out_$i73 == 1;
    goto corral_source_split_10603;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(out_$i72);
    goto corral_source_split_10601;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i1.i8(out_$i71);
    goto corral_source_split_10600;

  SeqInstr_792:
    goto corral_source_split_10599;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} out_$i71 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_791;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i8.i1(out_$i69);
    goto corral_source_split_10597;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i8(out_$i68);
    goto corral_source_split_10596;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} out_$i68 := fence_is_signaled(in_$p0);
    goto corral_source_split_10595;

  $bb64:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_10619;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_10618;

  $bb81:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := 1;
    goto $bb82;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    out_$i82 := 0;
    goto $bb82;

  $bb80:
    assume out_$i81 == 1;
    goto corral_source_split_10616;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i8.i1(out_$i80);
    goto corral_source_split_10614;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i1.i8(out_$i79);
    goto corral_source_split_10613;

  SeqInstr_795:
    goto corral_source_split_10612;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} out_$i79 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_794;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i8.i1(out_$i77);
    goto corral_source_split_10610;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i1.i8(out_$i76);
    goto corral_source_split_10609;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} out_$i76 := fence_is_signaled(in_$p0);
    goto corral_source_split_10608;

  $bb74:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_10632;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_10631;

  $bb91:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := 1;
    goto $bb92;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    out_$i90 := 0;
    goto $bb92;

  $bb90:
    assume out_$i89 == 1;
    goto corral_source_split_10629;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i8.i1(out_$i88);
    goto corral_source_split_10627;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i1.i8(out_$i87);
    goto corral_source_split_10626;

  SeqInstr_798:
    goto corral_source_split_10625;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} out_$i87 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_797;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i8.i1(out_$i85);
    goto corral_source_split_10623;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i1.i8(out_$i84);
    goto corral_source_split_10622;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} out_$i84 := fence_is_signaled(in_$p0);
    goto corral_source_split_10621;

  $bb84:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_10645;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_10644;

  $bb101:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := 1;
    goto $bb102;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    out_$i98 := 0;
    goto $bb102;

  $bb100:
    assume out_$i97 == 1;
    goto corral_source_split_10642;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i8.i1(out_$i96);
    goto corral_source_split_10640;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i1.i8(out_$i95);
    goto corral_source_split_10639;

  SeqInstr_801:
    goto corral_source_split_10638;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} out_$i95 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_800;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i8.i1(out_$i93);
    goto corral_source_split_10636;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i1.i8(out_$i92);
    goto corral_source_split_10635;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} out_$i92 := fence_is_signaled(in_$p0);
    goto corral_source_split_10634;

  $bb94:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_10658;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_10657;

  $bb111:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := 1;
    goto $bb112;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    out_$i106 := 0;
    goto $bb112;

  $bb110:
    assume out_$i105 == 1;
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    out_$i105 := $trunc.i8.i1(out_$i104);
    goto corral_source_split_10653;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i1.i8(out_$i103);
    goto corral_source_split_10652;

  SeqInstr_804:
    goto corral_source_split_10651;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} out_$i103 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_803;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    out_$i102 := $trunc.i8.i1(out_$i101);
    goto corral_source_split_10649;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i1.i8(out_$i100);
    goto corral_source_split_10648;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} out_$i100 := fence_is_signaled(in_$p0);
    goto corral_source_split_10647;

  $bb104:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_10671;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_10670;

  $bb121:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := 1;
    goto $bb122;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    out_$i114 := 0;
    goto $bb122;

  $bb120:
    assume out_$i113 == 1;
    goto corral_source_split_10668;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i8.i1(out_$i112);
    goto corral_source_split_10666;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i1.i8(out_$i111);
    goto corral_source_split_10665;

  SeqInstr_807:
    goto corral_source_split_10664;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} out_$i111 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_806;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i8.i1(out_$i109);
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i1.i8(out_$i108);
    goto corral_source_split_10661;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} out_$i108 := fence_is_signaled(in_$p0);
    goto corral_source_split_10660;

  $bb114:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_10684;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_10683;

  $bb131:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := 1;
    goto $bb132;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    out_$i122 := 0;
    goto $bb132;

  $bb130:
    assume out_$i121 == 1;
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i8.i1(out_$i120);
    goto corral_source_split_10679;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i1.i8(out_$i119);
    goto corral_source_split_10678;

  SeqInstr_810:
    goto corral_source_split_10677;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} out_$i119 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_809;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i8.i1(out_$i117);
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i1.i8(out_$i116);
    goto corral_source_split_10674;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} out_$i116 := fence_is_signaled(in_$p0);
    goto corral_source_split_10673;

  $bb124:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_10697;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_10696;

  $bb141:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := 1;
    goto $bb142;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    out_$i130 := 0;
    goto $bb142;

  $bb140:
    assume out_$i129 == 1;
    goto corral_source_split_10694;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i8.i1(out_$i128);
    goto corral_source_split_10692;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i1.i8(out_$i127);
    goto corral_source_split_10691;

  SeqInstr_813:
    goto corral_source_split_10690;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} out_$i127 := qxl_queue_garbage_collect(in_$p8, 1);
    goto SeqInstr_812;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i8.i1(out_$i125);
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i1.i8(out_$i124);
    goto corral_source_split_10687;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} out_$i124 := fence_is_signaled(in_$p0);
    goto corral_source_split_10686;

  $bb134:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb147:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$i134 := $trunc.i8.i1(out_$i133);
    goto corral_source_split_10701;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i1.i8(out_$i132);
    goto corral_source_split_10700;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} out_$i132 := fence_is_signaled(in_$p0);
    goto corral_source_split_10699;

  $bb144:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    out_$i30 := $sle.i32(out_$i17, 3);
    goto corral_source_split_10540;

  $bb29:
    assume !(out_$i29 == 1);
    goto corral_source_split_10539;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i38, out_$i47, out_$i48, out_$i49, out_$i50, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134 := qxl_fence_wait_loop_$bb4(in_$p0, in_$i4, in_$p8, in_$i13, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i38, out_$i47, out_$i48, out_$i49, out_$i50, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134);
    return;

  exit:
    return;
}



procedure qxl_fence_wait_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p8: ref, in_$i13: i8, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$i26: i1, in_$i27: i8, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i1, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i8, in_$i62: i1, in_$i63: i1, in_$i64: i8, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i1, in_$i69: i8, in_$i70: i1, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i8, in_$i78: i1, in_$i79: i1, in_$i80: i8, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i1, in_$i85: i8, in_$i86: i1, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i8, in_$i94: i1, in_$i95: i1, in_$i96: i8, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i8, in_$i102: i1, in_$i103: i1, in_$i104: i8, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i8, in_$i110: i1, in_$i111: i1, in_$i112: i8, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i8, in_$i118: i1, in_$i119: i1, in_$i120: i8, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i1, in_$i125: i8, in_$i126: i1, in_$i127: i1, in_$i128: i8, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i1, in_$i133: i8, in_$i134: i1) returns (out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$i26: i1, out_$i27: i8, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i1, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i8, out_$i62: i1, out_$i63: i1, out_$i64: i8, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i1, out_$i69: i8, out_$i70: i1, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i8, out_$i78: i1, out_$i79: i1, out_$i80: i8, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i1, out_$i85: i8, out_$i86: i1, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i8, out_$i94: i1, out_$i95: i1, out_$i96: i8, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i8, out_$i102: i1, out_$i103: i1, out_$i104: i8, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i8, out_$i110: i1, out_$i111: i1, out_$i112: i8, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i8, out_$i118: i1, out_$i119: i1, out_$i120: i8, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i1, out_$i125: i8, out_$i126: i1, out_$i127: i1, out_$i128: i8, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i1, out_$i133: i8, out_$i134: i1);
  modifies $M.39, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.6, $M.40, $M.35, $M.36, $CurrAddr, $M.55, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.57;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p42: ref, in_$i71: i32, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i64, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i1, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$p196: ref, in_$i197: i32, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$p228: ref, in_$i229: i32, in_$i230: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i64, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i249: i32, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$i255: i32, in_$i256: i1, in_$p257: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$p261: ref, in_$i262: i32, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$i272: i32, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i1, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i1, in_$i347: i1, in_$i348: i1, in_$i349: i1, in_$i350: i1, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i1, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$i366: i32, in_$i367: i32, in_$i368: i1, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i32, in_$i386: i1, in_$i387: i32, in_$i388: i1, in_$i389: i32, in_$i390: i32, in_$i391: i1, in_$i392: i32, in_$i393: i1, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i32, in_$i401: i1, in_$i402: i32, in_$i403: i1, in_$i404: i32, in_$i405: i32, in_$i406: i1, in_$i407: i32, in_$i408: i1, in_$i409: i32, in_$i410: i32, in_$i411: i1, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$i418: i1, in_$i419: i32, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i32, in_$i424: i32, in_$i425: i1, in_$i426: i32, in_$i427: i32, in_$i428: i1, in_$i429: i32, in_$i430: i1, in_$i431: i32, in_$i432: i32, in_$i433: i1, in_$i434: i32, in_$i435: i1, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i1, in_$i441: i32, in_$i442: i32, in_$i443: i1, in_$i444: i32, in_$i445: i1, in_$i446: i32, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i32, in_$i453: i1, in_$i454: i32, in_$i455: i1, in_$i457: i32, in_$i458: i32, in_$i459: i32, in_$i460: i1, in_$i461: i32, in_$i462: i1, in_$i463: i32, in_$i464: i1, in_$i465: i32, in_$i466: i1, in_$i467: i32, in_$i468: i1, in_$i469: i32, in_$i470: i1, in_$i471: i1, in_$i472: i1, in_$i473: i1, in_$i474: i32, in_$i475: i1, in_$p476: ref, in_$i477: i32, in_$i478: i32, in_$i479: i1, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i1, in_$i488: i32, in_$i489: i1, in_$i490: i32, in_$i491: i1, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i64, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i64, in_vslice_dummy_var_212: ref, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: ref, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: ref, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: ref, in_vslice_dummy_var_227: ref, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32) returns (out_$i71: i32, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i64, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i1, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$p196: ref, out_$i197: i32, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$p228: ref, out_$i229: i32, out_$i230: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i64, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i249: i32, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$i255: i32, out_$i256: i1, out_$p257: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$p261: ref, out_$i262: i32, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$i272: i32, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i1, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i1, out_$i347: i1, out_$i348: i1, out_$i349: i1, out_$i350: i1, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i1, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$i366: i32, out_$i367: i32, out_$i368: i1, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i32, out_$i386: i1, out_$i387: i32, out_$i388: i1, out_$i389: i32, out_$i390: i32, out_$i391: i1, out_$i392: i32, out_$i393: i1, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i32, out_$i401: i1, out_$i402: i32, out_$i403: i1, out_$i404: i32, out_$i405: i32, out_$i406: i1, out_$i407: i32, out_$i408: i1, out_$i409: i32, out_$i410: i32, out_$i411: i1, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$i418: i1, out_$i419: i32, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i32, out_$i424: i32, out_$i425: i1, out_$i426: i32, out_$i427: i32, out_$i428: i1, out_$i429: i32, out_$i430: i1, out_$i431: i32, out_$i432: i32, out_$i433: i1, out_$i434: i32, out_$i435: i1, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i1, out_$i441: i32, out_$i442: i32, out_$i443: i1, out_$i444: i32, out_$i445: i1, out_$i446: i32, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i32, out_$i453: i1, out_$i454: i32, out_$i455: i1, out_$i457: i32, out_$i458: i32, out_$i459: i32, out_$i460: i1, out_$i461: i32, out_$i462: i1, out_$i463: i32, out_$i464: i1, out_$i465: i32, out_$i466: i1, out_$i467: i32, out_$i468: i1, out_$i469: i32, out_$i470: i1, out_$i471: i1, out_$i472: i1, out_$i473: i1, out_$i474: i32, out_$i475: i1, out_$p476: ref, out_$i477: i32, out_$i478: i32, out_$i479: i1, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i1, out_$i488: i32, out_$i489: i1, out_$i490: i32, out_$i491: i1, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i64, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i64, out_vslice_dummy_var_212: ref, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: ref, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: ref, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: ref, out_vslice_dummy_var_227: ref, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32)
{

  entry:
    out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$p117, out_$p118, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$p138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i188, out_$i189, out_$p190, out_$i191, out_$i193, out_$i194, out_$p195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$p228, out_$i229, out_$i230, out_$i232, out_$i233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$p248, out_$i249, out_$i251, out_$i252, out_$p253, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$p260, out_$p261, out_$i262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$p271, out_$i272, out_$i274, out_$i275, out_$p276, out_$i278, out_$i279, out_$p280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i488, out_$i489, out_$i490, out_$i491, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233 := in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i111, in_$i112, in_$p113, in_$i115, in_$i116, in_$p117, in_$p118, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i127, in_$i128, in_$p129, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$p137, in_$p138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$p186, in_$i188, in_$i189, in_$p190, in_$i191, in_$i193, in_$i194, in_$p195, in_$p196, in_$i197, in_$i199, in_$i200, in_$p201, in_$i203, in_$i204, in_$p205, in_$p206, in_$i208, in_$i209, in_$p210, in_$i211, in_$i212, in_$p213, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$p223, in_$i225, in_$i226, in_$p227, in_$p228, in_$i229, in_$i230, in_$i232, in_$i233, in_$p234, in_$p235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i241, in_$i242, in_$p243, in_$i245, in_$i246, in_$p247, in_$p248, in_$i249, in_$i251, in_$i252, in_$p253, in_$i255, in_$i256, in_$p257, in_$i258, in_$i259, in_$p260, in_$p261, in_$i262, in_$i264, in_$i265, in_$p266, in_$i268, in_$i269, in_$p270, in_$p271, in_$i272, in_$i274, in_$i275, in_$p276, in_$i278, in_$i279, in_$p280, in_$p281, in_$i283, in_$i284, in_$i285, in_$i287, in_$i288, in_$p289, in_$i290, in_$i292, in_$i293, in_$p294, in_$i296, in_$i297, in_$p298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$p353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$p365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$p371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$p377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$i448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$i474, in_$i475, in_$p476, in_$i477, in_$i478, in_$i479, in_$i480, in_$i481, in_$i482, in_$i483, in_$p484, in_$i485, in_$i486, in_$i488, in_$i489, in_$i490, in_$i491, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_209, in_vslice_dummy_var_210, in_vslice_dummy_var_211, in_vslice_dummy_var_212, in_vslice_dummy_var_213, in_vslice_dummy_var_214, in_vslice_dummy_var_215, in_vslice_dummy_var_216, in_vslice_dummy_var_217, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227, in_vslice_dummy_var_228, in_vslice_dummy_var_229, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232, in_vslice_dummy_var_233;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2477} out_$i71 := __VERIFIER_nondet_int();
    call {:si_unique_call 2478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i71);
    call {:si_unique_call 2479} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i71);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb53_dummy;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} ldv_main_exported_11();
    goto corral_source_split_10960;

  $bb50:
    assume out_$i96 == 1;
    goto corral_source_split_10959;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    out_$i95 := $M.75;
    goto corral_source_split_10956;

  $bb48:
    assume out_$i94 == 1;
    goto corral_source_split_10955;

  $bb46:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i71, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb40:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i71, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb28:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i71, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb3:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i71, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i71, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb55:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2487} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_10999;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} out_vslice_dummy_var_206 := qxl_mmap(out_$p113, in_$p15);
    goto corral_source_split_10998;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    out_$p113 := $M.70;
    goto corral_source_split_10997;

  $bb75:
    assume out_$i112 == 1;
    goto corral_source_split_10996;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 2);
    goto corral_source_split_10994;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i111 := $M.76;
    goto corral_source_split_10993;

  $bb73:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2485} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_10991;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} out_vslice_dummy_var_205 := qxl_mmap(out_$p109, in_$p15);
    goto corral_source_split_10990;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    out_$p109 := $M.70;
    goto corral_source_split_10989;

  $bb72:
    assume out_$i108 == 1;
    goto corral_source_split_10988;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 1);
    goto corral_source_split_10986;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    out_$i107 := $M.76;
    goto corral_source_split_10985;

  $bb70:
    assume out_$i106 == 1;
    goto corral_source_split_10984;

  $bb66:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb57:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_10962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2481} out_$i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 2482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i99);
    call {:si_unique_call 2483} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume out_$i98 == 1;
    goto corral_source_split_10962;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_10953;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    out_$i97 := $M.76;
    goto corral_source_split_10952;

  $bb47:
    assume !(out_$i93 == 1);
    goto corral_source_split_10951;

  $bb80:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $M.82 := out_$i121;
    call {:si_unique_call 2490} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_11008;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    out_$i121 := $sub.i32(out_$i120, 1);
    goto corral_source_split_11007;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    out_$i120 := $M.82;
    goto corral_source_split_11006;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2489} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11005;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} out_vslice_dummy_var_207 := drm_release(out_$p117, out_$p118);
    goto corral_source_split_11004;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    out_$p118 := $M.70;
    goto corral_source_split_11003;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    out_$p117 := $M.69;
    goto corral_source_split_11002;

  $bb79:
    assume out_$i116 == 1;
    goto corral_source_split_11001;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 2);
    goto corral_source_split_10978;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    out_$i115 := $M.76;
    goto corral_source_split_10977;

  $bb68:
    assume out_$i105 == 1;
    goto corral_source_split_10976;

  $bb67:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i99, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb83:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2492} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11014;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} out_vslice_dummy_var_208 := drm_read(out_$p124, in_$p20, out_$i125, in_$p17);
    goto corral_source_split_11013;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i64($M.66, in_$p1);
    goto corral_source_split_11012;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    out_$p124 := $M.70;
    goto corral_source_split_11011;

  $bb82:
    assume out_$i123 == 1;
    goto corral_source_split_11010;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 2);
    goto corral_source_split_10982;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    out_$i122 := $M.76;
    goto corral_source_split_10981;

  $bb69:
    assume !(out_$i105 == 1);
    goto corral_source_split_10980;

  $bb89:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2496} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11027;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} out_vslice_dummy_var_210 := drm_poll(out_$p133, in_$p19);
    goto corral_source_split_11026;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$p133 := $M.70;
    goto corral_source_split_11025;

  $bb88:
    assume out_$i132 == 1;
    goto corral_source_split_11024;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_11022;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i131 := $M.76;
    goto corral_source_split_11021;

  $bb86:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2494} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11019;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} out_vslice_dummy_var_209 := drm_poll(out_$p129, in_$p19);
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    out_$p129 := $M.70;
    goto corral_source_split_11017;

  $bb85:
    assume out_$i128 == 1;
    goto corral_source_split_11016;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 1);
    goto corral_source_split_10966;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    out_$i127 := $M.76;
    goto corral_source_split_10965;

  $bb59:
    assume out_$i101 == 1;
    goto corral_source_split_10964;

  $bb58:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i99, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb92:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $M.82 := out_$i143;
    call {:si_unique_call 2500} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_11041;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i32(out_$i142, 1);
    goto corral_source_split_11040;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    out_$i142 := $M.82;
    goto corral_source_split_11039;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2499} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11038;

  $bb93:
    assume out_$i141 == 1;
    goto corral_source_split_11037;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 0);
    goto corral_source_split_11035;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    out_$i140 := $M.98;
    goto corral_source_split_11034;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $M.98 := out_$i139;
    call {:si_unique_call 2498} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i139);
    goto corral_source_split_11033;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} out_$i139 := drm_open(out_$p137, out_$p138);
    goto corral_source_split_11032;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    out_$p138 := $M.70;
    goto corral_source_split_11031;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    out_$p137 := $M.69;
    goto corral_source_split_11030;

  $bb91:
    assume out_$i136 == 1;
    goto corral_source_split_11029;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_10970;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    out_$i135 := $M.76;
    goto corral_source_split_10969;

  $bb61:
    assume out_$i102 == 1;
    goto corral_source_split_10968;

  $bb60:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i99, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb98:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 2502} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_11048;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} out_vslice_dummy_var_211 := drm_ioctl(out_$p146, out_$i147, out_$i148);
    goto corral_source_split_11047;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i64($M.66, in_$p0);
    goto corral_source_split_11046;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.66, in_$p2);
    goto corral_source_split_11045;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    out_$p146 := $M.70;
    goto corral_source_split_11044;

  $bb97:
    assume out_$i145 == 1;
    goto corral_source_split_11043;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 2);
    goto corral_source_split_10974;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    out_$i144 := $M.76;
    goto corral_source_split_10973;

  $bb63:
    assume out_$i103 == 1;
    goto corral_source_split_10972;

  $bb62:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i99, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} ldv_stop();
    goto corral_source_split_11050;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb65;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb65;

  $bb104:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} ldv_main_exported_7();
    goto corral_source_split_11053;

  $bb103:
    assume out_$i151 == 1;
    goto corral_source_split_11052;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.i32(out_$i150, 0);
    goto corral_source_split_10943;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    out_$i150 := $M.77;
    goto corral_source_split_10942;

  $bb42:
    assume out_$i91 == 1;
    goto corral_source_split_10941;

  $bb41:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i71, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb107:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_816:
    goto corral_source_split_11056;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} ldv_main_exported_17();
    goto SeqInstr_815;

  $bb106:
    assume out_$i153 == 1;
    goto corral_source_split_11055;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i32(out_$i152, 0);
    goto corral_source_split_10947;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    out_$i152 := $M.78;
    goto corral_source_split_10946;

  $bb44:
    assume out_$i92 == 1;
    goto corral_source_split_10945;

  $bb43:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i71, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !(out_$i92 == 1);
    goto corral_source_split_10949;

  $bb36:
    assume out_$i88 == 1;
    goto corral_source_split_10931;

  $bb30:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i71, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb29:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i71, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb110:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb168:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2510} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11167;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} out_vslice_dummy_var_212 := qxl_gem_prime_import_sg_table(out_$p186, in_$p27, in_$p29);
    goto corral_source_split_11166;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    out_$p186 := $M.74;
    goto corral_source_split_11165;

  $bb167:
    assume out_$i185 == 1;
    goto corral_source_split_11164;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 1);
    goto corral_source_split_11162;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    out_$i184 := $M.81;
    goto corral_source_split_11161;

  $bb165:
    assume out_$i183 == 1;
    goto corral_source_split_11160;

  $bb161:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i156, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb155:
    assume out_$i178 == 1;
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i156, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb141:
    assume out_$i171 == 1;
    assume {:verifier.code 0} true;
    out_$i178 := $slt.i32(out_$i156, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb112:
    assume out_$i157 == 1;
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i156, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i32(out_$i156, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_11058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2506} out_$i156 := __VERIFIER_nondet_int();
    call {:si_unique_call 2507} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i156);
    call {:si_unique_call 2508} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i156);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume out_$i155 == 1;
    goto corral_source_split_11058;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i32(out_$i154, 0);
    goto corral_source_split_10935;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    out_$i154 := $M.81;
    goto corral_source_split_10934;

  $bb38:
    assume out_$i89 == 1;
    goto corral_source_split_10933;

  $bb37:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i71, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb172:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2512} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11173;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} out_vslice_dummy_var_213 := qxl_noop_get_vblank_counter(out_$p190, out_$i191);
    goto corral_source_split_11172;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.66, in_$p3);
    goto corral_source_split_11171;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    out_$p190 := $M.74;
    goto corral_source_split_11170;

  $bb171:
    assume out_$i189 == 1;
    goto corral_source_split_11169;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_11154;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    out_$i188 := $M.81;
    goto corral_source_split_11153;

  $bb163:
    assume out_$i182 == 1;
    goto corral_source_split_11152;

  $bb162:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i156, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb175:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2514} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11180;

  SeqInstr_819:
    goto corral_source_split_11179;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} out_vslice_dummy_var_214 := qxl_mode_dumb_mmap(out_$p195, out_$p196, out_$i197, in_$p22);
    goto SeqInstr_818;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i32($M.66, in_$p6);
    goto corral_source_split_11178;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    out_$p196 := $M.74;
    goto corral_source_split_11177;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    out_$p195 := $M.72;
    goto corral_source_split_11176;

  $bb174:
    assume out_$i194 == 1;
    goto corral_source_split_11175;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 1);
    goto corral_source_split_11158;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    out_$i193 := $M.81;
    goto corral_source_split_11157;

  $bb164:
    assume !(out_$i182 == 1);
    goto corral_source_split_11156;

  $bb178:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2516} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11185;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} out_vslice_dummy_var_215 := drm_gem_prime_import(out_$p201, in_$p37);
    goto corral_source_split_11184;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    out_$p201 := $M.74;
    goto corral_source_split_11183;

  $bb177:
    assume out_$i200 == 1;
    goto corral_source_split_11182;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 1);
    goto corral_source_split_11142;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    out_$i199 := $M.81;
    goto corral_source_split_11141;

  $bb157:
    assume out_$i179 == 1;
    goto corral_source_split_11140;

  $bb156:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    out_$i179 := $slt.i32(out_$i156, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb181:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2518} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11191;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} out_vslice_dummy_var_216 := qxl_gem_object_open(out_$p205, out_$p206);
    goto corral_source_split_11190;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    out_$p206 := $M.72;
    goto corral_source_split_11189;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    out_$p205 := $M.73;
    goto corral_source_split_11188;

  $bb180:
    assume out_$i204 == 1;
    goto corral_source_split_11187;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 1);
    goto corral_source_split_11146;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    out_$i203 := $M.81;
    goto corral_source_split_11145;

  $bb159:
    assume out_$i180 == 1;
    goto corral_source_split_11144;

  $bb158:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i156, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb184:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2520} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11196;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} qxl_debugfs_takedown(out_$p210);
    goto corral_source_split_11195;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    out_$p210 := $M.71;
    goto corral_source_split_11194;

  $bb183:
    assume out_$i209 == 1;
    goto corral_source_split_11193;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_11150;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    out_$i208 := $M.81;
    goto corral_source_split_11149;

  $bb160:
    assume !(out_$i180 == 1);
    goto corral_source_split_11148;

  $bb187:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2522} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11201;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} out_vslice_dummy_var_217 := qxl_gem_prime_pin(out_$p213);
    goto corral_source_split_11200;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    out_$p213 := $M.73;
    goto corral_source_split_11199;

  $bb186:
    assume out_$i212 == 1;
    goto corral_source_split_11198;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 1);
    goto corral_source_split_11130;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    out_$i211 := $M.81;
    goto corral_source_split_11129;

  $bb151:
    assume out_$i176 == 1;
    goto corral_source_split_11128;

  $bb143:
    assume out_$i172 == 1;
    assume {:verifier.code 0} true;
    out_$i176 := $slt.i32(out_$i156, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb142:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    out_$i172 := $slt.i32(out_$i156, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb190:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2524} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11206;

  SeqInstr_822:
    goto corral_source_split_11205;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} qxl_gem_object_free(out_$p217);
    goto SeqInstr_821;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    out_$p217 := $M.73;
    goto corral_source_split_11204;

  $bb189:
    assume out_$i216 == 1;
    goto corral_source_split_11203;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 1);
    goto corral_source_split_11134;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    out_$i215 := $M.81;
    goto corral_source_split_11133;

  $bb153:
    assume out_$i177 == 1;
    goto corral_source_split_11132;

  $bb152:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    out_$i177 := $slt.i32(out_$i156, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb193:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2526} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11211;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} qxl_gem_prime_unpin(out_$p220);
    goto corral_source_split_11210;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    out_$p220 := $M.73;
    goto corral_source_split_11209;

  $bb192:
    assume out_$i219 == 1;
    goto corral_source_split_11208;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_11138;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    out_$i218 := $M.81;
    goto corral_source_split_11137;

  $bb154:
    assume !(out_$i177 == 1);
    goto corral_source_split_11136;

  $bb196:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2528} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11216;

  SeqInstr_825:
    goto corral_source_split_11215;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} out_vslice_dummy_var_218 := qxl_driver_unload(out_$p223);
    goto SeqInstr_824;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    out_$p223 := $M.74;
    goto corral_source_split_11214;

  $bb195:
    assume out_$i222 == 1;
    goto corral_source_split_11213;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_11122;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    out_$i221 := $M.81;
    goto corral_source_split_11121;

  $bb149:
    assume out_$i175 == 1;
    goto corral_source_split_11120;

  $bb145:
    assume out_$i173 == 1;
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i156, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb144:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i156, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb199:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2530} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11224;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} out_vslice_dummy_var_219 := drm_gem_prime_handle_to_fd(out_$p227, out_$p228, out_$i229, out_$i230, in_$p31);
    goto corral_source_split_11223;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.66, in_$p9);
    goto corral_source_split_11222;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    out_$i229 := $load.i32($M.66, in_$p5);
    goto corral_source_split_11221;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    out_$p228 := $M.72;
    goto corral_source_split_11220;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    out_$p227 := $M.74;
    goto corral_source_split_11219;

  $bb198:
    assume out_$i226 == 1;
    goto corral_source_split_11218;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 1);
    goto corral_source_split_11126;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    out_$i225 := $M.81;
    goto corral_source_split_11125;

  $bb150:
    assume !(out_$i175 == 1);
    goto corral_source_split_11124;

  $bb202:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2532} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11230;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} qxl_gem_object_close(out_$p234, out_$p235);
    goto corral_source_split_11229;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    out_$p235 := $M.72;
    goto corral_source_split_11228;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    out_$p234 := $M.73;
    goto corral_source_split_11227;

  $bb201:
    assume out_$i233 == 1;
    goto corral_source_split_11226;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 1);
    goto corral_source_split_11114;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    out_$i232 := $M.81;
    goto corral_source_split_11113;

  $bb147:
    assume out_$i174 == 1;
    goto corral_source_split_11112;

  $bb146:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    out_$i174 := $slt.i32(out_$i156, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb205:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2534} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11236;

  SeqInstr_828:
    goto corral_source_split_11235;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} out_vslice_dummy_var_220 := qxl_driver_load(out_$p238, out_$i239);
    goto SeqInstr_827;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i64($M.66, in_$p13);
    goto corral_source_split_11234;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    out_$p238 := $M.74;
    goto corral_source_split_11233;

  $bb204:
    assume out_$i237 == 1;
    goto corral_source_split_11232;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 1);
    goto corral_source_split_11118;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    out_$i236 := $M.81;
    goto corral_source_split_11117;

  $bb148:
    assume !(out_$i174 == 1);
    goto corral_source_split_11116;

  $bb208:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2536} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11241;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} out_vslice_dummy_var_221 := qxl_gem_prime_get_sg_table(out_$p243);
    goto corral_source_split_11240;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    out_$p243 := $M.73;
    goto corral_source_split_11239;

  $bb207:
    assume out_$i242 == 1;
    goto corral_source_split_11238;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 1);
    goto corral_source_split_11102;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    out_$i241 := $M.81;
    goto corral_source_split_11101;

  $bb137:
    assume out_$i169 == 1;
    goto corral_source_split_11100;

  $bb131:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$i169 := $slt.i32(out_$i156, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb114:
    assume out_$i158 == 1;
    assume {:verifier.code 0} true;
    out_$i166 := $slt.i32(out_$i156, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb113:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i156, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb211:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2538} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11248;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} out_vslice_dummy_var_222 := drm_gem_dumb_destroy(out_$p247, out_$p248, out_$i249);
    goto corral_source_split_11247;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    out_$i249 := $load.i32($M.66, in_$p11);
    goto corral_source_split_11246;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    out_$p248 := $M.74;
    goto corral_source_split_11245;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    out_$p247 := $M.72;
    goto corral_source_split_11244;

  $bb210:
    assume out_$i246 == 1;
    goto corral_source_split_11243;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 1);
    goto corral_source_split_11106;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    out_$i245 := $M.81;
    goto corral_source_split_11105;

  $bb139:
    assume out_$i170 == 1;
    goto corral_source_split_11104;

  $bb138:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$i170 := $slt.i32(out_$i156, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb214:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2540} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11253;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} out_vslice_dummy_var_223 := qxl_gem_prime_mmap(out_$p253, in_$p24);
    goto corral_source_split_11252;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    out_$p253 := $M.73;
    goto corral_source_split_11251;

  $bb213:
    assume out_$i252 == 1;
    goto corral_source_split_11250;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 1);
    goto corral_source_split_11110;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    out_$i251 := $M.81;
    goto corral_source_split_11109;

  $bb140:
    assume !(out_$i170 == 1);
    goto corral_source_split_11108;

  $bb217:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2542} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11258;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} qxl_gem_prime_vunmap(out_$p257, in_$p25);
    goto corral_source_split_11257;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    out_$p257 := $M.73;
    goto corral_source_split_11256;

  $bb216:
    assume out_$i256 == 1;
    goto corral_source_split_11255;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 1);
    goto corral_source_split_11090;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    out_$i255 := $M.81;
    goto corral_source_split_11089;

  $bb133:
    assume out_$i167 == 1;
    goto corral_source_split_11088;

  $bb132:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i156, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb220:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2544} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11265;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} out_vslice_dummy_var_224 := drm_gem_prime_fd_to_handle(out_$p260, out_$p261, out_$i262, in_$p33);
    goto corral_source_split_11264;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i32($M.66, in_$p10);
    goto corral_source_split_11263;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    out_$p261 := $M.72;
    goto corral_source_split_11262;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    out_$p260 := $M.74;
    goto corral_source_split_11261;

  $bb219:
    assume out_$i259 == 1;
    goto corral_source_split_11260;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 1);
    goto corral_source_split_11094;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    out_$i258 := $M.81;
    goto corral_source_split_11093;

  $bb135:
    assume out_$i168 == 1;
    goto corral_source_split_11092;

  $bb134:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    out_$i168 := $slt.i32(out_$i156, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb223:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2546} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11270;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} out_vslice_dummy_var_225 := drm_pci_set_busid(out_$p266, in_$p40);
    goto corral_source_split_11269;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    out_$p266 := $M.74;
    goto corral_source_split_11268;

  $bb222:
    assume out_$i265 == 1;
    goto corral_source_split_11267;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 1);
    goto corral_source_split_11098;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    out_$i264 := $M.81;
    goto corral_source_split_11097;

  $bb136:
    assume !(out_$i168 == 1);
    goto corral_source_split_11096;

  $bb226:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2548} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11277;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} out_vslice_dummy_var_226 := drm_gem_prime_export(out_$p270, out_$p271, out_$i272);
    goto corral_source_split_11276;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    out_$i272 := $load.i32($M.66, in_$p8);
    goto corral_source_split_11275;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    out_$p271 := $M.73;
    goto corral_source_split_11274;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    out_$p270 := $M.74;
    goto corral_source_split_11273;

  $bb225:
    assume out_$i269 == 1;
    goto corral_source_split_11272;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 1);
    goto corral_source_split_11078;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    out_$i268 := $M.81;
    goto corral_source_split_11077;

  $bb127:
    assume out_$i164 == 1;
    goto corral_source_split_11076;

  $bb116:
    assume out_$i159 == 1;
    assume {:verifier.code 0} true;
    out_$i164 := $slt.i32(out_$i156, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb115:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    out_$i159 := $slt.i32(out_$i156, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb229:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2550} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11282;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} out_vslice_dummy_var_227 := qxl_gem_prime_vmap(out_$p276);
    goto corral_source_split_11281;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    out_$p276 := $M.73;
    goto corral_source_split_11280;

  $bb228:
    assume out_$i275 == 1;
    goto corral_source_split_11279;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 1);
    goto corral_source_split_11082;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    out_$i274 := $M.81;
    goto corral_source_split_11081;

  $bb129:
    assume out_$i165 == 1;
    goto corral_source_split_11080;

  $bb128:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    out_$i165 := $slt.i32(out_$i156, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb232:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2552} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11288;

  SeqInstr_831:
    goto corral_source_split_11287;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} out_vslice_dummy_var_228 := qxl_mode_dumb_create(out_$p280, out_$p281, in_$p35);
    goto SeqInstr_830;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    out_$p281 := $M.74;
    goto corral_source_split_11286;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    out_$p280 := $M.72;
    goto corral_source_split_11285;

  $bb231:
    assume out_$i279 == 1;
    goto corral_source_split_11284;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 1);
    goto corral_source_split_11086;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    out_$i278 := $M.81;
    goto corral_source_split_11085;

  $bb130:
    assume !(out_$i165 == 1);
    goto corral_source_split_11084;

  $bb235:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2554} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11293;

  SeqInstr_834:
    goto corral_source_split_11292;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} out_vslice_dummy_var_229 := qxl_irq_handler(out_$i285, in_$p38);
    goto SeqInstr_833;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.66, in_$p7);
    goto corral_source_split_11291;

  $bb234:
    assume out_$i284 == 1;
    goto corral_source_split_11290;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_11070;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    out_$i283 := $M.81;
    goto corral_source_split_11069;

  $bb125:
    assume out_$i163 == 1;
    goto corral_source_split_11068;

  $bb118:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i163 := $slt.i32(out_$i156, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb117:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    out_$i160 := $slt.i32(out_$i156, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb238:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2556} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11299;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} out_vslice_dummy_var_230 := qxl_noop_enable_vblank(out_$p289, out_$i290);
    goto corral_source_split_11298;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i32($M.66, in_$p4);
    goto corral_source_split_11297;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    out_$p289 := $M.74;
    goto corral_source_split_11296;

  $bb237:
    assume out_$i288 == 1;
    goto corral_source_split_11295;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 1);
    goto corral_source_split_11074;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    out_$i287 := $M.81;
    goto corral_source_split_11073;

  $bb126:
    assume !(out_$i163 == 1);
    goto corral_source_split_11072;

  $bb241:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2558} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} out_vslice_dummy_var_231 := qxl_debugfs_init(out_$p294);
    goto corral_source_split_11303;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    out_$p294 := $M.71;
    goto corral_source_split_11302;

  $bb240:
    assume out_$i293 == 1;
    goto corral_source_split_11301;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 1);
    goto corral_source_split_11062;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    out_$i292 := $M.81;
    goto corral_source_split_11061;

  $bb120:
    assume out_$i161 == 1;
    goto corral_source_split_11060;

  $bb119:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i156, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb244:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2560} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11310;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} qxl_noop_disable_vblank(out_$p298, out_$i299);
    goto corral_source_split_11309;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    out_$i299 := $load.i32($M.66, in_$p12);
    goto corral_source_split_11308;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    out_$p298 := $M.74;
    goto corral_source_split_11307;

  $bb243:
    assume out_$i297 == 1;
    goto corral_source_split_11306;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_11066;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    out_$i296 := $M.81;
    goto corral_source_split_11065;

  $bb122:
    assume out_$i162 == 1;
    goto corral_source_split_11064;

  $bb121:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i156, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} ldv_stop();
    goto corral_source_split_11312;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb123:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb124;

  $bb166:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb124;

  $bb250:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb260:
    assume {:verifier.code 0} true;
    assume !(out_$i307 == 1);
    goto $bb261;

  $bb263:
    assume {:verifier.code 0} true;
    assume !(out_$i309 == 1);
    goto $bb261;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 0);
    goto corral_source_split_11326;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    out_$i308 := $M.82;
    goto corral_source_split_11325;

  $bb259:
    assume out_$i307 == 1;
    goto corral_source_split_11324;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 3);
    goto corral_source_split_11322;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    out_$i306 := $M.83;
    goto corral_source_split_11321;

  $bb257:
    assume out_$i305 == 1;
    goto corral_source_split_11320;

  $bb252:
    assume out_$i303 == 1;
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i302, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i303 := $slt.i32(out_$i302, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_11314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2562} out_$i302 := __VERIFIER_nondet_int();
    call {:si_unique_call 2563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i302);
    call {:si_unique_call 2564} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i302);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume out_$i301 == 1;
    goto corral_source_split_11314;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    out_$i301 := $ne.i32(out_$i300, 0);
    goto corral_source_split_10939;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    out_$i300 := $M.83;
    goto corral_source_split_10938;

  $bb39:
    assume !(out_$i89 == 1);
    goto corral_source_split_10937;

  $bb268:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb273:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    out_$i316 := $ne.i32(out_$i315, 0);
    goto corral_source_split_11376;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i315 := $M.99;
    goto corral_source_split_11375;

  $bb270:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2602} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_11373;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} ldv_file_operations_21();
    goto corral_source_split_11372;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2600} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_11371;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2599} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11370;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_initialize_drm_crtc_funcs_17();
    goto corral_source_split_11369;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2597} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_11368;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_initialize_drm_driver_18();
    goto corral_source_split_11367;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2595} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_11366;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} ldv_initialize_drm_framebuffer_funcs_16();
    goto corral_source_split_11365;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2593} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_11364;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} ldv_initialize_drm_connector_helper_funcs_13();
    goto corral_source_split_11363;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2591} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_11362;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} ldv_initialize_fb_ops_6();
    goto corral_source_split_11361;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2589} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11360;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} ldv_initialize_ttm_backend_func_9();
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2587} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_11358;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} ldv_initialize_drm_connector_funcs_12();
    goto corral_source_split_11357;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2585} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_11356;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} ldv_dev_pm_ops_20();
    goto corral_source_split_11355;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2583} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11354;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} ldv_initialize_drm_encoder_helper_funcs_14();
    goto corral_source_split_11353;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2581} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_11352;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} ldv_initialize_drm_crtc_helper_funcs_15();
    goto corral_source_split_11351;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 2579} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_11350;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} ldv_initialize_ttm_bo_driver_8();
    goto corral_source_split_11349;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 2577} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11348;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} ldv_initialize_fence_ops_4();
    goto corral_source_split_11347;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2575} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11346;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2574} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_11345;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} ldv_pci_driver_19();
    goto corral_source_split_11344;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2572} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11343;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11342;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $M.83 := 3;
    call {:si_unique_call 2570} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_11341;

  $bb269:
    assume out_$i314 == 1;
    goto corral_source_split_11340;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 0);
    goto corral_source_split_11338;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    out_$i313 := $M.99;
    goto corral_source_split_11337;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.99 := out_$i312;
    call {:si_unique_call 2569} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i312);
    goto corral_source_split_11336;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} out_$i312 := qxl_init();
    goto corral_source_split_11335;

  $bb267:
    assume out_$i311 == 1;
    goto corral_source_split_11334;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 1);
    goto corral_source_split_11318;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    out_$i310 := $M.83;
    goto corral_source_split_11317;

  $bb254:
    assume out_$i304 == 1;
    goto corral_source_split_11316;

  $bb253:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i302, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} ldv_stop();
    goto corral_source_split_11381;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb255:
    assume {:verifier.code 0} true;
    assume !(out_$i304 == 1);
    goto $bb256;

  $bb258:
    assume {:verifier.code 0} true;
    assume !(out_$i305 == 1);
    goto $bb256;

  $bb280:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    goto $bb281;

  SeqInstr_837:
    goto corral_source_split_11384;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} ldv_main_exported_16();
    goto SeqInstr_836;

  $bb279:
    assume out_$i318 == 1;
    goto corral_source_split_11383;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    out_$i318 := $ne.i32(out_$i317, 0);
    goto corral_source_split_10921;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    out_$i317 := $M.84;
    goto corral_source_split_10920;

  $bb32:
    assume out_$i86 == 1;
    goto corral_source_split_10919;

  $bb31:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i71, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb283:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} ldv_main_exported_13();
    goto corral_source_split_11387;

  $bb282:
    assume out_$i320 == 1;
    goto corral_source_split_11386;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    out_$i320 := $ne.i32(out_$i319, 0);
    goto corral_source_split_10925;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    out_$i319 := $M.85;
    goto corral_source_split_10924;

  $bb34:
    assume out_$i87 == 1;
    goto corral_source_split_10923;

  $bb33:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i71, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb286:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} ldv_main_exported_6();
    goto corral_source_split_11390;

  $bb285:
    assume out_$i322 == 1;
    goto corral_source_split_11389;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i32(out_$i321, 0);
    goto corral_source_split_10929;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    out_$i321 := $M.86;
    goto corral_source_split_10928;

  $bb35:
    assume !(out_$i87 == 1);
    goto corral_source_split_10927;

  $bb26:
    assume out_$i83 == 1;
    goto corral_source_split_10913;

  $bb20:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i71, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb5:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i71, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb4:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i71, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb289:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} ldv_main_exported_9();
    goto corral_source_split_11393;

  $bb288:
    assume out_$i324 == 1;
    goto corral_source_split_11392;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    out_$i324 := $ne.i32(out_$i323, 0);
    goto corral_source_split_10917;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    out_$i323 := $M.88;
    goto corral_source_split_10916;

  $bb27:
    assume !(out_$i83 == 1);
    goto corral_source_split_10915;

  $bb292:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} ldv_main_exported_12();
    goto corral_source_split_11396;

  $bb291:
    assume out_$i326 == 1;
    goto corral_source_split_11395;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    out_$i326 := $ne.i32(out_$i325, 0);
    goto corral_source_split_10903;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    out_$i325 := $M.89;
    goto corral_source_split_10902;

  $bb22:
    assume out_$i81 == 1;
    goto corral_source_split_10901;

  $bb21:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i71, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb295:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb341:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb343:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $M.90 := 15;
    call {:si_unique_call 2615} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(15);
    goto corral_source_split_11488;

  $bb342:
    assume out_$i356 == 1;
    goto corral_source_split_11487;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 0);
    goto corral_source_split_11485;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    out_$i355 := $M.100;
    goto corral_source_split_11484;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $M.100 := out_$i354;
    call {:si_unique_call 2614} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i354);
    goto corral_source_split_11483;

  SeqInstr_840:
    goto corral_source_split_11482;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} out_$i354 := qxl_pm_restore(out_$p353);
    goto SeqInstr_839;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    out_$p353 := $M.68;
    goto corral_source_split_11481;

  $bb340:
    assume out_$i352 == 1;
    goto corral_source_split_11480;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 12);
    goto corral_source_split_11478;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    out_$i351 := $M.90;
    goto corral_source_split_11477;

  $bb338:
    assume out_$i350 == 1;
    goto corral_source_split_11476;

  $bb336:
    assume out_$i349 == 1;
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i329, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb330:
    assume out_$i346 == 1;
    assume {:verifier.code 0} true;
    out_$i349 := $slt.i32(out_$i329, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb320:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$i346 := $slt.i32(out_$i329, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb297:
    assume out_$i330 == 1;
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(out_$i329, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb296:
    assume {:verifier.code 0} true;
    out_$i330 := $slt.i32(out_$i329, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_11398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2610} out_$i329 := __VERIFIER_nondet_int();
    call {:si_unique_call 2611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i329);
    call {:si_unique_call 2612} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i329);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb294:
    assume out_$i328 == 1;
    goto corral_source_split_11398;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    out_$i328 := $ne.i32(out_$i327, 0);
    goto corral_source_split_10907;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    out_$i327 := $M.90;
    goto corral_source_split_10906;

  $bb24:
    assume out_$i82 == 1;
    goto corral_source_split_10905;

  $bb23:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i71, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb348:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb350:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $M.90 := 15;
    call {:si_unique_call 2618} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(15);
    goto corral_source_split_11498;

  $bb349:
    assume out_$i362 == 1;
    goto corral_source_split_11497;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 0);
    goto corral_source_split_11495;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    out_$i361 := $M.101;
    goto corral_source_split_11494;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $M.101 := out_$i360;
    call {:si_unique_call 2617} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i360);
    goto corral_source_split_11493;

  SeqInstr_843:
    goto corral_source_split_11492;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} out_$i360 := qxl_pm_thaw(out_$p359);
    goto SeqInstr_842;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    out_$p359 := $M.68;
    goto corral_source_split_11491;

  $bb347:
    assume out_$i358 == 1;
    goto corral_source_split_11490;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 13);
    goto corral_source_split_11474;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    out_$i357 := $M.90;
    goto corral_source_split_11473;

  $bb337:
    assume !(out_$i349 == 1);
    goto corral_source_split_11472;

  $bb354:
    assume !(out_$i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb356:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $M.90 := 3;
    call {:si_unique_call 2621} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(3);
    goto corral_source_split_11508;

  $bb355:
    assume out_$i368 == 1;
    goto corral_source_split_11507;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 0);
    goto corral_source_split_11505;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    out_$i367 := $M.102;
    goto corral_source_split_11504;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $M.102 := out_$i366;
    call {:si_unique_call 2620} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i366);
    goto corral_source_split_11503;

  SeqInstr_846:
    goto corral_source_split_11502;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} out_$i366 := qxl_pm_freeze(out_$p365);
    goto SeqInstr_845;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    out_$p365 := $M.68;
    goto corral_source_split_11501;

  $bb353:
    assume out_$i364 == 1;
    goto corral_source_split_11500;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    out_$i364 := $eq.i32(out_$i363, 2);
    goto corral_source_split_11462;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    out_$i363 := $M.90;
    goto corral_source_split_11461;

  $bb332:
    assume out_$i347 == 1;
    goto corral_source_split_11460;

  $bb331:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    out_$i347 := $slt.i32(out_$i329, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb360:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb362:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $M.90 := 4;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(4);
    goto corral_source_split_11518;

  $bb361:
    assume out_$i374 == 1;
    goto corral_source_split_11517;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 0);
    goto corral_source_split_11515;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    out_$i373 := $M.103;
    goto corral_source_split_11514;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $M.103 := out_$i372;
    call {:si_unique_call 2623} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i372);
    goto corral_source_split_11513;

  SeqInstr_849:
    goto corral_source_split_11512;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} out_$i372 := qxl_pm_freeze(out_$p371);
    goto SeqInstr_848;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    out_$p371 := $M.68;
    goto corral_source_split_11511;

  $bb359:
    assume out_$i370 == 1;
    goto corral_source_split_11510;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 2);
    goto corral_source_split_11466;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    out_$i369 := $M.90;
    goto corral_source_split_11465;

  $bb334:
    assume out_$i348 == 1;
    goto corral_source_split_11464;

  $bb333:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    out_$i348 := $slt.i32(out_$i329, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb366:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb368:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $M.90 := 5;
    call {:si_unique_call 2627} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(5);
    goto corral_source_split_11528;

  $bb367:
    assume out_$i380 == 1;
    goto corral_source_split_11527;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 0);
    goto corral_source_split_11525;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    out_$i379 := $M.104;
    goto corral_source_split_11524;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $M.104 := out_$i378;
    call {:si_unique_call 2626} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i378);
    goto corral_source_split_11523;

  SeqInstr_852:
    goto corral_source_split_11522;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} out_$i378 := qxl_pm_suspend(out_$p377);
    goto SeqInstr_851;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    out_$p377 := $M.68;
    goto corral_source_split_11521;

  $bb365:
    assume out_$i376 == 1;
    goto corral_source_split_11520;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 2);
    goto corral_source_split_11470;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    out_$i375 := $M.90;
    goto corral_source_split_11469;

  $bb335:
    assume !(out_$i348 == 1);
    goto corral_source_split_11468;

  $bb372:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb374:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $M.90 := 15;
    call {:si_unique_call 2630} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(15);
    goto corral_source_split_11538;

  $bb373:
    assume out_$i386 == 1;
    goto corral_source_split_11537;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 0);
    goto corral_source_split_11535;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    out_$i385 := $M.105;
    goto corral_source_split_11534;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $M.105 := out_$i384;
    call {:si_unique_call 2629} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i384);
    goto corral_source_split_11533;

  SeqInstr_855:
    goto corral_source_split_11532;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} out_$i384 := qxl_pm_resume(out_$p383);
    goto SeqInstr_854;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    out_$p383 := $M.68;
    goto corral_source_split_11531;

  $bb371:
    assume out_$i382 == 1;
    goto corral_source_split_11530;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 14);
    goto corral_source_split_11454;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    out_$i381 := $M.90;
    goto corral_source_split_11453;

  $bb328:
    assume out_$i345 == 1;
    goto corral_source_split_11452;

  $bb322:
    assume out_$i342 == 1;
    assume {:verifier.code 0} true;
    out_$i345 := $slt.i32(out_$i329, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb321:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    out_$i342 := $slt.i32(out_$i329, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb378:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb380:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $M.90 := 10;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(10);
    goto corral_source_split_11547;

  $bb379:
    assume out_$i391 == 1;
    goto corral_source_split_11546;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    out_$i391 := $eq.i32(out_$i390, 0);
    goto corral_source_split_11544;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    out_$i390 := $M.106;
    goto corral_source_split_11543;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $M.106 := out_$i389;
    call {:si_unique_call 2632} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i389);
    goto corral_source_split_11542;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} out_$i389 := ldv_suspend_late_20();
    goto corral_source_split_11541;

  $bb377:
    assume out_$i388 == 1;
    goto corral_source_split_11540;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 5);
    goto corral_source_split_11458;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    out_$i387 := $M.90;
    goto corral_source_split_11457;

  $bb329:
    assume !(out_$i345 == 1);
    goto corral_source_split_11456;

  $bb384:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb386:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $M.90 := 12;
    call {:si_unique_call 2636} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(12);
    goto corral_source_split_11556;

  $bb385:
    assume out_$i396 == 1;
    goto corral_source_split_11555;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 0);
    goto corral_source_split_11553;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    out_$i395 := $M.107;
    goto corral_source_split_11552;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $M.107 := out_$i394;
    call {:si_unique_call 2635} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i394);
    goto corral_source_split_11551;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} out_$i394 := ldv_restore_early_20();
    goto corral_source_split_11550;

  $bb383:
    assume out_$i393 == 1;
    goto corral_source_split_11549;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 7);
    goto corral_source_split_11442;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    out_$i392 := $M.90;
    goto corral_source_split_11441;

  $bb324:
    assume out_$i343 == 1;
    goto corral_source_split_11440;

  $bb323:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    out_$i343 := $slt.i32(out_$i329, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb390:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb392:
    assume !(out_$i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $M.90 := 14;
    call {:si_unique_call 2639} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(14);
    goto corral_source_split_11565;

  $bb391:
    assume out_$i401 == 1;
    goto corral_source_split_11564;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i400, 0);
    goto corral_source_split_11562;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    out_$i400 := $M.108;
    goto corral_source_split_11561;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $M.108 := out_$i399;
    call {:si_unique_call 2638} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i399);
    goto corral_source_split_11560;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} out_$i399 := ldv_resume_early_20();
    goto corral_source_split_11559;

  $bb389:
    assume out_$i398 == 1;
    goto corral_source_split_11558;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 10);
    goto corral_source_split_11446;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    out_$i397 := $M.90;
    goto corral_source_split_11445;

  $bb326:
    assume out_$i344 == 1;
    goto corral_source_split_11444;

  $bb325:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    out_$i344 := $slt.i32(out_$i329, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb396:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb398:
    assume !(out_$i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $M.90 := 13;
    call {:si_unique_call 2642} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(13);
    goto corral_source_split_11574;

  $bb397:
    assume out_$i406 == 1;
    goto corral_source_split_11573;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    out_$i406 := $eq.i32(out_$i405, 0);
    goto corral_source_split_11571;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    out_$i405 := $M.109;
    goto corral_source_split_11570;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $M.109 := out_$i404;
    call {:si_unique_call 2641} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i404);
    goto corral_source_split_11569;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} out_$i404 := ldv_thaw_early_20();
    goto corral_source_split_11568;

  $bb395:
    assume out_$i403 == 1;
    goto corral_source_split_11567;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    out_$i403 := $eq.i32(out_$i402, 9);
    goto corral_source_split_11450;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    out_$i402 := $M.90;
    goto corral_source_split_11449;

  $bb327:
    assume !(out_$i344 == 1);
    goto corral_source_split_11448;

  $bb402:
    assume !(out_$i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb404:
    assume !(out_$i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $M.90 := 14;
    call {:si_unique_call 2645} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(14);
    goto corral_source_split_11583;

  $bb403:
    assume out_$i411 == 1;
    goto corral_source_split_11582;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    out_$i411 := $eq.i32(out_$i410, 0);
    goto corral_source_split_11580;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    out_$i410 := $M.110;
    goto corral_source_split_11579;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $M.110 := out_$i409;
    call {:si_unique_call 2644} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i409);
    goto corral_source_split_11578;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} out_$i409 := ldv_resume_noirq_20();
    goto corral_source_split_11577;

  $bb401:
    assume out_$i408 == 1;
    goto corral_source_split_11576;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    out_$i408 := $eq.i32(out_$i407, 11);
    goto corral_source_split_11434;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    out_$i407 := $M.90;
    goto corral_source_split_11433;

  $bb318:
    assume out_$i340 == 1;
    goto corral_source_split_11432;

  $bb312:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    out_$i340 := $slt.i32(out_$i329, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb299:
    assume out_$i331 == 1;
    assume {:verifier.code 0} true;
    out_$i337 := $slt.i32(out_$i329, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb298:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    out_$i331 := $slt.i32(out_$i329, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb408:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb410:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $M.90 := 8;
    call {:si_unique_call 2648} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(8);
    goto corral_source_split_11592;

  $bb409:
    assume out_$i416 == 1;
    goto corral_source_split_11591;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    out_$i416 := $eq.i32(out_$i415, 0);
    goto corral_source_split_11589;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    out_$i415 := $M.111;
    goto corral_source_split_11588;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $M.111 := out_$i414;
    call {:si_unique_call 2647} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i414);
    goto corral_source_split_11587;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} out_$i414 := ldv_freeze_noirq_20();
    goto corral_source_split_11586;

  $bb407:
    assume out_$i413 == 1;
    goto corral_source_split_11585;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i412, 4);
    goto corral_source_split_11438;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    out_$i412 := $M.90;
    goto corral_source_split_11437;

  $bb319:
    assume !(out_$i340 == 1);
    goto corral_source_split_11436;

  $bb414:
    assume !(out_$i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb416:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $M.82 := out_$i423;
    call {:si_unique_call 2652} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i423);
    goto corral_source_split_11604;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    out_$i423 := $add.i32(out_$i422, 1);
    goto corral_source_split_11603;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    out_$i422 := $M.82;
    goto corral_source_split_11602;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 2651} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(2);
    goto corral_source_split_11601;

  $bb415:
    assume out_$i421 == 1;
    goto corral_source_split_11600;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    out_$i421 := $eq.i32(out_$i420, 0);
    goto corral_source_split_11598;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    out_$i420 := $M.112;
    goto corral_source_split_11597;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $M.112 := out_$i419;
    call {:si_unique_call 2650} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i419);
    goto corral_source_split_11596;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} out_$i419 := ldv_prepare_20();
    goto corral_source_split_11595;

  $bb413:
    assume out_$i418 == 1;
    goto corral_source_split_11594;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    out_$i418 := $eq.i32(out_$i417, 1);
    goto corral_source_split_11422;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    out_$i417 := $M.90;
    goto corral_source_split_11421;

  $bb314:
    assume out_$i338 == 1;
    goto corral_source_split_11420;

  $bb313:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    out_$i338 := $slt.i32(out_$i329, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb420:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb422:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $M.90 := 9;
    call {:si_unique_call 2655} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(9);
    goto corral_source_split_11613;

  $bb421:
    assume out_$i428 == 1;
    goto corral_source_split_11612;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i427, 0);
    goto corral_source_split_11610;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    out_$i427 := $M.113;
    goto corral_source_split_11609;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $M.113 := out_$i426;
    call {:si_unique_call 2654} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i426);
    goto corral_source_split_11608;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} out_$i426 := ldv_freeze_late_20();
    goto corral_source_split_11607;

  $bb419:
    assume out_$i425 == 1;
    goto corral_source_split_11606;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    out_$i425 := $eq.i32(out_$i424, 4);
    goto corral_source_split_11426;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    out_$i424 := $M.90;
    goto corral_source_split_11425;

  $bb316:
    assume out_$i339 == 1;
    goto corral_source_split_11424;

  $bb315:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    out_$i339 := $slt.i32(out_$i329, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb426:
    assume !(out_$i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb428:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $M.90 := 13;
    call {:si_unique_call 2658} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(13);
    goto corral_source_split_11622;

  $bb427:
    assume out_$i433 == 1;
    goto corral_source_split_11621;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    out_$i433 := $eq.i32(out_$i432, 0);
    goto corral_source_split_11619;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    out_$i432 := $M.114;
    goto corral_source_split_11618;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $M.114 := out_$i431;
    call {:si_unique_call 2657} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i431);
    goto corral_source_split_11617;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} out_$i431 := ldv_thaw_noirq_20();
    goto corral_source_split_11616;

  $bb425:
    assume out_$i430 == 1;
    goto corral_source_split_11615;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    out_$i430 := $eq.i32(out_$i429, 8);
    goto corral_source_split_11430;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    out_$i429 := $M.90;
    goto corral_source_split_11429;

  $bb317:
    assume !(out_$i339 == 1);
    goto corral_source_split_11428;

  $bb432:
    assume !(out_$i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb434:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $M.90 := 6;
    call {:si_unique_call 2661} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(6);
    goto corral_source_split_11631;

  $bb433:
    assume out_$i438 == 1;
    goto corral_source_split_11630;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 0);
    goto corral_source_split_11628;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    out_$i437 := $M.115;
    goto corral_source_split_11627;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $M.115 := out_$i436;
    call {:si_unique_call 2660} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_11626;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} out_$i436 := ldv_poweroff_noirq_20();
    goto corral_source_split_11625;

  $bb431:
    assume out_$i435 == 1;
    goto corral_source_split_11624;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    out_$i435 := $eq.i32(out_$i434, 3);
    goto corral_source_split_11414;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    out_$i434 := $M.90;
    goto corral_source_split_11413;

  $bb310:
    assume out_$i336 == 1;
    goto corral_source_split_11412;

  $bb301:
    assume out_$i332 == 1;
    assume {:verifier.code 0} true;
    out_$i336 := $slt.i32(out_$i329, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb300:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    out_$i332 := $slt.i32(out_$i329, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb438:
    assume !(out_$i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb440:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $M.90 := 7;
    call {:si_unique_call 2664} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(7);
    goto corral_source_split_11640;

  $bb439:
    assume out_$i443 == 1;
    goto corral_source_split_11639;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 0);
    goto corral_source_split_11637;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    out_$i442 := $M.116;
    goto corral_source_split_11636;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $M.116 := out_$i441;
    call {:si_unique_call 2663} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i441);
    goto corral_source_split_11635;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} out_$i441 := ldv_poweroff_late_20();
    goto corral_source_split_11634;

  $bb437:
    assume out_$i440 == 1;
    goto corral_source_split_11633;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    out_$i440 := $eq.i32(out_$i439, 3);
    goto corral_source_split_11418;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    out_$i439 := $M.90;
    goto corral_source_split_11417;

  $bb311:
    assume !(out_$i336 == 1);
    goto corral_source_split_11416;

  $bb444:
    assume !(out_$i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb446:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $M.90 := 12;
    call {:si_unique_call 2667} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(12);
    goto corral_source_split_11649;

  $bb445:
    assume out_$i448 == 1;
    goto corral_source_split_11648;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, 0);
    goto corral_source_split_11646;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    out_$i447 := $M.117;
    goto corral_source_split_11645;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $M.117 := out_$i446;
    call {:si_unique_call 2666} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i446);
    goto corral_source_split_11644;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} out_$i446 := ldv_restore_noirq_20();
    goto corral_source_split_11643;

  $bb443:
    assume out_$i445 == 1;
    goto corral_source_split_11642;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    out_$i445 := $eq.i32(out_$i444, 6);
    goto corral_source_split_11402;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    out_$i444 := $M.90;
    goto corral_source_split_11401;

  $bb303:
    assume out_$i333 == 1;
    goto corral_source_split_11400;

  $bb302:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    out_$i333 := $slt.i32(out_$i329, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb450:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb452:
    assume !(out_$i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $M.90 := 11;
    call {:si_unique_call 2670} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(11);
    goto corral_source_split_11658;

  $bb451:
    assume out_$i453 == 1;
    goto corral_source_split_11657;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    out_$i453 := $eq.i32(out_$i452, 0);
    goto corral_source_split_11655;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    out_$i452 := $M.118;
    goto corral_source_split_11654;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.118 := out_$i451;
    call {:si_unique_call 2669} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i451);
    goto corral_source_split_11653;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} out_$i451 := ldv_suspend_noirq_20();
    goto corral_source_split_11652;

  $bb449:
    assume out_$i450 == 1;
    goto corral_source_split_11651;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    out_$i450 := $eq.i32(out_$i449, 5);
    goto corral_source_split_11406;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    out_$i449 := $M.90;
    goto corral_source_split_11405;

  $bb305:
    assume out_$i334 == 1;
    goto corral_source_split_11404;

  $bb304:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    out_$i334 := $slt.i32(out_$i329, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb456:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $M.82 := out_$i458;
    call {:si_unique_call 2673} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i458);
    goto corral_source_split_11665;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    out_$i458 := $sub.i32(out_$i457, 1);
    goto corral_source_split_11664;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    out_$i457 := $M.82;
    goto corral_source_split_11663;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2672} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_11662;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} out_vslice_dummy_var_232 := ldv_complete_20();
    goto corral_source_split_11661;

  $bb455:
    assume out_$i455 == 1;
    goto corral_source_split_11660;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    out_$i455 := $eq.i32(out_$i454, 15);
    goto corral_source_split_11410;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    out_$i454 := $M.90;
    goto corral_source_split_11409;

  $bb307:
    assume out_$i335 == 1;
    goto corral_source_split_11408;

  $bb306:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i329, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} ldv_stop();
    goto corral_source_split_11667;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb308:
    assume {:verifier.code 0} true;
    assume !(out_$i335 == 1);
    goto $bb309;

  $bb339:
    assume {:verifier.code 0} true;
    assume !(out_$i350 == 1);
    goto $bb309;

  $bb462:
    assume !(out_$i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} ldv_main_exported_14();
    goto corral_source_split_11670;

  $bb461:
    assume out_$i460 == 1;
    goto corral_source_split_11669;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    out_$i460 := $ne.i32(out_$i459, 0);
    goto corral_source_split_10911;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    out_$i459 := $M.91;
    goto corral_source_split_10910;

  $bb25:
    assume !(out_$i82 == 1);
    goto corral_source_split_10909;

  $bb465:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} ldv_main_exported_15();
    goto corral_source_split_11673;

  $bb464:
    assume out_$i462 == 1;
    goto corral_source_split_11672;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    out_$i462 := $ne.i32(out_$i461, 0);
    goto corral_source_split_10891;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    out_$i461 := $M.92;
    goto corral_source_split_10890;

  $bb16:
    assume out_$i78 == 1;
    goto corral_source_split_10889;

  $bb7:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i71, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i71, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb468:
    assume !(out_$i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    goto $bb469;

  SeqInstr_858:
    goto corral_source_split_11676;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} ldv_main_exported_8();
    goto SeqInstr_857;

  $bb467:
    assume out_$i464 == 1;
    goto corral_source_split_11675;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    out_$i464 := $ne.i32(out_$i463, 0);
    goto corral_source_split_10895;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    out_$i463 := $M.93;
    goto corral_source_split_10894;

  $bb18:
    assume out_$i79 == 1;
    goto corral_source_split_10893;

  $bb17:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i71, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb471:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    goto $bb472;

  SeqInstr_861:
    goto corral_source_split_11679;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} ldv_main_exported_4();
    goto SeqInstr_860;

  $bb470:
    assume out_$i466 == 1;
    goto corral_source_split_11678;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    out_$i466 := $ne.i32(out_$i465, 0);
    goto corral_source_split_10899;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    out_$i465 := $M.94;
    goto corral_source_split_10898;

  $bb19:
    assume !(out_$i79 == 1);
    goto corral_source_split_10897;

  $bb474:
    assume !(out_$i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb486:
    assume !(out_$i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb488:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    goto $bb489;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $M.82 := out_$i481;
    call {:si_unique_call 2685} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i481);
    goto corral_source_split_11706;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    out_$i481 := $add.i32(out_$i480, 1);
    goto corral_source_split_11705;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    out_$i480 := $M.82;
    goto corral_source_split_11704;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2684} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11703;

  $bb487:
    assume out_$i479 == 1;
    goto corral_source_split_11702;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb487, $bb488;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    out_$i479 := $eq.i32(out_$i478, 0);
    goto corral_source_split_11700;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    out_$i478 := $M.119;
    goto corral_source_split_11699;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $M.119 := out_$i477;
    call {:si_unique_call 2683} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i477);
    goto corral_source_split_11698;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} out_$i477 := qxl_pci_probe(out_$p476, in_$p42);
    goto corral_source_split_11697;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    out_$p476 := $M.67;
    goto corral_source_split_11696;

  $bb485:
    assume out_$i475 == 1;
    goto corral_source_split_11695;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    out_$i475 := $eq.i32(out_$i474, 1);
    goto corral_source_split_11693;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    out_$i474 := $M.95;
    goto corral_source_split_11692;

  $bb483:
    assume out_$i473 == 1;
    goto corral_source_split_11691;

  $bb476:
    assume out_$i470 == 1;
    assume {:verifier.code 0} true;
    out_$i473 := $eq.i32(out_$i469, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb475:
    assume {:verifier.code 0} true;
    out_$i470 := $slt.i32(out_$i469, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  corral_source_split_11681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2679} out_$i469 := __VERIFIER_nondet_int();
    call {:si_unique_call 2680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i469);
    call {:si_unique_call 2681} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i469);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb473:
    assume out_$i468 == 1;
    goto corral_source_split_11681;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    out_$i468 := $ne.i32(out_$i467, 0);
    goto corral_source_split_10879;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    out_$i467 := $M.95;
    goto corral_source_split_10878;

  $bb9:
    assume out_$i75 == 1;
    goto corral_source_split_10877;

  $bb8:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i71, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb493:
    assume !(out_$i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2687} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_11711;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} qxl_pci_remove(out_$p484);
    goto corral_source_split_11710;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    out_$p484 := $M.67;
    goto corral_source_split_11709;

  $bb492:
    assume out_$i483 == 1;
    goto corral_source_split_11708;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    out_$i483 := $eq.i32(out_$i482, 2);
    goto corral_source_split_11685;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    out_$i482 := $M.95;
    goto corral_source_split_11684;

  $bb478:
    assume out_$i471 == 1;
    goto corral_source_split_11683;

  $bb477:
    assume !(out_$i470 == 1);
    assume {:verifier.code 0} true;
    out_$i471 := $slt.i32(out_$i469, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb496:
    assume !(out_$i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2689} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(2);
    goto corral_source_split_11715;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} out_vslice_dummy_var_233 := ldv_shutdown_19();
    goto corral_source_split_11714;

  $bb495:
    assume out_$i486 == 1;
    goto corral_source_split_11713;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    out_$i486 := $eq.i32(out_$i485, 2);
    goto corral_source_split_11689;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    out_$i485 := $M.95;
    goto corral_source_split_11688;

  $bb480:
    assume out_$i472 == 1;
    goto corral_source_split_11687;

  $bb479:
    assume !(out_$i471 == 1);
    assume {:verifier.code 0} true;
    out_$i472 := $eq.i32(out_$i469, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} ldv_stop();
    goto corral_source_split_11717;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb481:
    assume {:verifier.code 0} true;
    assume !(out_$i472 == 1);
    goto $bb482;

  $bb484:
    assume {:verifier.code 0} true;
    assume !(out_$i473 == 1);
    goto $bb482;

  $bb502:
    assume !(out_$i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    goto $bb503;

  SeqInstr_864:
    goto corral_source_split_11720;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} ldv_main_exported_10();
    goto SeqInstr_863;

  $bb501:
    assume out_$i489 == 1;
    goto corral_source_split_11719;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    out_$i489 := $ne.i32(out_$i488, 0);
    goto corral_source_split_10883;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    out_$i488 := $M.96;
    goto corral_source_split_10882;

  $bb11:
    assume out_$i76 == 1;
    goto corral_source_split_10881;

  $bb10:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i71, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb505:
    assume !(out_$i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    goto $bb506;

  SeqInstr_867:
    goto corral_source_split_11723;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} ldv_main_exported_5();
    goto SeqInstr_866;

  $bb504:
    assume out_$i491 == 1;
    goto corral_source_split_11722;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    out_$i491 := $ne.i32(out_$i490, 0);
    goto corral_source_split_10887;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    out_$i490 := $M.97;
    goto corral_source_split_10886;

  $bb13:
    assume out_$i77 == 1;
    goto corral_source_split_10885;

  $bb12:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i71, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} ldv_stop();
    goto corral_source_split_11725;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb15;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb15;

  $bb53_dummy:
    call {:si_unique_call 1} out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$p117, out_$p118, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$p138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i188, out_$i189, out_$p190, out_$i191, out_$i193, out_$i194, out_$p195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$p228, out_$i229, out_$i230, out_$i232, out_$i233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$p248, out_$i249, out_$i251, out_$i252, out_$p253, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$p260, out_$p261, out_$i262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$p271, out_$i272, out_$i274, out_$i275, out_$p276, out_$i278, out_$i279, out_$p280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i488, out_$i489, out_$i490, out_$i491, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p15, in_$p17, in_$p19, in_$p20, in_$p22, in_$p24, in_$p25, in_$p27, in_$p29, in_$p31, in_$p33, in_$p35, in_$p37, in_$p38, in_$p40, in_$p42, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$p117, out_$p118, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$p138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i188, out_$i189, out_$p190, out_$i191, out_$i193, out_$i194, out_$p195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$p228, out_$i229, out_$i230, out_$i232, out_$i233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i241, out_$i242, out_$p243, out_$i245, out_$i246, out_$p247, out_$p248, out_$i249, out_$i251, out_$i252, out_$p253, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$p260, out_$p261, out_$i262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$p271, out_$i272, out_$i274, out_$i275, out_$p276, out_$i278, out_$i279, out_$p280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i287, out_$i288, out_$p289, out_$i290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i488, out_$i489, out_$i490, out_$i491, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p42: ref, in_$i71: i32, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i64, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i1, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i191: i32, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$p196: ref, in_$i197: i32, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$p228: ref, in_$i229: i32, in_$i230: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i64, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i249: i32, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$i255: i32, in_$i256: i1, in_$p257: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$p261: ref, in_$i262: i32, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$i272: i32, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i32, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i1, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i1, in_$i347: i1, in_$i348: i1, in_$i349: i1, in_$i350: i1, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i1, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$i366: i32, in_$i367: i32, in_$i368: i1, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i1, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i32, in_$i386: i1, in_$i387: i32, in_$i388: i1, in_$i389: i32, in_$i390: i32, in_$i391: i1, in_$i392: i32, in_$i393: i1, in_$i394: i32, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i32, in_$i401: i1, in_$i402: i32, in_$i403: i1, in_$i404: i32, in_$i405: i32, in_$i406: i1, in_$i407: i32, in_$i408: i1, in_$i409: i32, in_$i410: i32, in_$i411: i1, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i32, in_$i416: i1, in_$i417: i32, in_$i418: i1, in_$i419: i32, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i32, in_$i424: i32, in_$i425: i1, in_$i426: i32, in_$i427: i32, in_$i428: i1, in_$i429: i32, in_$i430: i1, in_$i431: i32, in_$i432: i32, in_$i433: i1, in_$i434: i32, in_$i435: i1, in_$i436: i32, in_$i437: i32, in_$i438: i1, in_$i439: i32, in_$i440: i1, in_$i441: i32, in_$i442: i32, in_$i443: i1, in_$i444: i32, in_$i445: i1, in_$i446: i32, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i32, in_$i453: i1, in_$i454: i32, in_$i455: i1, in_$i457: i32, in_$i458: i32, in_$i459: i32, in_$i460: i1, in_$i461: i32, in_$i462: i1, in_$i463: i32, in_$i464: i1, in_$i465: i32, in_$i466: i1, in_$i467: i32, in_$i468: i1, in_$i469: i32, in_$i470: i1, in_$i471: i1, in_$i472: i1, in_$i473: i1, in_$i474: i32, in_$i475: i1, in_$p476: ref, in_$i477: i32, in_$i478: i32, in_$i479: i1, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i1, in_$i488: i32, in_$i489: i1, in_$i490: i32, in_$i491: i1, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i64, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i64, in_vslice_dummy_var_212: ref, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: ref, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: ref, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: ref, in_vslice_dummy_var_227: ref, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32) returns (out_$i71: i32, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i64, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i1, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i191: i32, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$p196: ref, out_$i197: i32, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$p228: ref, out_$i229: i32, out_$i230: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i64, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i249: i32, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$i255: i32, out_$i256: i1, out_$p257: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$p261: ref, out_$i262: i32, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$i272: i32, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i32, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i1, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i1, out_$i347: i1, out_$i348: i1, out_$i349: i1, out_$i350: i1, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i1, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$i366: i32, out_$i367: i32, out_$i368: i1, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i1, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i32, out_$i386: i1, out_$i387: i32, out_$i388: i1, out_$i389: i32, out_$i390: i32, out_$i391: i1, out_$i392: i32, out_$i393: i1, out_$i394: i32, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i32, out_$i401: i1, out_$i402: i32, out_$i403: i1, out_$i404: i32, out_$i405: i32, out_$i406: i1, out_$i407: i32, out_$i408: i1, out_$i409: i32, out_$i410: i32, out_$i411: i1, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i32, out_$i416: i1, out_$i417: i32, out_$i418: i1, out_$i419: i32, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i32, out_$i424: i32, out_$i425: i1, out_$i426: i32, out_$i427: i32, out_$i428: i1, out_$i429: i32, out_$i430: i1, out_$i431: i32, out_$i432: i32, out_$i433: i1, out_$i434: i32, out_$i435: i1, out_$i436: i32, out_$i437: i32, out_$i438: i1, out_$i439: i32, out_$i440: i1, out_$i441: i32, out_$i442: i32, out_$i443: i1, out_$i444: i32, out_$i445: i1, out_$i446: i32, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i32, out_$i453: i1, out_$i454: i32, out_$i455: i1, out_$i457: i32, out_$i458: i32, out_$i459: i32, out_$i460: i1, out_$i461: i32, out_$i462: i1, out_$i463: i32, out_$i464: i1, out_$i465: i32, out_$i466: i1, out_$i467: i32, out_$i468: i1, out_$i469: i32, out_$i470: i1, out_$i471: i1, out_$i472: i1, out_$i473: i1, out_$i474: i32, out_$i475: i1, out_$p476: ref, out_$i477: i32, out_$i478: i32, out_$i479: i1, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i1, out_$i488: i32, out_$i489: i1, out_$i490: i32, out_$i491: i1, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i64, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i64, out_vslice_dummy_var_212: ref, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: ref, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: ref, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: ref, out_vslice_dummy_var_227: ref, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32);
  modifies $M.75, $M.82, $M.6, $CurrAddr, $M.76, $M.59, $M.98, $M.39, $M.77, $M.48, $M.47, $M.50, $M.49, $M.52, $M.51, $M.54, $M.53, $M.66, $M.57, $M.40, $M.78, $M.60, $M.35, $M.36, $M.41, $M.46, $M.61, $M.62, $M.58, assertsPassed, $M.32, $M.63, $M.64, $M.55, $M.81, $M.33, $M.69, $M.70, $M.128, $M.71, $M.72, $M.73, $M.74, $M.146, $M.84, $M.145, $M.85, $M.143, $M.144, $M.86, $M.142, $M.88, $M.141, $M.89, $M.68, $M.90, $M.139, $M.140, $M.91, $M.137, $M.138, $M.92, $M.133, $M.134, $M.135, $M.136, $M.93, $M.132, $M.94, $M.96, $M.67, $M.95, $M.97, $M.83, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.65;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


